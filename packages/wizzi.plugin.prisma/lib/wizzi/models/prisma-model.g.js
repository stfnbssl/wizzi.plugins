/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wzschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Wed, 15 May 2024 12:22:05 GMT
*/
'use strict';
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('@wizzi/utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var prismaBase = (function () {
    function prismaBase(name, sourceLineInfo) {
        _classCallCheck(this, prismaBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    prismaBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    prismaBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    prismaBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    prismaBase.prototype.wzVerify = function() {
    }
    prismaBase.prototype.wzInitialize = function() {
    }
    prismaBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    prismaBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    prismaBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    prismaBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    prismaBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    prismaBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    prismaBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    prismaBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    prismaBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    prismaBase.prototype.error = function(message, node) {
        throw new _md.prismaModelException(message, node, this);
    }
    prismaBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    prismaBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach(item => 
            
                children.push(item.toJson())
            )
            result.wzChildren = children;
        }
    }
    return prismaBase;
})();

_md.prismaBase = prismaBase;

// element comment
var comment = (function (prismaBase) {
    _inherits(comment, prismaBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.prismaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.prismaBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === '###') {
            return this.wzLoadToChildColl(child, _md.docComment, this.comments);
        }
        return false;
    }
    comment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    comment.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.prismaBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.prismaBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(prismaBase);

_md.comment = comment;
// element docComment
var docComment = (function (comment) {
    _inherits(docComment, comment);
    function docComment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(docComment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, docComment);
        this.wzElement = "docComment";
    }
    docComment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    docComment.prototype.toJsonProperties = function(result) {
        _md.comment.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    docComment.prototype.toJsonChildren = function(result) {
        _md.comment.prototype.toJsonChildren.call(this, result);
    }
    return docComment;
})(comment);

_md.docComment = docComment;
// element commentable
var commentable = (function (prismaBase) {
    _inherits(commentable, prismaBase);
    function commentable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(commentable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, commentable);
        this.wzElement = "commentable";
        // relation comment
        this.comments = [];
    }
    commentable.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    commentable.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    commentable.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    commentable.prototype.toJsonProperties = function(result) {
        _md.prismaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    commentable.prototype.toJsonChildren = function(result) {
        _md.prismaBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    commentable.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === '###') {
            return this.wzLoadToChildColl(child, _md.docComment, this.comments);
        }
        return false;
    }
    commentable.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    commentable.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.prismaBase.prototype.wzVerify.call(this, ctx);
    }
    commentable.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.prismaBase.prototype.wzInitialize.call(this, ctx);
    }
    return commentable;
})(prismaBase);

_md.commentable = commentable;
// element prisma
var prisma = (function (commentable) {
    _inherits(prisma, commentable);
    function prisma(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(prisma.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, prisma);
        this.wzElement = "prisma";
        // relation datasource
        this.datasources = [];
        // relation generator
        this.generators = [];
        // relation model
        this.models = [];
    }
    prisma.prototype.addDatasource = function(name, sourceLineInfo) {
        var retval = new _md.datasource(name, sourceLineInfo);
        retval.wzParent = this;
        this.datasources.push(retval);
        return retval;
    }
    prisma.prototype.getDatasource = function(name) {
        var found = null;
        this.datasources.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    prisma.prototype.addGenerator = function(name, sourceLineInfo) {
        var retval = new _md.generator(name, sourceLineInfo);
        retval.wzParent = this;
        this.generators.push(retval);
        return retval;
    }
    prisma.prototype.getGenerator = function(name) {
        var found = null;
        this.generators.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    prisma.prototype.addModel = function(name, sourceLineInfo) {
        var retval = new _md.model(name, sourceLineInfo);
        retval.wzParent = this;
        this.models.push(retval);
        return retval;
    }
    prisma.prototype.getModel = function(name) {
        var found = null;
        this.models.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    prisma.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    prisma.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    prisma.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.datasources.forEach(item => 
        
            items.push(item.toJson())
        )
        result['datasources'] = items;
        items = [];
        this.generators.forEach(item => 
        
            items.push(item.toJson())
        )
        result['generators'] = items;
        items = [];
        this.models.forEach(item => 
        
            items.push(item.toJson())
        )
        result['models'] = items;
    }
    prisma.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'model') {
            return this.wzLoadToChildColl(child, _md.model, this.models);
        }
        if (name === 'generator') {
            return this.wzLoadToChildColl(child, _md.generator, this.generators);
        }
        if (name === 'datasource') {
            return this.wzLoadToChildColl(child, _md.datasource, this.datasources);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    prisma.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    prisma.prototype.wzVerify = function(ctx) {
        this.datasources.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.generators.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.models.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    prisma.prototype.wzInitialize = function(ctx) {
        this.datasources.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.generators.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.models.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return prisma;
})(commentable);

_md.prisma = prisma;
// element fieldType
var fieldType = (function (prismaBase) {
    _inherits(fieldType, prismaBase);
    function fieldType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fieldType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fieldType);
        this.wzElement = "fieldType";
    }
    fieldType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fieldType.prototype.toJsonProperties = function(result) {
        _md.prismaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fieldType.prototype.toJsonChildren = function(result) {
        _md.prismaBase.prototype.toJsonChildren.call(this, result);
    }
    fieldType.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        return false;
    }
    fieldType.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fieldType.prototype.getTypeString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        if (this.wzElement == 'stringType') {
            return 'String';
        }
        else if (this.wzElement == 'booleanType') {
            return 'Boolean';
        }
        else if (this.wzElement == 'intType') {
            return 'Int';
        }
        else if (this.wzElement == 'bigIntType') {
            return 'BigInt';
        }
        else if (this.wzElement == 'floatType') {
            return 'Float';
        }
        else if (this.wzElement == 'decimalType') {
            return 'Decimal';
        }
        else if (this.wzElement == 'dateTimeType') {
            return 'DateTime';
        }
        else if (this.wzElement == 'jsonType') {
            return 'Json';
        }
        else if (this.wzElement == 'bytesType') {
            return 'Bytes';
        }
        else if (this.wzElement == 'unsupportedType') {
            return 'Unsupported';
        }
        else if (this.wzElement == 'refType') {
            return this.wzName;
        }
        else if (this.wzElement == 'listType') {
            if (this.fieldType) {
                return this.fieldType.getTypeString() + '[]';
            }
            else {
                return 'String[]';
            }
        }
        
    }
    return fieldType;
})(prismaBase);

_md.fieldType = fieldType;
// element stringType
var stringType = (function (fieldType) {
    _inherits(stringType, fieldType);
    function stringType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stringType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stringType);
        this.wzElement = "stringType";
    }
    stringType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stringType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stringType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return stringType;
})(fieldType);

_md.stringType = stringType;
// element booleanType
var booleanType = (function (fieldType) {
    _inherits(booleanType, fieldType);
    function booleanType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(booleanType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, booleanType);
        this.wzElement = "booleanType";
    }
    booleanType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    booleanType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    booleanType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return booleanType;
})(fieldType);

_md.booleanType = booleanType;
// element intType
var intType = (function (fieldType) {
    _inherits(intType, fieldType);
    function intType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(intType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, intType);
        this.wzElement = "intType";
    }
    intType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    intType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    intType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return intType;
})(fieldType);

_md.intType = intType;
// element bigIntType
var bigIntType = (function (fieldType) {
    _inherits(bigIntType, fieldType);
    function bigIntType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bigIntType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bigIntType);
        this.wzElement = "bigIntType";
    }
    bigIntType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bigIntType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bigIntType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return bigIntType;
})(fieldType);

_md.bigIntType = bigIntType;
// element floatType
var floatType = (function (fieldType) {
    _inherits(floatType, fieldType);
    function floatType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(floatType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, floatType);
        this.wzElement = "floatType";
    }
    floatType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    floatType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    floatType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return floatType;
})(fieldType);

_md.floatType = floatType;
// element decimalType
var decimalType = (function (fieldType) {
    _inherits(decimalType, fieldType);
    function decimalType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(decimalType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, decimalType);
        this.wzElement = "decimalType";
    }
    decimalType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    decimalType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    decimalType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return decimalType;
})(fieldType);

_md.decimalType = decimalType;
// element dateTimeType
var dateTimeType = (function (fieldType) {
    _inherits(dateTimeType, fieldType);
    function dateTimeType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dateTimeType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dateTimeType);
        this.wzElement = "dateTimeType";
    }
    dateTimeType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    dateTimeType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    dateTimeType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return dateTimeType;
})(fieldType);

_md.dateTimeType = dateTimeType;
// element jsonType
var jsonType = (function (fieldType) {
    _inherits(jsonType, fieldType);
    function jsonType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonType);
        this.wzElement = "jsonType";
    }
    jsonType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    jsonType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    jsonType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return jsonType;
})(fieldType);

_md.jsonType = jsonType;
// element bytesType
var bytesType = (function (fieldType) {
    _inherits(bytesType, fieldType);
    function bytesType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bytesType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bytesType);
        this.wzElement = "bytesType";
    }
    bytesType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bytesType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bytesType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return bytesType;
})(fieldType);

_md.bytesType = bytesType;
// element unsupportedType
var unsupportedType = (function (fieldType) {
    _inherits(unsupportedType, fieldType);
    function unsupportedType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(unsupportedType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, unsupportedType);
        this.wzElement = "unsupportedType";
    }
    unsupportedType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    unsupportedType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    unsupportedType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return unsupportedType;
})(fieldType);

_md.unsupportedType = unsupportedType;
// element refType
var refType = (function (fieldType) {
    _inherits(refType, fieldType);
    function refType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(refType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, refType);
        this.wzElement = "refType";
    }
    refType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    refType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    refType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
    }
    return refType;
})(fieldType);

_md.refType = refType;
// element listType
var listType = (function (fieldType) {
    _inherits(listType, fieldType);
    function listType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(listType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, listType);
        this.wzElement = "listType";
        // relation fieldType
        this.fieldType = null;
    }
    listType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    listType.prototype.toJsonProperties = function(result) {
        _md.fieldType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    listType.prototype.toJsonChildren = function(result) {
        _md.fieldType.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.fieldType != null) {
            result['fieldType'] = this.fieldType.toJson();
        }
        else {
            result['fieldType'] = null;
        }
    }
    listType.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === ':[') {
            return this.wzLoadOneToOne(child, _md.listType, 'fieldType');
        }
        if (name === ':int') {
            return this.wzLoadOneToOne(child, _md.intType, 'fieldType');
        }
        else if (name === ':ref') {
            return this.wzLoadOneToOne(child, _md.refType, 'fieldType');
        }
        if (name === ':json') {
            return this.wzLoadOneToOne(child, _md.jsonType, 'fieldType');
        }
        if (name === ':float') {
            return this.wzLoadOneToOne(child, _md.floatType, 'fieldType');
        }
        else if (name === ':bytes') {
            return this.wzLoadOneToOne(child, _md.bytesType, 'fieldType');
        }
        if (name === ':string') {
            return this.wzLoadOneToOne(child, _md.stringType, 'fieldType');
        }
        else if (name === ':bigint') {
            return this.wzLoadOneToOne(child, _md.bigIntType, 'fieldType');
        }
        if (name === ':boolean') {
            return this.wzLoadOneToOne(child, _md.booleanType, 'fieldType');
        }
        else if (name === ':decimal') {
            return this.wzLoadOneToOne(child, _md.decimalType, 'fieldType');
        }
        if (name === ':datetime') {
            return this.wzLoadOneToOne(child, _md.dateTimeType, 'fieldType');
        }
        if (name === ':unsupported') {
            return this.wzLoadOneToOne(child, _md.unsupportedType, 'fieldType');
        }
        ok = _md.fieldType.prototype.loadChild.call(this, child);
        return ok;
    }
    listType.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    listType.prototype.wzVerify = function(ctx) {
        if (this.fieldType != null) {
            this.fieldType.wzVerify(ctx);
        }
        _md.fieldType.prototype.wzVerify.call(this, ctx);
    }
    listType.prototype.wzInitialize = function(ctx) {
        if (this.fieldType != null) {
            this.fieldType.wzInitialize(ctx);
        }
        _md.fieldType.prototype.wzInitialize.call(this, ctx);
    }
    return listType;
})(fieldType);

_md.listType = listType;
// element valueAssign
var valueAssign = (function (prismaBase) {
    _inherits(valueAssign, prismaBase);
    function valueAssign(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(valueAssign.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, valueAssign);
        this.wzElement = "valueAssign";
        // relation valueAssign
        this.valueAssigns = [];
    }
    valueAssign.prototype.getValueAssign = function(name) {
        var found = null;
        this.valueAssigns.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    valueAssign.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    valueAssign.prototype.toJsonProperties = function(result) {
        _md.prismaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    valueAssign.prototype.toJsonChildren = function(result) {
        _md.prismaBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.valueAssigns.forEach(item => 
        
            items.push(item.toJson())
        )
        result['valueAssigns'] = items;
    }
    valueAssign.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '=') {
            return this.wzLoadToChildColl(child, _md.scalarAssign, this.valueAssigns);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.scalarValue, this.valueAssigns);
        }
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.array, this.valueAssigns);
        }
        if (name === '_') {
            return this.wzLoadToChildColl(child, _md.functionCallAssign, this.valueAssigns);
        }
        if (name === '=[') {
            return this.wzLoadToChildColl(child, _md.pathAssign, this.valueAssigns);
        }
        if (name === 'fields') {
            return this.wzLoadToChildColl(child, _md.fields, this.valueAssigns);
        }
        if (name === 'ondelete') {
            return this.wzLoadToChildColl(child, _md.onDelete, this.valueAssigns);
        }
        else if (name === 'onupdate') {
            return this.wzLoadToChildColl(child, _md.onUpdate, this.valueAssigns);
        }
        if (name === 'strategy') {
            return this.wzLoadToChildColl(child, _md.strategy, this.valueAssigns);
        }
        if (name === 'references') {
            return this.wzLoadToChildColl(child, _md.references, this.valueAssigns);
        }
        return false;
    }
    valueAssign.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    valueAssign.prototype.wzVerify = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.prismaBase.prototype.wzVerify.call(this, ctx);
    }
    valueAssign.prototype.wzInitialize = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.prismaBase.prototype.wzInitialize.call(this, ctx);
    }
    return valueAssign;
})(prismaBase);

_md.valueAssign = valueAssign;
// element scalarAssign
var scalarAssign = (function (valueAssign) {
    _inherits(scalarAssign, valueAssign);
    function scalarAssign(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(scalarAssign.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, scalarAssign);
        this.wzElement = "scalarAssign";
    }
    scalarAssign.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    scalarAssign.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    scalarAssign.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
    }
    scalarAssign.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return this.wzName;
        
    }
    return scalarAssign;
})(valueAssign);

_md.scalarAssign = scalarAssign;
// element pathAssign
var pathAssign = (function (valueAssign) {
    _inherits(pathAssign, valueAssign);
    function pathAssign(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pathAssign.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pathAssign);
        this.wzElement = "pathAssign";
    }
    pathAssign.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pathAssign.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    pathAssign.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
    }
    pathAssign.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return this.wzName;
        
    }
    return pathAssign;
})(valueAssign);

_md.pathAssign = pathAssign;
// element scalarValue
var scalarValue = (function (valueAssign) {
    _inherits(scalarValue, valueAssign);
    function scalarValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(scalarValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, scalarValue);
        this.wzElement = "scalarValue";
    }
    scalarValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    scalarValue.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    scalarValue.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
    }
    scalarValue.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return this.wzName;
        
    }
    return scalarValue;
})(valueAssign);

_md.scalarValue = scalarValue;
// element param
var param = (function (prismaBase) {
    _inherits(param, prismaBase);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
    }
    param.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    param.prototype.toJsonProperties = function(result) {
        _md.prismaBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    param.prototype.toJsonChildren = function(result) {
        _md.prismaBase.prototype.toJsonChildren.call(this, result);
    }
    param.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        return false;
    }
    param.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return param;
})(prismaBase);

_md.param = param;
// element scalaraParam
var scalaraParam = (function (param) {
    _inherits(scalaraParam, param);
    function scalaraParam(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(scalaraParam.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, scalaraParam);
        this.wzElement = "scalaraParam";
    }
    scalaraParam.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    scalaraParam.prototype.toJsonProperties = function(result) {
        _md.param.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    scalaraParam.prototype.toJsonChildren = function(result) {
        _md.param.prototype.toJsonChildren.call(this, result);
    }
    scalaraParam.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return this.wzName;
        
    }
    return scalaraParam;
})(param);

_md.scalaraParam = scalaraParam;
// element functionCallAssign
var functionCallAssign = (function (valueAssign) {
    _inherits(functionCallAssign, valueAssign);
    function functionCallAssign(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(functionCallAssign.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, functionCallAssign);
        this.wzElement = "functionCallAssign";
        // relation param
        this.params = [];
    }
    functionCallAssign.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    functionCallAssign.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    functionCallAssign.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    functionCallAssign.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.params.forEach(item => 
        
            items.push(item.toJson())
        )
        result['params'] = items;
    }
    functionCallAssign.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.scalaraParam, this.params);
        }
        ok = _md.valueAssign.prototype.loadChild.call(this, child);
        return ok;
    }
    functionCallAssign.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    functionCallAssign.prototype.wzVerify = function(ctx) {
        this.params.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.valueAssign.prototype.wzVerify.call(this, ctx);
    }
    functionCallAssign.prototype.wzInitialize = function(ctx) {
        this.params.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.valueAssign.prototype.wzInitialize.call(this, ctx);
    }
    functionCallAssign.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        var ret = [this.wzName + '('];
        var seen = false;
        var i, i_items=this.params, i_len=this.params.length, p;
        for (i=0; i<i_len; i++) {
            p = this.params[i];
            if (seen) {
                ret.push(', ');
            }
            ret.push(p.getValueString())
            seen = true;
        }
        ret.push(')');
        return ret.join('');
        
    }
    return functionCallAssign;
})(valueAssign);

_md.functionCallAssign = functionCallAssign;
// element array
var array = (function (valueAssign) {
    _inherits(array, valueAssign);
    function array(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(array.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, array);
        this.wzElement = "array";
        // relation valueAssign
        this.valueAssigns = [];
    }
    array.prototype.getValueAssign = function(name) {
        var found = null;
        this.valueAssigns.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    array.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    array.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    array.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.valueAssigns.forEach(item => 
        
            items.push(item.toJson())
        )
        result['valueAssigns'] = items;
    }
    array.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            return this.wzLoadToChildColl(child, _md.scalarAssign, this.valueAssigns);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.scalarValue, this.valueAssigns);
        }
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.array, this.valueAssigns);
        }
        if (name === '_') {
            return this.wzLoadToChildColl(child, _md.functionCallAssign, this.valueAssigns);
        }
        if (name === '=[') {
            return this.wzLoadToChildColl(child, _md.pathAssign, this.valueAssigns);
        }
        if (name === 'fields') {
            return this.wzLoadToChildColl(child, _md.fields, this.valueAssigns);
        }
        if (name === 'ondelete') {
            return this.wzLoadToChildColl(child, _md.onDelete, this.valueAssigns);
        }
        else if (name === 'onupdate') {
            return this.wzLoadToChildColl(child, _md.onUpdate, this.valueAssigns);
        }
        if (name === 'strategy') {
            return this.wzLoadToChildColl(child, _md.strategy, this.valueAssigns);
        }
        if (name === 'references') {
            return this.wzLoadToChildColl(child, _md.references, this.valueAssigns);
        }
        ok = _md.valueAssign.prototype.loadChild.call(this, child);
        return ok;
    }
    array.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    array.prototype.wzVerify = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.valueAssign.prototype.wzVerify.call(this, ctx);
    }
    array.prototype.wzInitialize = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.valueAssign.prototype.wzInitialize.call(this, ctx);
    }
    array.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        var ret = [this.wzName + '['];
        var seen = false;
        var i, i_items=this.valueAssigns, i_len=this.valueAssigns.length, p;
        for (i=0; i<i_len; i++) {
            p = this.valueAssigns[i];
            if (seen) {
                ret.push(', ');
            }
            ret.push(p.getValueString())
            seen = true;
        }
        ret.push(']');
        return ret.join('');
        
    }
    return array;
})(valueAssign);

_md.array = array;
// element config
var config = (function (commentable) {
    _inherits(config, commentable);
    function config(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(config.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, config);
        this.wzElement = "config";
        // relation valueAssign
        this.valueAssign = null;
    }
    config.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    config.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    config.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.valueAssign != null) {
            result['valueAssign'] = this.valueAssign.toJson();
        }
        else {
            result['valueAssign'] = null;
        }
    }
    config.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            return this.wzLoadOneToOne(child, _md.scalarAssign, 'valueAssign');
        }
        if (name === '@') {
            return this.wzLoadOneToOne(child, _md.scalarValue, 'valueAssign');
        }
        if (name === '[') {
            return this.wzLoadOneToOne(child, _md.array, 'valueAssign');
        }
        if (name === '_') {
            return this.wzLoadOneToOne(child, _md.functionCallAssign, 'valueAssign');
        }
        if (name === '=[') {
            return this.wzLoadOneToOne(child, _md.pathAssign, 'valueAssign');
        }
        if (name === 'fields') {
            return this.wzLoadOneToOne(child, _md.fields, 'valueAssign');
        }
        if (name === 'ondelete') {
            return this.wzLoadOneToOne(child, _md.onDelete, 'valueAssign');
        }
        else if (name === 'onupdate') {
            return this.wzLoadOneToOne(child, _md.onUpdate, 'valueAssign');
        }
        if (name === 'strategy') {
            return this.wzLoadOneToOne(child, _md.strategy, 'valueAssign');
        }
        if (name === 'references') {
            return this.wzLoadOneToOne(child, _md.references, 'valueAssign');
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    config.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    config.prototype.wzVerify = function(ctx) {
        if (this.valueAssign != null) {
            this.valueAssign.wzVerify(ctx);
        }
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    config.prototype.wzInitialize = function(ctx) {
        if (this.valueAssign != null) {
            this.valueAssign.wzInitialize(ctx);
        }
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return config;
})(commentable);

_md.config = config;
// element datasource
var datasource = (function (commentable) {
    _inherits(datasource, commentable);
    function datasource(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(datasource.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, datasource);
        this.wzElement = "datasource";
        // relation config
        this.configs = [];
    }
    datasource.prototype.addConfig = function(name, sourceLineInfo) {
        var retval = new _md.config(name, sourceLineInfo);
        retval.wzParent = this;
        this.configs.push(retval);
        return retval;
    }
    datasource.prototype.getConfig = function(name) {
        var found = null;
        this.configs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    datasource.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    datasource.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    datasource.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.configs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['configs'] = items;
    }
    datasource.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'config') {
            return this.wzLoadToChildColl(child, _md.config, this.configs);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    datasource.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    datasource.prototype.wzVerify = function(ctx) {
        this.configs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    datasource.prototype.wzInitialize = function(ctx) {
        this.configs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return datasource;
})(commentable);

_md.datasource = datasource;
// element generator
var generator = (function (commentable) {
    _inherits(generator, commentable);
    function generator(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(generator.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, generator);
        this.wzElement = "generator";
        // relation config
        this.configs = [];
    }
    generator.prototype.addConfig = function(name, sourceLineInfo) {
        var retval = new _md.config(name, sourceLineInfo);
        retval.wzParent = this;
        this.configs.push(retval);
        return retval;
    }
    generator.prototype.getConfig = function(name) {
        var found = null;
        this.configs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    generator.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    generator.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    generator.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.configs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['configs'] = items;
    }
    generator.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'config') {
            return this.wzLoadToChildColl(child, _md.config, this.configs);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    generator.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    generator.prototype.wzVerify = function(ctx) {
        this.configs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    generator.prototype.wzInitialize = function(ctx) {
        this.configs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return generator;
})(commentable);

_md.generator = generator;
// element model
var model = (function (commentable) {
    _inherits(model, commentable);
    function model(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(model.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, model);
        this.wzElement = "model";
        // relation field
        this.fields = [];
        // relation blockAttribute
        this.blockAttributes = [];
    }
    model.prototype.addField = function(name, sourceLineInfo) {
        var retval = new _md.field(name, sourceLineInfo);
        retval.wzParent = this;
        this.fields.push(retval);
        return retval;
    }
    model.prototype.getField = function(name) {
        var found = null;
        this.fields.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    model.prototype.addBlockAttribute = function(name, sourceLineInfo) {
        var retval = new _md.blockAttribute(name, sourceLineInfo);
        retval.wzParent = this;
        this.blockAttributes.push(retval);
        return retval;
    }
    model.prototype.getBlockAttribute = function(name) {
        var found = null;
        this.blockAttributes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    model.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    model.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    model.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.fields.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fields'] = items;
        items = [];
        this.blockAttributes.forEach(item => 
        
            items.push(item.toJson())
        )
        result['blockAttributes'] = items;
    }
    model.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@@') {
            return this.wzLoadToChildColl(child, _md.blockAttribute, this.blockAttributes);
        }
        if (name === 'field') {
            return this.wzLoadToChildColl(child, _md.field, this.fields);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    model.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    model.prototype.wzVerify = function(ctx) {
        this.fields.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.blockAttributes.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    model.prototype.wzInitialize = function(ctx) {
        this.fields.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.blockAttributes.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return model;
})(commentable);

_md.model = model;
// element field
var field = (function (commentable) {
    _inherits(field, commentable);
    function field(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(field.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, field);
        this.wzElement = "field";
        this.optional = false;
        // relation fieldType
        this.fieldType = null;
        // relation fieldAttribute
        this.fieldAttributes = [];
    }
    field.prototype.addFieldAttribute = function(name, sourceLineInfo) {
        var retval = new _md.fieldAttribute(name, sourceLineInfo);
        retval.wzParent = this;
        this.fieldAttributes.push(retval);
        return retval;
    }
    field.prototype.getFieldAttribute = function(name) {
        var found = null;
        this.fieldAttributes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    field.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    field.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        result["optional"] = this.optional;
    }
    field.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.fieldType != null) {
            result['fieldType'] = this.fieldType.toJson();
        }
        else {
            result['fieldType'] = null;
        }
        items = [];
        this.fieldAttributes.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fieldAttributes'] = items;
    }
    field.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.fieldAttribute, this.fieldAttributes);
        }
        if (name === ':[') {
            return this.wzLoadOneToOne(child, _md.listType, 'fieldType');
        }
        if (name === ':int') {
            return this.wzLoadOneToOne(child, _md.intType, 'fieldType');
        }
        else if (name === ':ref') {
            return this.wzLoadOneToOne(child, _md.refType, 'fieldType');
        }
        if (name === ':json') {
            return this.wzLoadOneToOne(child, _md.jsonType, 'fieldType');
        }
        if (name === ':float') {
            return this.wzLoadOneToOne(child, _md.floatType, 'fieldType');
        }
        else if (name === ':bytes') {
            return this.wzLoadOneToOne(child, _md.bytesType, 'fieldType');
        }
        if (name === ':string') {
            return this.wzLoadOneToOne(child, _md.stringType, 'fieldType');
        }
        else if (name === ':bigint') {
            return this.wzLoadOneToOne(child, _md.bigIntType, 'fieldType');
        }
        if (name === ':boolean') {
            return this.wzLoadOneToOne(child, _md.booleanType, 'fieldType');
        }
        else if (name === ':decimal') {
            return this.wzLoadOneToOne(child, _md.decimalType, 'fieldType');
        }
        if (name === ':optional') {
            this.optional = parseboolean(child.v, true, child); return true;
        }
        else if (name === ':datetime') {
            return this.wzLoadOneToOne(child, _md.dateTimeType, 'fieldType');
        }
        if (name === ':unsupported') {
            return this.wzLoadOneToOne(child, _md.unsupportedType, 'fieldType');
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    field.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    field.prototype.wzVerify = function(ctx) {
        if (this.fieldType != null) {
            this.fieldType.wzVerify(ctx);
        }
        this.fieldAttributes.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    field.prototype.wzInitialize = function(ctx) {
        if (this.fieldType != null) {
            this.fieldType.wzInitialize(ctx);
        }
        this.fieldAttributes.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    field.prototype.getTypeString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        var opt = this.optional ? '?' : '';
        // loog 'field.getTypeString', this.wzName, this.fieldType, opt
        if (this.fieldType) {
            return this.fieldType.getTypeString() + opt;
        }
        else {
            return 'String' + opt;
        }
        
    }
    return field;
})(commentable);

_md.field = field;
// element fieldAttribute
var fieldAttribute = (function (commentable) {
    _inherits(fieldAttribute, commentable);
    function fieldAttribute(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fieldAttribute.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fieldAttribute);
        this.wzElement = "fieldAttribute";
        // relation valueAssign
        this.valueAssigns = [];
    }
    fieldAttribute.prototype.getValueAssign = function(name) {
        var found = null;
        this.valueAssigns.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    fieldAttribute.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fieldAttribute.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fieldAttribute.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.valueAssigns.forEach(item => 
        
            items.push(item.toJson())
        )
        result['valueAssigns'] = items;
    }
    fieldAttribute.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            return this.wzLoadToChildColl(child, _md.scalarAssign, this.valueAssigns);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.scalarValue, this.valueAssigns);
        }
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.array, this.valueAssigns);
        }
        if (name === '_') {
            return this.wzLoadToChildColl(child, _md.functionCallAssign, this.valueAssigns);
        }
        if (name === '=[') {
            return this.wzLoadToChildColl(child, _md.pathAssign, this.valueAssigns);
        }
        if (name === 'fields') {
            return this.wzLoadToChildColl(child, _md.fields, this.valueAssigns);
        }
        if (name === 'ondelete') {
            return this.wzLoadToChildColl(child, _md.onDelete, this.valueAssigns);
        }
        else if (name === 'onupdate') {
            return this.wzLoadToChildColl(child, _md.onUpdate, this.valueAssigns);
        }
        if (name === 'strategy') {
            return this.wzLoadToChildColl(child, _md.strategy, this.valueAssigns);
        }
        if (name === 'references') {
            return this.wzLoadToChildColl(child, _md.references, this.valueAssigns);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    fieldAttribute.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fieldAttribute.prototype.wzVerify = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    fieldAttribute.prototype.wzInitialize = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return fieldAttribute;
})(commentable);

_md.fieldAttribute = fieldAttribute;
// element blockAttribute
var blockAttribute = (function (commentable) {
    _inherits(blockAttribute, commentable);
    function blockAttribute(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(blockAttribute.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, blockAttribute);
        this.wzElement = "blockAttribute";
        // relation valueAssign
        this.valueAssigns = [];
    }
    blockAttribute.prototype.getValueAssign = function(name) {
        var found = null;
        this.valueAssigns.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    blockAttribute.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    blockAttribute.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.name)) {
            result["name"] = this.name;
        }
    }
    blockAttribute.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.valueAssigns.forEach(item => 
        
            items.push(item.toJson())
        )
        result['valueAssigns'] = items;
    }
    blockAttribute.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            return this.wzLoadToChildColl(child, _md.scalarAssign, this.valueAssigns);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.scalarValue, this.valueAssigns);
        }
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.array, this.valueAssigns);
        }
        if (name === '_') {
            return this.wzLoadToChildColl(child, _md.functionCallAssign, this.valueAssigns);
        }
        if (name === '=[') {
            return this.wzLoadToChildColl(child, _md.pathAssign, this.valueAssigns);
        }
        if (name === 'name') {
            this.name = child.v; return true;
        }
        if (name === 'fields') {
            return this.wzLoadToChildColl(child, _md.fields, this.valueAssigns);
        }
        if (name === 'ondelete') {
            return this.wzLoadToChildColl(child, _md.onDelete, this.valueAssigns);
        }
        else if (name === 'onupdate') {
            return this.wzLoadToChildColl(child, _md.onUpdate, this.valueAssigns);
        }
        if (name === 'strategy') {
            return this.wzLoadToChildColl(child, _md.strategy, this.valueAssigns);
        }
        if (name === 'references') {
            return this.wzLoadToChildColl(child, _md.references, this.valueAssigns);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    blockAttribute.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    blockAttribute.prototype.wzVerify = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    blockAttribute.prototype.wzInitialize = function(ctx) {
        this.valueAssigns.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return blockAttribute;
})(commentable);

_md.blockAttribute = blockAttribute;
// element fields
var fields = (function (valueAssign) {
    _inherits(fields, valueAssign);
    function fields(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fields.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fields);
        this.wzElement = "fields";
        // relation array
        this.array = null;
    }
    fields.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fields.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fields.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.array != null) {
            result['array'] = this.array.toJson();
        }
        else {
            result['array'] = null;
        }
    }
    fields.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '[') {
            return this.wzLoadOneToOne(child, _md.array, 'array');
        }
        ok = _md.valueAssign.prototype.loadChild.call(this, child);
        return ok;
    }
    fields.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fields.prototype.wzVerify = function(ctx) {
        if (this.array != null) {
            this.array.wzVerify(ctx);
        }
        _md.valueAssign.prototype.wzVerify.call(this, ctx);
    }
    fields.prototype.wzInitialize = function(ctx) {
        if (this.array != null) {
            this.array.wzInitialize(ctx);
        }
        _md.valueAssign.prototype.wzInitialize.call(this, ctx);
    }
    fields.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return 'fields: ' + (this.array && this.array.getValueString());
        
    }
    return fields;
})(valueAssign);

_md.fields = fields;
// element references
var references = (function (valueAssign) {
    _inherits(references, valueAssign);
    function references(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(references.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, references);
        this.wzElement = "references";
        // relation array
        this.array = null;
    }
    references.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    references.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    references.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.array != null) {
            result['array'] = this.array.toJson();
        }
        else {
            result['array'] = null;
        }
    }
    references.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '[') {
            return this.wzLoadOneToOne(child, _md.array, 'array');
        }
        ok = _md.valueAssign.prototype.loadChild.call(this, child);
        return ok;
    }
    references.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.prismaModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    references.prototype.wzVerify = function(ctx) {
        if (this.array != null) {
            this.array.wzVerify(ctx);
        }
        _md.valueAssign.prototype.wzVerify.call(this, ctx);
    }
    references.prototype.wzInitialize = function(ctx) {
        if (this.array != null) {
            this.array.wzInitialize(ctx);
        }
        _md.valueAssign.prototype.wzInitialize.call(this, ctx);
    }
    references.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return 'references: ' + (this.array && this.array.getValueString());
        
    }
    return references;
})(valueAssign);

_md.references = references;
// element strategy
var strategy = (function (valueAssign) {
    _inherits(strategy, valueAssign);
    function strategy(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(strategy.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, strategy);
        this.wzElement = "strategy";
    }
    strategy.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    strategy.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    strategy.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
    }
    strategy.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return 'strategy: ' + this.wzName;
        
    }
    return strategy;
})(valueAssign);

_md.strategy = strategy;
// element onDelete
var onDelete = (function (valueAssign) {
    _inherits(onDelete, valueAssign);
    function onDelete(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(onDelete.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, onDelete);
        this.wzElement = "onDelete";
    }
    onDelete.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    onDelete.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    onDelete.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
    }
    onDelete.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return 'onDelete: ' + this.wzName;
        
    }
    return onDelete;
})(valueAssign);

_md.onDelete = onDelete;
// element onUpdate
var onUpdate = (function (valueAssign) {
    _inherits(onUpdate, valueAssign);
    function onUpdate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(onUpdate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, onUpdate);
        this.wzElement = "onUpdate";
    }
    onUpdate.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    onUpdate.prototype.toJsonProperties = function(result) {
        _md.valueAssign.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    onUpdate.prototype.toJsonChildren = function(result) {
        _md.valueAssign.prototype.toJsonChildren.call(this, result);
    }
    onUpdate.prototype.getValueString = function() {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.prisma\.wizzi-override\lib\wizzi\schemas\prisma.wzschema.ittf
            utc time: Wed, 15 May 2024 12:22:05 GMT
        */
        return 'onUpdate: ' + this.wzName;
        
    }
    return onUpdate;
})(valueAssign);

_md.onUpdate = onUpdate;
_md.__tagElementMapping = { '#': 'comment', '###': 'docComment', ':string': 'stringType', ':boolean': 'booleanType', ':int': 'intType', ':bigInt': 'bigIntType', ':float': 'floatType', ':decimal': 'decimalType', ':dateTime': 'dateTimeType', ':json': 'jsonType', ':bytes': 'bytesType', ':unsupported': 'unsupportedType', ':ref': 'refType', ':[': 'listType', '=': 'scalarAssign', '=[': 'pathAssign', '@': 'scalarValue', '_': 'functionCallAssign', '[': 'array', '@@': 'blockAttribute' };
// model/replaceUnknownElement( )
var prismaModelException = (function () {
    function prismaModelException(message, node, instance) {
        _classCallCheck(this, prismaModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    prismaModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: prismaModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return prismaModelException;
})();

_md.prismaModelException = prismaModelException;
var prismaContext = (function () {
    function prismaContext() {
        _classCallCheck(this, prismaContext);
        this.validationErrors = [];
    }
    prismaContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    prismaContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    return prismaContext;
})();

_md.prismaContext = prismaContext;
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new prismaModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

