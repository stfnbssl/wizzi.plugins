module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.prisma',
            name: 'document',
            schema: 'prisma',
            rootElement: '',
            rootTag: 'prisma',
            checkSchema: true,
            isAsync: true,
        };

    gen( &md )
        $append imports
            var functionAttributes = ['default', 'relation', 'map']
        $append main
            set ctx.__json
                {
                    @ name model.wzName
                    { mainMetas
                        [ fieldKeyAttributes
                            {
                                @ name 'isId'
                                @ meaning 'The field is a single field primary key.'
                            {
                                @ name 'isRelated'
                                @ meaning 'The field is a single field foreign key, can be `idRelated` or `objectRelated`.'
                            {
                                @ name 'idRelated'
                                @ meaning 'The field is a scalar single field foreign key in a `many-to-one` relation.'
                            {
                                @ name 'objectRelated'
                                [ meaning
                                    @ 'The field contains (is populated with) the instance/s of the related model item/s.'
                                    @ 'When relationCardinality is `one-to-many` contains an array of related instances.'
                                    @ 'When relationCardinality is `many-to-one` or `one-to-one` contains an object of the related instance.'
                            {
                                @ name 'relation'
                                [ meaning
                                    @ 'When The field is `objectRelated` and relationCardinality is `many-to-one` or `one-to-one` ...'
                                    @ '... the attribute contains a relation structure that can have a multi field foreign key.'
                        [ relationCardinalities
                            @ 'one-to-one'
                            @ 'one-to-many'
                            @ 'many-to-one'
                            @ 'many-to-many'
                        [ fieldTypes
                            @ 'String'
                            @ 'Boolean'
                            @ 'Int'
                            @ 'BigInt'
                            @ 'Float'
                            @ 'Decimal'
                            @ 'DateTime'
                            @ 'Json'
                            @ 'Bytes'
                        [ constraints   
                            @ 'min'
                            @ 'max'
                            @ 'minLength'
                            @ 'maxLength'
                            @ 'regExp'
                            @ 'enum'
                        [ editFormats
                            @ 'Checkbox'
                            @ 'Radio'
                            @ 'Color'
                            @ 'Select'
                            @ 'Switch'
                            @ 'Slider'
                            @ 'Rate'
                            @ 'Upload'
                            @ 'Markdown'
                    [ datasources
                    [ generators
                    [ enums
                    [ models
                    [ relations
                    [ indexes
            set ctx.__current = ctx.__json
            _ md.prisma
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        _ setRelations
                            @ ctx.__json.models
                        _ ctx.w
                            _ JSON.stringify
                                @ ctx.__json
                                @ null
                                @ 2
                        r_cb( ctx )
        async-md( prisma )
            _md_gen_items( datasources
                _md_gen_items( generators
                    _md_gen_items( models
                        r_cb()
        
        async-md( datasource )
            var saveCurrent = ctx.__current
            var json
                {
                    @ name model.wzName
                    [ configs
            _ ctx.__current.datasources.push
                @ json
            set ctx.__current = json
            _md_gen_items( configs, indent
                set ctx.__current = saveCurrent
                r_cb()

        async-md( generator )
            var saveCurrent = ctx.__current
            var json
                {
                    @ name model.wzName
                    [ configs
            _ ctx.__current.generators.push
                @ json
            set ctx.__current = json
            _md_gen_items( configs, indent
                set ctx.__current = saveCurrent
                r_cb()

        async-md( model )
            var saveCurrent = ctx.__current
            # loog 'model', model.wzName
            var jsonModel
                {
                    @ Name model.wzName
                    @ NamePlural verify.pluralize(model.wzName)
                    @ name model.wzName[0].toLowerCase() + model.wzName.substring(1)
                    @ namePlural verify.pluralize(model.wzName[0].toLowerCase() + model.wzName.substring(1)) 
                    [ fields
                    [ relations
                    [ attributes
                    [ indexes
                    [ tags
            if model.extNoUpload
                set jsonModel.extNoUpload = true
            _ ctx.__current.models.push
                @ jsonModel
            set ctx.__current = jsonModel
            _ setTags
                @ model
                @ jsonModel
            _md_gen_items( fields, indent
                _md_gen_items( blockAttributes, indent
                    _ setJSON_KnownModelAttributes  
                        @ jsonModel     
                    if jsonModel.indexes.length > 0
                        foreach index in jsonModel.indexes 
                            var newFields = []
                            var foreignCount = 0
                            foreach field in index.fields
                                var ffim
                                    _ getForeignFieldInModel
                                        @ jsonModel
                                        @ field
                                if ffim
                                    _ newFields.push
                                        {
                                            @ name field
                                            @ foreign ffim
                                    set foreignCount++
                                else
                                    _ newFields.push
                                        {
                                            @ name field
                            set index.fields = newFields
                            set index.foreignFields = foreignCount
                        _ ctx.__json.indexes.push
                            {
                                @ model jsonModel.Name
                                @ indexes jsonModel.indexes
                                
                    set ctx.__current = saveCurrent
                    r_cb()

        async-md( config )
            var json
                {
                    @ name model.wzName
                    @ value 
                        _ verify.unquote
                            _ model.valueAssign.getValueString
            _ ctx.__current.configs.push
                @ json
            r_cb()

        async-md( field )
            var saveCurrent = ctx.__current
            var jsonField
                {
                    @ name model.wzName
                    @ type model.getType()
                    @ optional model.optional
                    @ typeExtensions model.getTypeExtensions()
                    @ editFormat model.getEditFormat()
                    [ attributes
                    [ constraints
                    [ dbColumns
                    [ tags
            if model.idRelated
                set jsonField.isRelated = true
                set jsonField.idRelated = true
                set jsonField.relatedModel = model.relatedModel
                set jsonField.relationName = model.relationName
                set jsonField.relationCardinality = model.relationCardinality
                set jsonField.relationTarget = model.relationTarget
                set jsonField.referenceTwinObject = model.referenceTwinObject
                if verify.isNotEmpty(model.relationName)
                    var inversedByField
                        _ get_FieldInversedBy_ByRelationName(model, model.relationName)
                    if inversedByField
                        set jsonField.inversedBy = inversedByField.wzName
                    else
                        throw new Error("In field " + model.wzName + ' cannot find inversedBy for relationName: ' + model.relationName)
            elif verify.isNotEmpty(model.relationCardinality)
                set jsonField.isRelated = true
                set jsonField.objectRelated = true
                set jsonField.relationCardinality = model.relationCardinality
                set jsonField.relationTarget = model.relationTarget
            _ ctx.__current.fields.push
                @ jsonField
            _ setTags
                @ model
                @ jsonField
            set ctx.__current = jsonField
            _md_gen_items( fieldAttributes
                foreach fc in model.fieldConstraints
                    var c
                        {
                            @ type fc.wzElement 
                    _ fc.setField
                        @ c
                    _ ctx.__current.constraints.push
                        @ c
                    _ fc.setField
                        @ ctx.__current
                foreach fdbc in model.dbColumns
                    var dbc
                        {
                            @ type fdbc.wzElement
                    _ fdbc.setField
                        @ dbc
                    _ ctx.__current.dbColumns.push
                        @ dbc
                    _ fdbc.setField
                        @ ctx.__current
                _ setJSON_KnownFieldTypes
                    @ jsonField
                if jsonField.relation && verify.isNotEmpty(jsonField.relation.name)
                    var mappedBy
                        _ get_FieldInversedBy_ByRelationName(model, jsonField.relation.name)
                    if mappedBy
                        set jsonField.mappedBy = mappedBy.wzName
                    else
                        throw new Error("In field " + model.wzName + ' cannot find inversedBy for relationName: ' + jsonField.relation.name)
                set ctx.__current = saveCurrent
                r_cb()
        
        async-md( fieldAttribute )
        	var nv 
                _ lineParser.parseNameValueRaw
                    @ model.wzName
                    @ model
            var name = nv.name()
            var value = nv.value()
            if functionAttributes.indexOf(name) > - 1
                $$ _ ctx.write('(')
            if model.valueAssigns.length > 0
                var json 
                    {
                        @ type "@" + (functionAttributes.indexOf(name) > - 1 ? 'function' : '')
                        @ name name
                        @ value null
                        [ args
                foreach item in model.valueAssigns
                    var arg = {}
                    if item.setJSON 
                        _ item.setJSON
                            @ arg
                        _ json.args.push
                            @ arg
                    else
                        _ json.args.push
                            _ verify.unquote
                                _ item.getValueString
                    $*
                    _ json.args.push
                        _ verify.unquote
                            _ item.getValueString
                    *$
                _ ctx.__current.attributes.push
                    @ json
            else
                _ ctx.__current.attributes.push
                    {
                        @ type "@"
                        @ name name
                        @ value verify.isNotEmpty(value) ? value : null
                        [ args
            if functionAttributes.indexOf(name) > - 1
                $$ _ ctx.write(')')
            r_cb()

        async-md( fieldConstraint )
            var c
                {
                    @ type fieldConstraint.wzElement
            _ fieldConstraint.setField
                @ c
            _ ctx.__current.constraints.push
                @ c
            _ fieldConstraint.setField
                @ ctx.__current
            r_cb()

        async-md( blockAttribute )
            var json 
                {
                    @ type "@@" + model.wzName
                    @ name
                        _ verify.unquote
                            @ model.name
                    [ args
            foreach item in model.valueAssigns
                _ item.setJSON
                    @ json.args
                $*
                _ json.args.push
                    @ arg
                _ verify.unquote
                    _ item.getValueString
                *$
            _ ctx.__current.attributes.push
                @ json
            if model.wzName == 'unique'
                _ ctx.__current.indexes.push
                    {
                        @ name json.name
                        @ fields json.args
            r_cb()

    function get_FieldInversedBy_ByRelationName
        param field
        param relationName
        foreach model in field.wzParent.wzParent.models
            if model.wzName != field.wzParent.wzName
                foreach cfield in model.fields
                    
                    foreach fieldAttribute in cfield.fieldAttributes
                        if fieldAttribute.wzName == 'relation'
                            # loog "get_FieldInversedBy_ByRelationName", cfield.wzName
                            var args = []
                            foreach item in fieldAttribute.valueAssigns
                                var arg = {}
                                if item.setJSON 
                                    _ item.setJSON
                                        @ arg
                                    _ args.push
                                        @ arg
                                    # loog "get_FieldInversedBy_ByRelationName.arg", arg
                                else
                                    _ args.push
                                        _ verify.unquote
                                            _ item.getValueString
                            foreach arg in args
                                for var k in arg
                                    # loog "get_FieldInversedBy_ByRelationName.k, arg[k]", k, arg[k]
                                    if k == 'name' && arg[k] == relationName
                                        return cfield
        return null

    function setJSON_KnownFieldTypes
        param jsonField
        if jsonField.name == 'xrequired' || jsonField.name == 'pattern'
            # loog 'setJSON_KnownFieldTypes', jsonField.attributes.length, jsonField.attributes[0]
        if jsonField.attributes.length > 0 
            \b && jsonField.attributes[0].type == "@function"
            \b && jsonField.attributes[0].name == "relation"
            set jsonField.isRelated = true
            set jsonField.objectRelated = true
            var value
                {
                    @ model jsonField.type
            foreach arg in jsonField.attributes[0].args
                # loog 'setJSON_KnownFieldTypes.arg', arg
                for var k in arg
                    set value[k] = arg[k]
            set jsonField.relation = value

        if jsonField.attributes.length > 0 
            \b && jsonField.attributes[0].type == "@"
            \b && jsonField.attributes[0].name == "id"
            set jsonField.isId = true

        if jsonField.attributes.length > 0 
            \b && jsonField.attributes[0].type == "@"
            \b && jsonField.attributes[0].name == "unique"
            set jsonField.isUnique = true

        if jsonField.attributes.length > 0 
            \b && jsonField.attributes[0].type == "@function"
            \b && jsonField.attributes[0].name == "default"
            if jsonField.attributes[0].args[0]
                if verify.isNotEmpty(jsonField.attributes[0].args[0].name)
                    _ jsonField.constraints.push
                        {
                            @ type "defaultValue"
                            @ defaultValue jsonField.attributes[0].args[0].name
                elif verify.isNotEmpty(jsonField.attributes[0].args[0])
                    _ jsonField.constraints.push
                        {
                            @ type "defaultValue"
                            @ defaultValue getTypedValue(jsonField.type, jsonField.attributes[0].args[0])
                else
                    error 'jsonField.attributes[0].args', jsonField.attributes[0].args
                    throw new Error("Missing name attribute on default of field " + jsonField.name)
            else
                error 'jsonField.attributes[0].args', jsonField.attributes[0].args
                throw new Error("Missing name attribute on default of field " + jsonField.name)
            # loog 'jsonField.constraints', jsonField.name, jsonField.constraints

    function setJSON_KnownModelAttributes
        param model
        foreach a in model.attributes
            if a.type == "@@unique"
                set model.hasUniqueIndex = true

    function setRelations
        param models
        foreach model in models
            foreach field in model.fields
                $$ if field.isRelated
                if field.objectRelated
                    # the field is a many-to-one Object Field (model reference)
                    _ setOneToManyOrToOneRelation
                        @ models
                        @ model
                        @ field

    function setTags
        param model
        param json
        foreach tag in model.tags
        	var nv 
                _ lineParser.parseNameValueRaw
                    @ tag.wzName
                    @ tag
            var name = nv.name()
            var value = nv.value()
            _ json.tags.push
                {
                    @ name name
                    @ value value

    function setOneToManyOrToOneRelation
        param models
        param manyOrOneModel
        param manyOrOneField
        # the manyOrOneField.type is set in
        # .
        # .   .field
        # .   .   .ref <model.Name>
        foreach model in models
            if model.Name == manyOrOneField.type
                _ model.relations.push
                    {
                        @ model manyOrOneField.type
                        { toModel
                            @ Name manyOrOneModel.Name
                            @ name manyOrOneModel.name
                            @ namePlural manyOrOneModel.namePlural
                        @ relationCardinality manyOrOneField.relationCardinality
    
    function getForeignFieldInModel
        param jsonModel
        param fieldName
        foreach field in jsonModel.fields
            if field.idRelated && field.name == fieldName
                return 
                    {
                        @ relatedModel field.relatedModel
                        @ relationCardinality field.relationCardinality
                        @ relationTarget field.relationTarget
                        @ optional field.optional
        return null

    function getTypedValue
        param type
        param value
        if type == "Boolean"
            return value == 'true' ? true : false
        elif type == "Int"
            return parseInt(value)
        elif type == "Float" || type == "Decimal"
            return parseFloat(value)
        else
            return value