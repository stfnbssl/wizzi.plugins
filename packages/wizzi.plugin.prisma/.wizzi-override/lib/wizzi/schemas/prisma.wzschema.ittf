wzschema prisma
    
    export-to json
    
    e comment
        tag #
        r comment/s

    e docComment : comment
        tag ###

    e tag
        r tag/s

    e commentable
        a description
        r comment/s
        r tag/s
    
    e prisma : commentable
        is-root
        r datasource/s
        r generator/s
        r model/s
    
    e fieldType
        is-abstract
        r extension/s
        m getTypeString
            if this.wzElement == 'stringType'
                return 'String'
            $foreach item in ['boolean','int','bigInt','float','decimal','dateTime','json','bytes','unsupported']
                elif this.wzElement == '${item}Type'
                    return '${item[0].toUpperCase() + item.substr(1)}'
            elif this.wzElement == 'refType'
                return this.wzName
            elif this.wzElement == 'listType'
                if this.fieldType
                    return this.fieldType.getTypeString() + '[]'
                else
                    return 'String[]'

    $foreach item in ['string','boolean','int','float','decimal','json','bytes','unsupported','ref']
        e ${item}Type : fieldType
            tag ${item}
    e bigIntType : fieldType
        tag big-int
    e dateTimeType : fieldType
        tag date-time

    e listType : fieldType
        tag [
        r fieldType
            one-to-one

    e valueAssign
        is-abstract
        r valueAssign/s

    e scalarAssign : valueAssign
        tag =
        m getValueString
            return this.wzName

    e pathAssign : valueAssign
        tag =[
        m getValueString
            return this.wzName

    e scalarValue : valueAssign
        tag @
        m getValueString
            return this.wzName

    e param
        is-abstract
    
    e scalaraParam : param
        tag @
        m getValueString
            return this.wzName

    e functionCallAssign : valueAssign
        tag _
        r param/s
        m getValueString
            var ret = [this.wzName + '(']
            var seen = false
            foreach p in this.params
                if seen
                    _ ret.push(', ')
                _ ret.push
                    _ p.getValueString()
                set seen = true
            _ ret.push(')')
            return ret.join('')
        m setJSON
            param parent
            var value
                {
                    @ functionName this.wzName
                    [ args
            foreach p in this.params
                if p.setJSON
                    var value = {}
                    _ p.setJSON
                        @ value
                    _ value.args.push
                        @ arg
                else
                    _ value.args.push
                        _ p.getValueString()
            set parent.function = value

    e array : valueAssign
        tag [
        r valueAssign/s
        m getValueString
            var ret = [this.wzName + '[']
            var seen = false
            foreach p in this.valueAssigns
                if seen
                    _ ret.push(', ')
                _ ret.push
                    _ p.getValueString()
                set seen = true
            _ ret.push(']')
            return ret.join('')
        m setJSON
            param parentArray
            foreach p in this.valueAssigns
                if p.setJSON
                    var value = {}
                    _ p.setJSON
                        @ value
                    _ parentArray.push
                        @ arg
                else
                    _ parentArray.push
                        _ p.getValueString()

    e config : commentable
        r valueAssign
            one-to-one

    e datasource : commentable
        r config/s
    
    e generator : commentable
        r config/s
    
    e model : commentable
        a_tag_flag( extNoUpload, noUpload )
        r field/s
        r blockAttribute/s
        r extension/s


    e field : commentable
        a_tag_flag( optional, optional )
        a_tag_flag( idRelated, id-related )
        a relationCardinality
            tag relation-cardinality
        a relationTarget
            tag relation-target
        a relationName 
            tag relation-name 
        a relatedModel
            tag related-model
        a referenceTwinObject
            tag reference-twin-object
        r fieldType
            one-to-one
        r fieldAttribute/s
        r fieldConstraint/s
        r dbColumn/s
        r fieldEditFormat
            one-to-one
        m wzInitialize        
            foreach c in this.fieldConstraints
                _ c.setField
                    @ this
        m getTypeString
            var opt = this.optional ? '?' : ''
            # loog 'field.getTypeString', this.wzName, this.fieldType, opt 
            if this.fieldType
                return this.fieldType.getTypeString() + opt
            else
                return 'String' + opt
        m getType
            if this.fieldType
                return this.fieldType.getTypeString()
            else
                return 'String'
        m getTypeExtensions
            var items = []
            if this.fieldType
                foreach te in this.fieldType.extensions
                    var nv = verify.parseNameValue(te.wzName, te)
                    _ items.push
                        {
                            @ name nv.name()
                            @ value nv.value()
            return items
        m getEditFormat
            if this.fieldEditFormat
                return this.fieldEditFormat.getFormat()
            else
                return null

    e fieldAttribute : commentable
        tag @
        r valueAssign/s

    e blockAttribute : commentable
        tag @@
        a name
        r valueAssign/s
        m setJSON
            param parent
            var values = []
            if this.array
                _ this.array.setJSON
                    @ values
            set parent.values = values

    e attributeName : valueAssign
        tag name
        m getValueString
            return 'name: "' + this.wzName + '"'
        m setJSON
            param parent
            set parent.name = this.wzName

    e fields : valueAssign
        r array
            one-to-one
        m getValueString
            return 'fields: ' + (this.array && this.array.getValueString())
        m setJSON
            param parent
            var values = []
            if this.array
                _ this.array.setJSON
                    @ values
            set parent.fields = values

    e references : valueAssign
        r array
            one-to-one
        m getValueString
            return 'references: ' + (this.array && this.array.getValueString())
        m setJSON
            param parent
            var values = []
            if this.array
                _ this.array.setJSON
                    @ values
            set parent.references = values

    e strategy : valueAssign
        m getValueString
            return 'strategy: ' + this.wzName
        m setJSON
            param parent
            set parent.strategy = this.wzName
    
    e onDelete : valueAssign
        m getValueString
            return 'onDelete: ' + this.wzName
        m setJSON
            param parent
            set parent.onDelete = this.wzName
    
    e onUpdate : valueAssign
        m getValueString
            return 'onUpdate: ' + this.wzName
        m setJSON
            param parent
            set parent.onUpdate = this.wzName
  
    # 
    # Extension
    #
    # This is a generic extension of Prisma schema
    #

    e extension : commentable
        tag ext

    # 
    # Constraints
    #
    # This is an extension of Prisma schema
    #

    e fieldConstraint : commentable
        is-abstract
    $* Via! Strapy uses @default(...value...)
    e defaultValue : fieldConstraint
        tag default
        m setField
            param field
            set field.default = this.wzName
    *$
    e min : fieldConstraint
        m setField
            param field
            set field.min = parseInt(this.wzName)
    e max : fieldConstraint 
        m setField
            param field
            set field.max = parseInt(this.wzName)
    e minLength : fieldConstraint
        tag min-length
        m setField
            param field
            set field.minLength = this.wzName
    e maxLength : fieldConstraint 
        tag max-length
        m setField
            param field
            set field.maxLength = this.wzName
    e regExp : fieldConstraint 
        tag reg-exp|pattern
        m setField
            param field
            set field.regExp = this.wzName
    e enum : fieldConstraint 
        r enumValue/s
        m wzInitialize        
            set this.values = []
            foreach v in this.enumValues
                _ this.values.push
                    @ v.wzName
        m setField
            param field
            set field.enum = this.values
    e enumValue
        tag value

    # 
    # dbColumn
    #
    # This is an extension of Prisma schema
    #

    e dbColumn : commentable
        is-abstract
    e dbColumnDefaultTo : dbColumn
        tag db-default-to
        m setField
            param field
            set field.dbDefaultTo = this.wzName
    e dbColumnName : dbColumn
        tag db-name
        m setField
            param field
            set field.dbName = this.wzName
    e dbColumnNotNullable : dbColumn
        tag db-not-nullable
        m setField
            param field
            set field.dbNotNullable = this.wzName == 'true' ? true : false
    e dbColumnUnsigned : dbColumn
        tag db-unsigned
        m setField
            param field
            set field.dbUnsigned = this.wzName == 'true' ? true : false
    e dbColumnUnique : dbColumn
        tag db-unique
        m setField
            param field
            set field.dbUnique = this.wzName == 'true' ? true : false
    e dbColumnType : dbColumn
        tag db-type
        m setField
            param field
            set field.dbType = this.wzName
    e dbColumnArgs : dbColumn
        tag db-args
        m setField
            param field
            set field.dbArgs = this.wzName

    # 
    # Field edit formats (default field edit formats)
    #
    # This is an extension of Prisma schema
    #

    e fieldEditFormat : commentable
        is-abstract

    e checkboxFormat : fieldEditFormat
        tag checkbox-format
        m getFormat        
            return
                {
                    @ name 'Checkbox'
    
    e radioFormat : fieldEditFormat
        tag radio-format
        m getFormat        
            return
                {
                    @ name 'Radio'
    
    e colorFormat : fieldEditFormat
        tag color-format
        m getFormat        
            return
                {
                    @ name 'Color'

    e selectFormat : fieldEditFormat
        tag select-format
        m getFormat        
            return
                {
                    @ name 'Select'

    e switchFormat : fieldEditFormat
        tag switch-format
        m getFormat        
            return
                {
                    @ name 'Switch'

    e sliderFormat : fieldEditFormat
        tag slider-format
        m getFormat        
            return
                {
                    @ name 'Slider'

    e rateFormat : fieldEditFormat
        tag rate-format
        m getFormat        
            return
                {
                    @ name 'Rate'

    e uploadFormat : fieldEditFormat
        tag upload-format
        m getFormat        
            return
                {
                    @ name 'Upload'
    
    e markdownFormat : fieldEditFormat
        tag markdown-format
        m getFormat        
            return
                {
                    @ name 'Markdown'
