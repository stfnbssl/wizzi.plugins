datasource db {
    provider = "sqlite"
    url = env("DATABASE_URL")
}
generator client {
    provider = "prisma-client-js"
}
model User {
    id String @id @default(cuid())
    email String @unique
    username String @unique
    name String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    image UserImage?
    password Password?
    notes Note[]
    roles Role[]
    sessions Session[]
    connections Connection[]
}
model Note {
    id String @id @default(cuid())
    title String
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ownerId String
    images NoteImage[]
    @@index [ownerId]
    @@index [ownerId, updatedAt]
}
model NoteImage {
    id String @id @default(cuid())
    altText String?
    contentType String
    blob Bytes
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    note Note @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    noteId String
    @@index [noteId]
}
model UserImage {
    id String @id @default(cuid())
    altText String?
    contentType String
    blob Bytes
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}
model Password {
    hash String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}
model Session {
    id String @id @default(cuid())
    expirationDate DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String
    @@index [userId]
}
model Permission {
    id String @id @default(cuid())
    action String
    entity String
    access String
    description String @default ""
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    roles Role[]
    @@unique [action, entity, access]
}
model Role {
    id String @id @default(cuid())
    name String @unique
    description String @default ""
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    users User[]
    permissions Permission[]
}
model Verification {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    type String
    target String
    secret String
    algorithm String
    digits Int
    period Int
    charSet String
    expiresAt DateTime?
    @@unique [target, type]
}
model Connection {
    id String @id @default(cuid())
    providerName String
    providerId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String
    @@unique [providerName, providerId]
}
