module
    kind es6
    $
        var md = {
            plugin: '',
            name: 'document',
            schema: 'ppt',
            checkSchema: true,
            isAsync: true,
        };
    v08/lib/artifacts/gen(&md)
        $append imports
        $append main
            _ md.ppt
                @ model
                @ ctx
                f_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        +
        const noindent
            {
                @ indent false
        +
        function respace
            param text
            set text = verify.replaceAll(text, '&nbsp;', ' ')
            return verify.replaceAll(text, '"', '\\"')
            
        function numOrPerc
            param text
            if text[text.length-1] == '%'
                return '"' + text + '"'
            else
                return text

        +
        async-md( ppt )
            # log "ctx.keys", Object.keys(ctx)
            # log "ctx.values property", ctx.values
            # log 'tag ppt, nodes', model.nodes.length

            set ctx.values.pptStack = []
            set ctx.values.pptCounter = 0
            set ctx.values.pptMainObject = 'ppt_MainObject'
            set ctx.values.mainObjectCreated = false
            
            var pptNode = "ppt_doc_" + (++ctx.values.pptCounter)
            set ctx.values.pptMainInstance = pptNode
            _ ctx.values.pptStack.push
                {
                    @ node pptNode
                    @ arrayName null
            set ctx.values.pptMainInternalObject = pptNode
            
            _ ctx.w('const fs = require("fs");')
            _ ctx.w('const pptx = require("pptxgenjs");')
            _ ctx.w('')
            _ ctx.w('const ' + ctx.values.pptMainInstance + ' = new pptx();')
            _ ctx.w('const ' + ctx.values.pptMainInstance + '_debug = { defaultStyle: {}, styles: {}, slides: [] };')
            _ ctx.w('const defaultStyle = { content: {} };')
            _ ctx.w('const styles = {};')
            _ md.genItems
                @ model.nodes
                @ ctx
                @ noindent
                a_cb()
                    $if wzConfigIsDevelopment
                        _ ctx.w('')
                        _ ctx.w('// Dump for test')
                        _ ctx.w('    fs.writeFileSync(__dirname + "/' + model.wzName + '.ppt.json", JSON.stringify(' + ctx.values.pptMainInstance + '_debug, null, "\t"));')
                    _ ctx.w('')
                    _ ctx.w('// Make Ppt')
                    _ ctx.w('')
                    _ ctx.w('var now = new Date();')
                    _ ctx.w('')
                    _ ctx.w(ctx.values.pptMainInstance + '.writeFile(')
                    _ ctx.w('    __dirname + "/' + (model.wzName || 'created') + '.ppt"')
                    _ ctx.w(').then(fileName => {')
                    _ ctx.w('    console.log(`created file: ${fileName}`);')
                    _ ctx.w('    console.log("DONE written", new Date() - now)')
                    _ ctx.w('});')
                    r_cb()

        async-md( comment )
            _ ctx.w('// ' + model.wzName)
            r_cb()
        +
        async-md( slide )
            var master = verify.isEmpty(model.wzName) == false ? '"' + model.wzName + '"' : ''
            # log 'tag slide, master', master

            
            var pptParent = ctx.values.pptStack[ctx.values.pptStack.length-1]
            var pptNode = "ppt_slide_" + (++ctx.values.pptCounter)
            _ ctx.values.pptStack.push
                {
                    @ node pptNode
                    @ arrayName null
            _ ctx.w('const ' + pptNode + ' = ' + ctx.values.pptMainInstance + '.addSlide(' + master + ');')
            _ ctx.w('const ' + pptNode + '_debug = { items: [] };')
            _ md.genItems
                @ model.nodes
                @ ctx
                @ noindent
                a_cb()
                    _ ctx.w(ctx.values.pptMainInstance + '_debug.slides.push(' + pptNode + '_debug);')
                    _ ctx.values.pptStack.pop()
                    r_cb()
        +
        objectNode.js( number )
            $append close
                _ ctx.w(pptParent + '.number = ' + pptNode + ';')

        objectNode.js( p, true )   
            _ ctx.w('const ' + pptNode + '_text = "' + respace(model.wzName) + '";')
            $append close
                if model.wzParent.wzElement == 'slide'
                    _ ctx.w(pptNode + '.isTextBox = true;')
                    _ ctx.w(pptParent + '.addText(' + pptNode + '_text, ' + pptNode + ');')
                elif model.wzParent.wzElement == 'pStack'
                    _ ctx.w(pptParent + '_items.push({ text: ' + pptNode + '_text, options: ' + pptNode + ' });')
                else
                    _ ctx.w(pptParent + '.content = { text: ' + pptNode + '_text, options: ' + pptNode + ' };')
                $if wzConfigIsDevelopment
                    if model.wzParent.wzElement == 'slide'
                        _ ctx.w(pptParent + '_debug.items.push({ text: ' + pptNode + '_text, options: ' + pptNode + ' });')

        arrayNode.js( pStack ) 
            _ ctx.w('const ' + pptNode + '_items = [];')
            $append close
                if model.wzParent.wzElement == 'slide'
                    _ ctx.w(pptNode + '.isTextBox = true;')
                    _ ctx.w(pptParent + '.addText(' + pptNode + '_items, ' + pptNode + ');')
                else
                    _ ctx.w(pptParent + '.content = { text: ' + pptNode + '_items, options: ' + pptNode + ' };')
                $if wzConfigIsDevelopment
                    if model.wzParent.wzElement == 'slide'
                        _ ctx.w(pptParent + '_debug.items.push({ pStack: ' + pptNode + '_items, options: ' + pptNode + ' });')


        objectNode.js( image )
            if verify.isEmpty(model.wzName) == false
                _ ctx.w(pptNode + '.path = "' + model.wzName + '";')
            $append close
                if model.wzParent.wzElement == 'slide'
                    _ ctx.w(pptParent + '.addImage(' + pptNode + ');')
                else
                    throw new Error("Image not child of slide not managed")
                $if wzConfigIsDevelopment
                    if model.wzParent.wzElement == 'slide'
                        _ ctx.w(pptParent + '_debug.items.push({ image: ' + pptNode + ' });')

        objectNode.js( shape )
            $append close
                if model.wzParent.wzElement == 'slide'
                    _ ctx.w(pptParent + '.addShape(' + ctx.values.pptMainInstance + '.shapes.' + model.wzName + ', ' + pptNode + ');')
                else
                    throw new Error("Image not child of slide not managed")
                $if wzConfigIsDevelopment
                    if model.wzParent.wzElement == 'slide'
                        _ ctx.w(pptParent + '_debug.items.push({ shape_' + model.wzName + ': ' + pptNode + ' });')

        objectNode.js( link )
            $append close
                _ ctx.w(pptParent + '.hyperlink = ' + pptNode + ';')

        objectNode.js( border )
            $append close
                _ ctx.w(pptParent + '.border = ' + pptNode + ';')

        objectNode.js( fill )
            $append close
                _ ctx.w(pptParent + '.fill = ' + pptNode + ';')

        objectNode.js( bulletObj )
            $append close
                _ ctx.w(pptParent + '.bullet = ' + pptNode + ';')

        $foreach item in ['top','right','bottom','left']
            objectNode.js( ${item} )
                $append close
                    if model.wzName == 'null'
                        _ ctx.w(pptParent + '.${item} = null;')
                    else
                        _ ctx.w(pptParent + '.${item} = ' + pptNode + ';')

        objectNode.js( sizing )
            $append close
                _ ctx.w(pptParent + '.sizing = ' + pptNode + ';')

        objectNode.js( line )
            $append close
                _ ctx.w(pptParent + '.line = ' + pptNode + ';')

        objectNode.js( shadow )
            $append close
                _ ctx.w(pptParent + '.shadow = ' + pptNode + ';')

        async-md( imageDef )
            if ctx.values.mainObjectCreated == false
                _ ctx.w('const ' + ctx.values.pptMainObject + ' = new ppt.Document(' + ctx.values.pptMainInternalObject + ');')
                set ctx.values.mainObjectCreated = true
            _ ctx.w('const ' + model.wzName + ' = ppt.Media.addImage(')
            # _ ctx.w('  ' + ctx.values.pptMainObject + ', 300, 300,')
            _ ctx.w('  ' + ctx.values.pptMainObject + ',')
            _ ctx.w('  fs.readFileSync("' + verify.replaceAll(model.src, '\\', '\\\\') + '")')
            _ ctx.w(');')
            r_cb()

        async-md( imageRef )
            var pptParent = ctx.values.pptStack[ctx.values.pptStack.length-1]
            _ ctx.w(pptParent + '.children.push(' + model.wzName + ');')
            r_cb()

        +
        headings( 1 )
        headings( 2 )
        headings( 3 )
        headings( 4 )
        headings( 5 )
        headings( 6 )

        textNode.js( text )
        
        textNode.js( bold )
            _ ctx.w(pptNode + '.bold = true;')
        textNode.js( italic ) 
            _ ctx.w(pptNode + '.italic = true;')
        textNode.js( underline ) 
            _ ctx.w(pptNode + '.underline = true;')
        
        async-md( style )
            var pptParent = ctx.values.pptStack[ctx.values.pptStack.length-1].node
            _ ctx.w(pptParent + ' = Object.assign({},' + pptParent + ', (styles["' + model.wzName + '"] || {}));')
            r_cb()

        nodeProperty.js( before, before )
        nodeProperty.js( after, after )
        nodeProperty.js( space, space )
        nodeProperty.js( margin, margin, array )
        nodeProperty.js( columnGap, columnGap )
        nodeProperty.js( x, x, num|perc )
        nodeProperty.js( y, y, num|perc )
        nodeProperty.js( pt, pt )
        nodeProperty.js( pageOrientation, pageOrientation, string )
        nodeProperty.js( pageSize, pageSize, string )
        nodeProperty.js( pageMargins, pageMargins, array )
        nodeProperty.js( boldProp, bold, true )
        nodeProperty.js( italicProp, italic, true )
        nodeProperty.js( underlineProp, underline, true )
        nodeProperty.js( font, fontFace, string )
        nodeProperty.js( xbreak, breakLine, true )
        nodeProperty.js( xname, name, string )
        nodeProperty.js( href, url, string )
        nodeProperty.js( background, bkgd, string )
        nodeProperty.js( alignment, align, string )
        nodeProperty.js( valignment, valign, string )
        nodeProperty.js( charSpace, characterSpace, string )
        nodeProperty.js( charCode, characterCode, string )
        nodeProperty.js( slideHref, slide, string )
        
        $foreach item in ['width','height','fontSize','size','indent','indentLevel','rotate','rounding','colspan',
            \ 'rowspan','opacity','blur','angle','offset']
            nodeProperty.js( ${item}, ${item} )
        # nodeProperty.js( fontSize, fontSize )
        # ...

        $foreach item in ['noWrap','subScript','smallCaps','emphasisMark','strike',
            \ 'doubleStrike','superScript','allCaps','bullet','flipH','flipV']
            nodeProperty.js( ${item}, ${item}, true )
        # nodeProperty.js( noWrap, noWrap, true )
        # ...

        $foreach item in ['bkgd','color','highlight','value','layout','align','valign',
            \ 'path','characterCode','characterSpace','dashType','beginArrowType',
            \ 'endArrowType','code']
            nodeProperty.js( ${item}, ${item}, string )
        # nodeProperty.js( bkgd, bkgd, string )
        # ...
        
        nodePropertyChoice.js( xtype)
            if model.wzParent.wzElement == 'xxx'
                _ ctx.w(pptParent + '.type = ppt.Xxx.' + model.wzName + ';')
            else
                _ ctx.w(pptParent + '.type = "' + model.wzName + '";')
        
        nodePropertyChoice.js( w )
            if model.wzParent.wzElement == 'colW'
                _ ctx.w(pptParent + '.push(' + numOrPerc(model.wzName) + ');')
            else
                _ ctx.w(pptParent + '.w =' +  numOrPerc(model.wzName) + ';')

        nodePropertyChoice.js( h )
            if model.wzParent.wzElement == 'rowH'
                _ ctx.w(pptParent + '.push(' + numOrPerc(model.wzName) + ');')
            else
                _ ctx.w(pptParent + '.h =' +  numOrPerc(model.wzName) + ';')

        nodePropertyChoice.js( title )
            if model.wzParent.wzElement == 'link'
                _ ctx.w(pptParent + '.tooltip = "' + model.wzName + '";')
            else
                _ ctx.w(pptParent + '.type = "' + model.wzName + '";')

        +
        async-md( shading )

            pptNode.js( shd )
            _ ctx.w('const ' + pptNode + ' = {};')
        
            _ md.genItems
                @ model.nodes
                @ ctx
                @ noindent
                a_cb()
                    _ ctx.w(pptParent + '.shading = ' + pptNode + ';')
                    _ ctx.values.pptStack.pop()
                    r_cb()

        objectNode.js( table )
            _ ctx.w(pptNode + '_rows = [];')
            $append close
                _ ctx.w(pptParent + '.addTable(' + pptNode + '_rows, ' + pptNode + ');')
                $if wzConfigIsDevelopment
                    _ ctx.w(pptParent + '_debug.items.push({ table: ' + pptNode + '_rows, options: ' + pptNode + ' });')

        arrayNode.js( tr )   
            $append close
                _ ctx.w(pptParent + '_rows.push(' + pptNode + ');')

        objectNode.js( td )
            $append close
                _ ctx.w(pptParent + '.push(' + pptNode + '.content);')

        objectNode.js( underline )   
            $append close
                _ ctx.w(pptNode + '.underline = ' + pptNode + ';')

        objectNode.js( styles )
            $append close
                _ ctx.w(pptParent + '.styles = ' + pptNode + ';')

        objectNode.js( xdefault )
            $append close
                _ ctx.w(pptParent + '.default = ' + pptNode + ';')

        objectNode.js( styleDef )
            $append close
                _ ctx.w('styles["' + model.wzName + '"] = ' + pptNode + ';')
                $if wzConfigIsDevelopment
                    _ ctx.w(ctx.values.pptMainInstance + '_debug.styles["' + model.wzName + '"] = ' + pptNode + ';')

        objectNode.js( defaultStyleDef )
            $append close
                _ ctx.w('defaultStyle.content = ' + pptNode + ';')
                $if wzConfigIsDevelopment
                    _ ctx.w(ctx.values.pptMainInstance + '_debug.defaultStyle = ' + pptNode + ';')

        objectNode.js( spacing )
            $append close
                _ ctx.w(pptParent + '.spacing = ' + pptNode + ';')

        objectNode.js( border )
            $append close
                _ ctx.w(pptParent + '.border = ' + pptNode + ';')


        # see nodePropertyChoice.js( w ... h )
        $foreach item in ['colW','rowH']
            arrayNode.js( ${item} )
                $append close
                    _ ctx.w(pptParent + '.${item} = ' + pptNode + ';')

        objectNode.js( ul )
            _ ctx.w(pptNode + '.ul = [];')
            $append close
                _ ctx.w(pptParent + '["' + pptParentArrayName + '"].push(' + pptNode + ');')

        objectNode.js( ol )
            _ ctx.w(pptNode + '.ul = [];')
            $append close
                _ ctx.w(pptParent + '["' + pptParentArrayName + '"].push(' + pptNode + ');')

        objectNode.js( li )
            _ ctx.w(pptNode + '.text = [];')
            $append close
                _ ctx.w(pptParent + '.children.push(' + pptNode + 'Obj);')
                _ ctx.w(pptParent + '["' + pptParentArrayName + '"].push(' + pptNode + ');')                
