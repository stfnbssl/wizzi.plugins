module
    kind es6
    $
        var md = {
            name: 'ppt',
            bif: 1
        };
    wizziplugin/examples/plugin( &md )
        $append plugins
            [ items
                @ './wizzi.plugin.ppt/index.js'
                @ './wizzi.plugin.json/index.js'
            @ pluginsBaseFolder "C:/My/wizzi/stfnbssl/wizzi.plugins/packages"
        +
        let arg = process.argv[2]
        const moduleName = arg && arg.length > 0 ? arg : 'first'
        _ getWzCtx
            _ path.resolve
                @ __dirname
                @ '..'
                @ '.wizzi-override'
                @ 'models'
            a_cb_no_throw( wzCtx )
                if err
                    error err
                    return
                _ executeGenerateModules
                    [
                        @ moduleName
                    a_cb_no_throw( result )
                        if err
                            error 'ppt.examples.executeGenerateModules.err', err
                            error 'ppt.examples.executeGenerateModules.err.toString()', err.toString()
                            if err.inner
                                error 'ppt.examples.executeGenerateModules.err.inner.toString()', err.inner.toString()
                        else
        function executeGenerateModules
            param modules
            param callback
            _ async.mapSeries
                @ modules
                =>
                    param module
                    param callback
                    var ittfDocumentUri
                        _ path.join
                            @ __dirname
                            @ 'ittf'
                            @ module + '.ppt.ittf'
                    var outputLoadedPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ module + '.ppt.json'
                    var outputExtendedPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ module + '.ppt.extended.json'
                    _ loadWizziModel
                        @ ittfDocumentUri
                        {
                        a_cb( model )
                            if model.toJson && verify.isFunction(model.toJson)
                                _ file.write
                                    @ outputLoadedPath
                                    _ stringify
                                        @ model.toJson()
                                        @ null
                                        @ 4
                            _ loadModelAndTransform
                                @ ittfDocumentUri
                                {
                                @ "ppt/extended"
                                a_cb( model )
                                    _ file.write
                                        @ outputExtendedPath
                                        _ stringify
                                            @ model
                                            @ null
                                            @ 4
                                    r_cb( )
                @ callback

