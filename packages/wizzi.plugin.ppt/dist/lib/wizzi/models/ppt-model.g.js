/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi\node_modules\wizzi-legacy-v5\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\stfnbssl\wizzi\node_modules\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Wed, 17 Mar 2021 09:59:13 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
var _md = module.exports = {};
var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var pptBase = (function () {
    function pptBase(name, sourceLineInfo) {
        _classCallCheck(this, pptBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    pptBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    pptBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    pptBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
            }, true);
    }
    pptBase.prototype.wzVerify = function() {
    }
    pptBase.prototype.wzInitialize = function() {
    }
    pptBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    pptBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    pptBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    pptBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    pptBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    pptBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    pptBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    pptBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    pptBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    pptBase.prototype.error = function(message, node) {
        throw new _md.pptModelException(message, node, this);
    }
    return pptBase;
})();

_md.pptBase = pptBase;
// element node
var node = (function (pptBase) {
    _inherits(node, pptBase);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
        // relation node
        this.nodes = [];
    }
    node.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    node.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    node.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.nodes);
        }
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.text, this.nodes);
        }
        if (name === 'b') {
            return this.wzLoadToChildColl(child, _md.bold, this.nodes);
        }
        if (name === 'h') {
            return this.wzLoadToChildColl(child, _md.h, this.nodes);
        }
        if (name === 'i') {
            return this.wzLoadToChildColl(child, _md.italic, this.nodes);
        }
        if (name === 'p') {
            return this.wzLoadToChildColl(child, _md.p, this.nodes);
        }
        if (name === 'u') {
            return this.wzLoadToChildColl(child, _md.underline, this.nodes);
        }
        if (name === 'w') {
            return this.wzLoadToChildColl(child, _md.w, this.nodes);
        }
        if (name === 'x') {
            return this.wzLoadToChildColl(child, _md.x, this.nodes);
        }
        if (name === 'y') {
            return this.wzLoadToChildColl(child, _md.y, this.nodes);
        }
        if (name === 'br') {
            return this.wzLoadToChildColl(child, _md.xbreak, this.nodes);
        }
        if (name === 'h1') {
            return this.wzLoadToChildColl(child, _md.h1, this.nodes);
        }
        else if (name === 'h2') {
            return this.wzLoadToChildColl(child, _md.h2, this.nodes);
        }
        if (name === 'ol') {
            return this.wzLoadToChildColl(child, _md.ol, this.nodes);
        }
        if (name === 'pt') {
            return this.wzLoadToChildColl(child, _md.pt, this.nodes);
        }
        if (name === 'tr') {
            return this.wzLoadToChildColl(child, _md.tr, this.nodes);
        }
        else if (name === 'td') {
            return this.wzLoadToChildColl(child, _md.td, this.nodes);
        }
        if (name === 'ul') {
            return this.wzLoadToChildColl(child, _md.ul, this.nodes);
        }
        if (name === 'ppt') {
            return this.wzLoadToChildColl(child, _md.ppt, this.nodes);
        }
        if (name === 'top') {
            return this.wzLoadToChildColl(child, _md.top, this.nodes);
        }
        if (name === 'bold') {
            return this.wzLoadToChildColl(child, _md.boldProp, this.nodes);
        }
        else if (name === 'bkgd') {
            return this.wzLoadToChildColl(child, _md.bkgd, this.nodes);
        }
        else if (name === 'blur') {
            return this.wzLoadToChildColl(child, _md.blur, this.nodes);
        }
        if (name === 'colw') {
            return this.wzLoadToChildColl(child, _md.colW, this.nodes);
        }
        else if (name === 'code') {
            return this.wzLoadToChildColl(child, _md.code, this.nodes);
        }
        if (name === 'fill') {
            return this.wzLoadToChildColl(child, _md.fill, this.nodes);
        }
        else if (name === 'font') {
            return this.wzLoadToChildColl(child, _md.font, this.nodes);
        }
        else if (name === 'fill') {
            return this.wzLoadToChildColl(child, _md.fill, this.nodes);
        }
        if (name === 'href') {
            return this.wzLoadToChildColl(child, _md.href, this.nodes);
        }
        if (name === 'link') {
            return this.wzLoadToChildColl(child, _md.link, this.nodes);
        }
        else if (name === 'left') {
            return this.wzLoadToChildColl(child, _md.left, this.nodes);
        }
        else if (name === 'line') {
            return this.wzLoadToChildColl(child, _md.line, this.nodes);
        }
        if (name === 'node') {
            return this.wzLoadToChildColl(child, _md.node, this.nodes);
        }
        else if (name === 'name') {
            return this.wzLoadToChildColl(child, _md.xname, this.nodes);
        }
        if (name === 'path') {
            return this.wzLoadToChildColl(child, _md.path, this.nodes);
        }
        if (name === 'rowh') {
            return this.wzLoadToChildColl(child, _md.rowH, this.nodes);
        }
        if (name === 'size') {
            return this.wzLoadToChildColl(child, _md.size, this.nodes);
        }
        if (name === 'type') {
            return this.wzLoadToChildColl(child, _md.xtype, this.nodes);
        }
        if (name === 'align') {
            return this.wzLoadToChildColl(child, _md.align, this.nodes);
        }
        else if (name === 'angle') {
            return this.wzLoadToChildColl(child, _md.angle, this.nodes);
        }
        if (name === 'col-w') {
            return this.wzLoadToChildColl(child, _md.colW, this.nodes);
        }
        else if (name === 'color') {
            return this.wzLoadToChildColl(child, _md.color, this.nodes);
        }
        if (name === 'fliph') {
            return this.wzLoadToChildColl(child, _md.flipH, this.nodes);
        }
        else if (name === 'flipv') {
            return this.wzLoadToChildColl(child, _md.flipV, this.nodes);
        }
        if (name === 'image') {
            return this.wzLoadToChildColl(child, _md.image, this.nodes);
        }
        if (name === 'row-h') {
            return this.wzLoadToChildColl(child, _md.rowH, this.nodes);
        }
        else if (name === 'right') {
            return this.wzLoadToChildColl(child, _md.right, this.nodes);
        }
        if (name === 'slide') {
            return this.wzLoadToChildColl(child, _md.slide, this.nodes);
        }
        else if (name === 'style') {
            return this.wzLoadToChildColl(child, _md.style, this.nodes);
        }
        else if (name === 'shape') {
            return this.wzLoadToChildColl(child, _md.shape, this.nodes);
        }
        if (name === 'title') {
            return this.wzLoadToChildColl(child, _md.title, this.nodes);
        }
        else if (name === 'table') {
            return this.wzLoadToChildColl(child, _md.table, this.nodes);
        }
        if (name === 'width') {
            return this.wzLoadToChildColl(child, _md.width, this.nodes);
        }
        if (name === 'bullet') {
            return this.wzLoadToChildColl(child, _md.bullet, this.nodes);
        }
        else if (name === 'border') {
            return this.wzLoadToChildColl(child, _md.border, this.nodes);
        }
        else if (name === 'bottom') {
            return this.wzLoadToChildColl(child, _md.bottom, this.nodes);
        }
        if (name === 'center') {
            return this.wzLoadToChildColl(child, _md.center, this.nodes);
        }
        if (name === 'height') {
            return this.wzLoadToChildColl(child, _md.height, this.nodes);
        }
        if (name === 'italic') {
            return this.wzLoadToChildColl(child, _md.italicProp, this.nodes);
        }
        else if (name === 'indent') {
            return this.wzLoadToChildColl(child, _md.indent, this.nodes);
        }
        if (name === 'layout') {
            return this.wzLoadToChildColl(child, _md.layout, this.nodes);
        }
        else if (name === 'layout') {
            return this.wzLoadToChildColl(child, _md.layout, this.nodes);
        }
        if (name === 'margin') {
            return this.wzLoadToChildColl(child, _md.margin, this.nodes);
        }
        if (name === 'number') {
            return this.wzLoadToChildColl(child, _md.number, this.nodes);
        }
        else if (name === 'nowrap') {
            return this.wzLoadToChildColl(child, _md.noWrap, this.nodes);
        }
        if (name === 'offset') {
            return this.wzLoadToChildColl(child, _md.offset, this.nodes);
        }
        if (name === 'pstack') {
            return this.wzLoadToChildColl(child, _md.pStack, this.nodes);
        }
        if (name === 'rotate') {
            return this.wzLoadToChildColl(child, _md.rotate, this.nodes);
        }
        else if (name === 'radius') {
            return this.wzLoadToChildColl(child, _md.radius, this.nodes);
        }
        if (name === 'styles') {
            return this.wzLoadToChildColl(child, _md.styles, this.nodes);
        }
        else if (name === 'strike') {
            return this.wzLoadToChildColl(child, _md.strike, this.nodes);
        }
        else if (name === 'sizing') {
            return this.wzLoadToChildColl(child, _md.sizing, this.nodes);
        }
        else if (name === 'shadow') {
            return this.wzLoadToChildColl(child, _md.shadow, this.nodes);
        }
        if (name === 'valign') {
            return this.wzLoadToChildColl(child, _md.valign, this.nodes);
        }
        if (name === 'allcaps') {
            return this.wzLoadToChildColl(child, _md.allCaps, this.nodes);
        }
        if (name === 'colspan') {
            return this.wzLoadToChildColl(child, _md.colspan, this.nodes);
        }
        else if (name === 'columns') {
            return this.wzLoadToChildColl(child, _md.columns, this.nodes);
        }
        if (name === 'no-wrap') {
            return this.wzLoadToChildColl(child, _md.noWrap, this.nodes);
        }
        if (name === 'opacity') {
            return this.wzLoadToChildColl(child, _md.opacity, this.nodes);
        }
        if (name === 'p-stack') {
            return this.wzLoadToChildColl(child, _md.pStack, this.nodes);
        }
        if (name === 'rowspan') {
            return this.wzLoadToChildColl(child, _md.rowspan, this.nodes);
        }
        if (name === 'shading') {
            return this.wzLoadToChildColl(child, _md.shading, this.nodes);
        }
        if (name === 'charcode') {
            return this.wzLoadToChildColl(child, _md.charCode, this.nodes);
        }
        if (name === 'dashtype') {
            return this.wzLoadToChildColl(child, _md.dashType, this.nodes);
        }
        if (name === 'fontsize') {
            return this.wzLoadToChildColl(child, _md.fontSize, this.nodes);
        }
        if (name === 'imagedef') {
            return this.wzLoadToChildColl(child, _md.imageDef, this.nodes);
        }
        else if (name === 'imageref') {
            return this.wzLoadToChildColl(child, _md.imageRef, this.nodes);
        }
        if (name === 'rounding') {
            return this.wzLoadToChildColl(child, _md.rounding, this.nodes);
        }
        if (name === 'styledef') {
            return this.wzLoadToChildColl(child, _md.styleDef, this.nodes);
        }
        if (name === 'alignment') {
            return this.wzLoadToChildColl(child, _md.alignment, this.nodes);
        }
        if (name === 'bulletobj') {
            return this.wzLoadToChildColl(child, _md.bulletObj, this.nodes);
        }
        if (name === 'columngap') {
            return this.wzLoadToChildColl(child, _md.columnGap, this.nodes);
        }
        else if (name === 'char-code') {
            return this.wzLoadToChildColl(child, _md.charCode, this.nodes);
        }
        if (name === 'dash-type') {
            return this.wzLoadToChildColl(child, _md.dashType, this.nodes);
        }
        if (name === 'font-size') {
            return this.wzLoadToChildColl(child, _md.fontSize, this.nodes);
        }
        if (name === 'highlight') {
            return this.wzLoadToChildColl(child, _md.highlight, this.nodes);
        }
        if (name === 'image-def') {
            return this.wzLoadToChildColl(child, _md.imageDef, this.nodes);
        }
        else if (name === 'image-ref') {
            return this.wzLoadToChildColl(child, _md.imageRef, this.nodes);
        }
        if (name === 'layoutdef') {
            return this.wzLoadToChildColl(child, _md.layoutDef, this.nodes);
        }
        if (name === 'slidehref') {
            return this.wzLoadToChildColl(child, _md.slideHref, this.nodes);
        }
        else if (name === 'style-def') {
            return this.wzLoadToChildColl(child, _md.styleDef, this.nodes);
        }
        else if (name === 'subscript') {
            return this.wzLoadToChildColl(child, _md.subScript, this.nodes);
        }
        else if (name === 'smallcaps') {
            return this.wzLoadToChildColl(child, _md.smallCaps, this.nodes);
        }
        else if (name === 'smallcaps') {
            return this.wzLoadToChildColl(child, _md.smallCaps, this.nodes);
        }
        else if (name === 'shapename') {
            return this.wzLoadToChildColl(child, _md.shapeName, this.nodes);
        }
        if (name === 'underline') {
            return this.wzLoadToChildColl(child, _md.underlineProp, this.nodes);
        }
        if (name === 'anglerange') {
            return this.wzLoadToChildColl(child, _md.angleRange, this.nodes);
        }
        if (name === 'background') {
            return this.wzLoadToChildColl(child, _md.background, this.nodes);
        }
        else if (name === 'bullet-obj') {
            return this.wzLoadToChildColl(child, _md.bulletObj, this.nodes);
        }
        if (name === 'column-gap') {
            return this.wzLoadToChildColl(child, _md.columnGap, this.nodes);
        }
        if (name === 'decoration') {
            return this.wzLoadToChildColl(child, _md.decoration, this.nodes);
        }
        if (name === 'layout-def') {
            return this.wzLoadToChildColl(child, _md.layoutDef, this.nodes);
        }
        else if (name === 'lineheight') {
            return this.wzLoadToChildColl(child, _md.lineHeight, this.nodes);
        }
        if (name === 'rectradius') {
            return this.wzLoadToChildColl(child, _md.rectRadius, this.nodes);
        }
        if (name === 'slide-href') {
            return this.wzLoadToChildColl(child, _md.slideHref, this.nodes);
        }
        else if (name === 'shape-name') {
            return this.wzLoadToChildColl(child, _md.shapeName, this.nodes);
        }
        if (name === 'valignment') {
            return this.wzLoadToChildColl(child, _md.valignment, this.nodes);
        }
        if (name === 'angle-range') {
            return this.wzLoadToChildColl(child, _md.angleRange, this.nodes);
        }
        if (name === 'charspacing') {
            return this.wzLoadToChildColl(child, _md.charSpacing, this.nodes);
        }
        if (name === 'indentlevel') {
            return this.wzLoadToChildColl(child, _md.indentLevel, this.nodes);
        }
        if (name === 'line-height') {
            return this.wzLoadToChildColl(child, _md.lineHeight, this.nodes);
        }
        if (name === 'markercolor') {
            return this.wzLoadToChildColl(child, _md.markerColor, this.nodes);
        }
        if (name === 'pagemargins') {
            return this.wzLoadToChildColl(child, _md.pageMargins, this.nodes);
        }
        else if (name === 'placeholder') {
            return this.wzLoadToChildColl(child, _md.placeholder, this.nodes);
        }
        if (name === 'rect-radius') {
            return this.wzLoadToChildColl(child, _md.rectRadius, this.nodes);
        }
        if (name === 'superscript') {
            return this.wzLoadToChildColl(child, _md.superScript, this.nodes);
        }
        if (name === 'char-spacing') {
            return this.wzLoadToChildColl(child, _md.charSpacing, this.nodes);
        }
        if (name === 'doublestrike') {
            return this.wzLoadToChildColl(child, _md.doubleStrike, this.nodes);
        }
        if (name === 'emphasismark') {
            return this.wzLoadToChildColl(child, _md.emphasisMark, this.nodes);
        }
        else if (name === 'endarrowtype') {
            return this.wzLoadToChildColl(child, _md.endArrowType, this.nodes);
        }
        if (name === 'fontfeatures') {
            return this.wzLoadToChildColl(child, _md.fontFeatures, this.nodes);
        }
        if (name === 'indent-level') {
            return this.wzLoadToChildColl(child, _md.indentLevel, this.nodes);
        }
        if (name === 'marker-color') {
            return this.wzLoadToChildColl(child, _md.markerColor, this.nodes);
        }
        if (name === 'page-margins') {
            return this.wzLoadToChildColl(child, _md.pageMargins, this.nodes);
        }
        if (name === 'charactercode') {
            return this.wzLoadToChildColl(child, _md.characterCode, this.nodes);
        }
        if (name === 'font-features') {
            return this.wzLoadToChildColl(child, _md.fontFeatures, this.nodes);
        }
        if (name === 'beginarrowtype') {
            return this.wzLoadToChildColl(child, _md.beginArrowType, this.nodes);
        }
        if (name === 'character-code') {
            return this.wzLoadToChildColl(child, _md.characterCode, this.nodes);
        }
        if (name === 'end-arrow-type') {
            return this.wzLoadToChildColl(child, _md.endArrowType, this.nodes);
        }
        if (name === 'defaultstyledef') {
            return this.wzLoadToChildColl(child, _md.defaultStyleDef, this.nodes);
        }
        else if (name === 'decorationstyle') {
            return this.wzLoadToChildColl(child, _md.decorationStyle, this.nodes);
        }
        if (name === 'begin-arrow-type') {
            return this.wzLoadToChildColl(child, _md.beginArrowType, this.nodes);
        }
        if (name === 'characterspacing') {
            return this.wzLoadToChildColl(child, _md.characterSpacing, this.nodes);
        }
        if (name === 'decoration-style') {
            return this.wzLoadToChildColl(child, _md.decorationStyle, this.nodes);
        }
        if (name === 'arcthicknessratio') {
            return this.wzLoadToChildColl(child, _md.arcThicknessRatio, this.nodes);
        }
        if (name === 'character-spacing') {
            return this.wzLoadToChildColl(child, _md.characterSpacing, this.nodes);
        }
        if (name === 'default-style-def') {
            return this.wzLoadToChildColl(child, _md.defaultStyleDef, this.nodes);
        }
        if (name === 'autopagecharweight') {
            return this.wzLoadToChildColl(child, _md.autoPageCharWeight, this.nodes);
        }
        else if (name === 'autopagelineweight') {
            return this.wzLoadToChildColl(child, _md.autoPageLineWeight, this.nodes);
        }
        if (name === 'arc-thickness-ratio') {
            return this.wzLoadToChildColl(child, _md.arcThicknessRatio, this.nodes);
        }
        if (name === 'auto-page-char-weight') {
            return this.wzLoadToChildColl(child, _md.autoPageCharWeight, this.nodes);
        }
        else if (name === 'auto-page-line-weight') {
            return this.wzLoadToChildColl(child, _md.autoPageLineWeight, this.nodes);
        }
        return false;
    }
    node.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.pptModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        });
    }
    node.prototype.wzVerify = function(ctx) {
        this.nodes.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.pptBase.prototype.wzVerify.call(this, ctx);
    }
    node.prototype.wzInitialize = function(ctx) {
        this.nodes.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.pptBase.prototype.wzInitialize.call(this, ctx);
    }
    return node;
})(pptBase);

_md.node = node;
// element comment
var comment = (function (node) {
    _inherits(comment, node);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    return comment;
})(node);

_md.comment = comment;
// element ppt
var ppt = (function (node) {
    _inherits(ppt, node);
    function ppt(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ppt.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ppt);
        this.wzElement = "ppt";
        this.rtlMode = false;
    }
    ppt.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'title') {
            this.title = child.v; return true;
        }
        if (name === 'author') {
            this.author = child.v; return true;
        }
        if (name === 'company') {
            this.company = child.v; return true;
        }
        if (name === 'subject') {
            this.subject = child.v; return true;
        }
        if (name === 'revision') {
            this.revision = child.v; return true;
        }
        else if (name === 'rtl-mode') {
            this.rtlMode = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'rtl_mode') {
            this.rtlMode = parseboolean(child.v, true, child); return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    ppt.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.pptModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        });
    }
    return ppt;
})(node);

_md.ppt = ppt;
// element shading
var shading = (function (node) {
    _inherits(shading, node);
    function shading(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(shading.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, shading);
        this.wzElement = "shading";
    }
    return shading;
})(node);

_md.shading = shading;
// element highlight
var highlight = (function (node) {
    _inherits(highlight, node);
    function highlight(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(highlight.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, highlight);
        this.wzElement = "highlight";
    }
    return highlight;
})(node);

_md.highlight = highlight;
// element center
var center = (function (node) {
    _inherits(center, node);
    function center(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(center.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, center);
        this.wzElement = "center";
    }
    return center;
})(node);

_md.center = center;
// element xname
var xname = (function (node) {
    _inherits(xname, node);
    function xname(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xname.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xname);
        this.wzElement = "xname";
    }
    return xname;
})(node);

_md.xname = xname;
// element xtype
var xtype = (function (node) {
    _inherits(xtype, node);
    function xtype(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xtype.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xtype);
        this.wzElement = "xtype";
    }
    return xtype;
})(node);

_md.xtype = xtype;
// element width
var width = (function (node) {
    _inherits(width, node);
    function width(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(width.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, width);
        this.wzElement = "width";
    }
    return width;
})(node);

_md.width = width;
// element w
var w = (function (node) {
    _inherits(w, node);
    function w(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(w.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, w);
        this.wzElement = "w";
    }
    return w;
})(node);

_md.w = w;
// element height
var height = (function (node) {
    _inherits(height, node);
    function height(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(height.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, height);
        this.wzElement = "height";
    }
    return height;
})(node);

_md.height = height;
// element h
var h = (function (node) {
    _inherits(h, node);
    function h(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h);
        this.wzElement = "h";
    }
    return h;
})(node);

_md.h = h;
// element fill
var fill = (function (node) {
    _inherits(fill, node);
    function fill(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fill.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fill);
        this.wzElement = "fill";
    }
    return fill;
})(node);

_md.fill = fill;
// element size
var size = (function (node) {
    _inherits(size, node);
    function size(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(size.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, size);
        this.wzElement = "size";
    }
    return size;
})(node);

_md.size = size;
// element x
var x = (function (node) {
    _inherits(x, node);
    function x(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(x.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, x);
        this.wzElement = "x";
    }
    return x;
})(node);

_md.x = x;
// element y
var y = (function (node) {
    _inherits(y, node);
    function y(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(y.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, y);
        this.wzElement = "y";
    }
    return y;
})(node);

_md.y = y;
// element path
var path = (function (node) {
    _inherits(path, node);
    function path(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(path.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, path);
        this.wzElement = "path";
    }
    return path;
})(node);

_md.path = path;
// element slide
var slide = (function (node) {
    _inherits(slide, node);
    function slide(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(slide.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, slide);
        this.wzElement = "slide";
    }
    return slide;
})(node);

_md.slide = slide;
// element number
var number = (function (node) {
    _inherits(number, node);
    function number(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(number.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, number);
        this.wzElement = "number";
    }
    return number;
})(node);

_md.number = number;
// element link
var link = (function (node) {
    _inherits(link, node);
    function link(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(link.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, link);
        this.wzElement = "link";
    }
    return link;
})(node);

_md.link = link;
// element href
var href = (function (node) {
    _inherits(href, node);
    function href(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(href.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, href);
        this.wzElement = "href";
    }
    return href;
})(node);

_md.href = href;
// element slideHref
var slideHref = (function (node) {
    _inherits(slideHref, node);
    function slideHref(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(slideHref.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, slideHref);
        this.wzElement = "slideHref";
    }
    return slideHref;
})(node);

_md.slideHref = slideHref;
// element title
var title = (function (node) {
    _inherits(title, node);
    function title(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(title.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, title);
        this.wzElement = "title";
    }
    return title;
})(node);

_md.title = title;
// element defaultStyleDef
var defaultStyleDef = (function (node) {
    _inherits(defaultStyleDef, node);
    function defaultStyleDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(defaultStyleDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, defaultStyleDef);
        this.wzElement = "defaultStyleDef";
    }
    return defaultStyleDef;
})(node);

_md.defaultStyleDef = defaultStyleDef;
// element styleDef
var styleDef = (function (node) {
    _inherits(styleDef, node);
    function styleDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(styleDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, styleDef);
        this.wzElement = "styleDef";
    }
    return styleDef;
})(node);

_md.styleDef = styleDef;
// element styles
var styles = (function (node) {
    _inherits(styles, node);
    function styles(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(styles.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, styles);
        this.wzElement = "styles";
    }
    return styles;
})(node);

_md.styles = styles;
// element style
var style = (function (node) {
    _inherits(style, node);
    function style(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(style.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, style);
        this.wzElement = "style";
    }
    return style;
})(node);

_md.style = style;
/**
    element layout
     LAYOUT_16x9 (default) : 10 x 5.625 inches
     LAYOUT_16x10          : 10 x 6.25 inches
     LAYOUT_4x3            : 10 x 7.5 inches
     LAYOUT_WIDE           : 13.3 x 7.5 inches
     <custom> see layoutDef
*/
var layout = (function (node) {
    _inherits(layout, node);
    function layout(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(layout.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, layout);
        this.wzElement = "layout";
    }
    return layout;
})(node);

_md.layout = layout;
/**
    element layoutDef
     name (wzName), width, height
*/
var layoutDef = (function (node) {
    _inherits(layoutDef, node);
    function layoutDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(layoutDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, layoutDef);
        this.wzElement = "layoutDef";
    }
    return layoutDef;
})(node);

_md.layoutDef = layoutDef;
/**
    element pageMargins
     [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins
*/
var pageMargins = (function (node) {
    _inherits(pageMargins, node);
    function pageMargins(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pageMargins.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pageMargins);
        this.wzElement = "pageMargins";
    }
    pageMargins.prototype.wzInitialize = function(ctx) {
        var ss = this.wzName.split(/[\s,]+/);
        this.wzName = ss.join(',');
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return pageMargins;
})(node);

_md.pageMargins = pageMargins;
// element margin
var margin = (function (node) {
    _inherits(margin, node);
    function margin(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(margin.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, margin);
        this.wzElement = "margin";
    }
    margin.prototype.wzInitialize = function(ctx) {
        var ss = this.wzName.split(/[\s,]+/);
        if (ss.length == 1) {
            this.wzName = ss[0] + ',' + ss[0] + ',' + ss[0] + ',' + ss[0];
        }
        else if (ss.length == 2) {
            this.wzName = ss[0] + ',' + ss[1] + ',' + ss[0] + ',' + ss[1];
        }
        else if (ss.length == 3) {
            this.wzName = ss[0] + ',' + ss[1] + ',' + ss[2] + ',0';
        }
        else {
            this.wzName = ss[0] + ',' + ss[1] + ',' + ss[2] + ',' + ss[3];
        }
        console.log('margin', this.wzName);
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return margin;
})(node);

_md.margin = margin;
// element table
var table = (function (node) {
    _inherits(table, node);
    function table(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(table.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, table);
        this.wzElement = "table";
    }
    return table;
})(node);

_md.table = table;
// element tr
var tr = (function (node) {
    _inherits(tr, node);
    function tr(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tr.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tr);
        this.wzElement = "tr";
    }
    return tr;
})(node);

_md.tr = tr;
// element td
var td = (function (node) {
    _inherits(td, node);
    function td(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(td.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, td);
        this.wzElement = "td";
    }
    return td;
})(node);

_md.td = td;
/**
    element layout
     noBorders
     headerLineOnly
     lightHorizontalLines
*/
var layout = (function (node) {
    _inherits(layout, node);
    function layout(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(layout.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, layout);
        this.wzElement = "layout";
    }
    return layout;
})(node);

_md.layout = layout;
// element colW
var colW = (function (node) {
    _inherits(colW, node);
    function colW(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(colW.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, colW);
        this.wzElement = "colW";
    }
    return colW;
})(node);

_md.colW = colW;
// element rowH
var rowH = (function (node) {
    _inherits(rowH, node);
    function rowH(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rowH.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rowH);
        this.wzElement = "rowH";
    }
    return rowH;
})(node);

_md.rowH = rowH;
/**
    element autoPageCharWeight
     Auto-paging line weight
     - adjusts how many lines are used before slides wrap
     - range: -1.0 to 1.0
     @see https://gitbrent.github.io/PptxGenJS/docs/api-tables.html
*/
var autoPageCharWeight = (function (node) {
    _inherits(autoPageCharWeight, node);
    function autoPageCharWeight(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(autoPageCharWeight.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, autoPageCharWeight);
        this.wzElement = "autoPageCharWeight";
    }
    return autoPageCharWeight;
})(node);

_md.autoPageCharWeight = autoPageCharWeight;
// element autoPageLineWeight
var autoPageLineWeight = (function (node) {
    _inherits(autoPageLineWeight, node);
    function autoPageLineWeight(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(autoPageLineWeight.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, autoPageLineWeight);
        this.wzElement = "autoPageLineWeight";
    }
    return autoPageLineWeight;
})(node);

_md.autoPageLineWeight = autoPageLineWeight;
// element colspan
var colspan = (function (node) {
    _inherits(colspan, node);
    function colspan(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(colspan.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, colspan);
        this.wzElement = "colspan";
    }
    return colspan;
})(node);

_md.colspan = colspan;
// element rowspan
var rowspan = (function (node) {
    _inherits(rowspan, node);
    function rowspan(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rowspan.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rowspan);
        this.wzElement = "rowspan";
    }
    return rowspan;
})(node);

_md.rowspan = rowspan;
// element columns
var columns = (function (node) {
    _inherits(columns, node);
    function columns(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(columns.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, columns);
        this.wzElement = "columns";
    }
    return columns;
})(node);

_md.columns = columns;
// element columnGap
var columnGap = (function (node) {
    _inherits(columnGap, node);
    function columnGap(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(columnGap.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, columnGap);
        this.wzElement = "columnGap";
    }
    return columnGap;
})(node);

_md.columnGap = columnGap;
// element text
var text = (function (node) {
    _inherits(text, node);
    function text(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(text.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, text);
        this.wzElement = "text";
    }
    return text;
})(node);

_md.text = text;
// element emphasisMark
var emphasisMark = (function (node) {
    _inherits(emphasisMark, node);
    function emphasisMark(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(emphasisMark.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, emphasisMark);
        this.wzElement = "emphasisMark";
    }
    return emphasisMark;
})(node);

_md.emphasisMark = emphasisMark;
// element strike
var strike = (function (node) {
    _inherits(strike, node);
    function strike(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(strike.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, strike);
        this.wzElement = "strike";
    }
    return strike;
})(node);

_md.strike = strike;
// element doubleStrike
var doubleStrike = (function (node) {
    _inherits(doubleStrike, node);
    function doubleStrike(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(doubleStrike.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, doubleStrike);
        this.wzElement = "doubleStrike";
    }
    return doubleStrike;
})(node);

_md.doubleStrike = doubleStrike;
// element superScript
var superScript = (function (node) {
    _inherits(superScript, node);
    function superScript(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(superScript.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, superScript);
        this.wzElement = "superScript";
    }
    return superScript;
})(node);

_md.superScript = superScript;
// element subScript
var subScript = (function (node) {
    _inherits(subScript, node);
    function subScript(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(subScript.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, subScript);
        this.wzElement = "subScript";
    }
    return subScript;
})(node);

_md.subScript = subScript;
// element smallCaps
var smallCaps = (function (node) {
    _inherits(smallCaps, node);
    function smallCaps(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(smallCaps.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, smallCaps);
        this.wzElement = "smallCaps";
    }
    return smallCaps;
})(node);

_md.smallCaps = smallCaps;
// element allCaps
var allCaps = (function (node) {
    _inherits(allCaps, node);
    function allCaps(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(allCaps.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, allCaps);
        this.wzElement = "allCaps";
    }
    return allCaps;
})(node);

_md.allCaps = allCaps;
// element smallCaps
var smallCaps = (function (node) {
    _inherits(smallCaps, node);
    function smallCaps(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(smallCaps.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, smallCaps);
        this.wzElement = "smallCaps";
    }
    return smallCaps;
})(node);

_md.smallCaps = smallCaps;
/**
    element font
     string: name of the font
*/
var font = (function (node) {
    _inherits(font, node);
    function font(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(font.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, font);
        this.wzElement = "font";
    }
    return font;
})(node);

_md.font = font;
/**
    element fontSize
     number: size of the font in pt
*/
var fontSize = (function (node) {
    _inherits(fontSize, node);
    function fontSize(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fontSize.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fontSize);
        this.wzElement = "fontSize";
    }
    return fontSize;
})(node);

_md.fontSize = fontSize;
/**
    element fontFeatures
     string[]: array of advanced typographic features supported in TTF fonts (supported features depend on font file)
*/
var fontFeatures = (function (node) {
    _inherits(fontFeatures, node);
    function fontFeatures(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fontFeatures.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fontFeatures);
        this.wzElement = "fontFeatures";
    }
    return fontFeatures;
})(node);

_md.fontFeatures = fontFeatures;
/**
    element lineHeight
     number: the line height (default: 1)
*/
var lineHeight = (function (node) {
    _inherits(lineHeight, node);
    function lineHeight(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(lineHeight.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, lineHeight);
        this.wzElement = "lineHeight";
    }
    return lineHeight;
})(node);

_md.lineHeight = lineHeight;
// element bold
var bold = (function (node) {
    _inherits(bold, node);
    function bold(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bold.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bold);
        this.wzElement = "bold";
    }
    return bold;
})(node);

_md.bold = bold;
// element boldProp
var boldProp = (function (node) {
    _inherits(boldProp, node);
    function boldProp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(boldProp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, boldProp);
        this.wzElement = "boldProp";
    }
    return boldProp;
})(node);

_md.boldProp = boldProp;
// element italic
var italic = (function (node) {
    _inherits(italic, node);
    function italic(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(italic.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, italic);
        this.wzElement = "italic";
    }
    return italic;
})(node);

_md.italic = italic;
// element italicProp
var italicProp = (function (node) {
    _inherits(italicProp, node);
    function italicProp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(italicProp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, italicProp);
        this.wzElement = "italicProp";
    }
    return italicProp;
})(node);

_md.italicProp = italicProp;
// element underline
var underline = (function (node) {
    _inherits(underline, node);
    function underline(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(underline.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, underline);
        this.wzElement = "underline";
    }
    return underline;
})(node);

_md.underline = underline;
// element underlineProp
var underlineProp = (function (node) {
    _inherits(underlineProp, node);
    function underlineProp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(underlineProp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, underlineProp);
        this.wzElement = "underlineProp";
    }
    return underlineProp;
})(node);

_md.underlineProp = underlineProp;
/**
    element align
     string: (‘left’ or ‘center’ or ‘right’) the alignment of the text
*/
var align = (function (node) {
    _inherits(align, node);
    function align(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(align.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, align);
        this.wzElement = "align";
    }
    return align;
})(node);

_md.align = align;
/**
    element alignment
     string: (‘left’ or ‘center’ or ‘right’) the alignment of the text
*/
var alignment = (function (node) {
    _inherits(alignment, node);
    function alignment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(alignment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, alignment);
        this.wzElement = "alignment";
    }
    return alignment;
})(node);

_md.alignment = alignment;
/**
    element valign
     string: (‘top’ or ‘middle’ or ‘bottom’) the vertical alignment of the text
*/
var valign = (function (node) {
    _inherits(valign, node);
    function valign(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(valign.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, valign);
        this.wzElement = "valign";
    }
    return valign;
})(node);

_md.valign = valign;
/**
    element valignment
     string: (‘top’ or ‘middle’ or ‘bottom’) the vertical alignment of the text
*/
var valignment = (function (node) {
    _inherits(valignment, node);
    function valignment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(valignment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, valignment);
        this.wzElement = "valignment";
    }
    return valignment;
})(node);

_md.valignment = valignment;
/**
    element charSpacing
     number: size of the letter spacing in pt
*/
var charSpacing = (function (node) {
    _inherits(charSpacing, node);
    function charSpacing(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(charSpacing.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, charSpacing);
        this.wzElement = "charSpacing";
    }
    return charSpacing;
})(node);

_md.charSpacing = charSpacing;
/**
    element characterSpacing
     number: size of the letter spacing in pt
*/
var characterSpacing = (function (node) {
    _inherits(characterSpacing, node);
    function characterSpacing(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(characterSpacing.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, characterSpacing);
        this.wzElement = "characterSpacing";
    }
    return characterSpacing;
})(node);

_md.characterSpacing = characterSpacing;
/**
    element color
     string: the color of the text (color name e.g., ‘blue’ or hexadecimal color e.g., ‘#ff5500’)
*/
var color = (function (node) {
    _inherits(color, node);
    function color(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(color.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, color);
        this.wzElement = "color";
    }
    return color;
})(node);

_md.color = color;
// element bkgd
var bkgd = (function (node) {
    _inherits(bkgd, node);
    function bkgd(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bkgd.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bkgd);
        this.wzElement = "bkgd";
    }
    return bkgd;
})(node);

_md.bkgd = bkgd;
/**
    element background
     string the background color of the text
*/
var background = (function (node) {
    _inherits(background, node);
    function background(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(background.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, background);
        this.wzElement = "background";
    }
    return background;
})(node);

_md.background = background;
/**
    element markerColor
     string: the color of the bullets in a buletted list
*/
var markerColor = (function (node) {
    _inherits(markerColor, node);
    function markerColor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(markerColor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, markerColor);
        this.wzElement = "markerColor";
    }
    return markerColor;
})(node);

_md.markerColor = markerColor;
/**
    element decoration
     string: the text decoration to apply (‘underline’ or ‘lineThrough’ or ‘overline’)
*/
var decoration = (function (node) {
    _inherits(decoration, node);
    function decoration(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(decoration.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, decoration);
        this.wzElement = "decoration";
    }
    return decoration;
})(node);

_md.decoration = decoration;
/**
    element decorationStyle
     string: the style of the text decoration (‘dashed’ or ‘dotted’ or ‘double’ or ‘wavy’)
*/
var decorationStyle = (function (node) {
    _inherits(decorationStyle, node);
    function decorationStyle(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(decorationStyle.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, decorationStyle);
        this.wzElement = "decorationStyle";
    }
    return decorationStyle;
})(node);

_md.decorationStyle = decorationStyle;
// element noWrap
var noWrap = (function (node) {
    _inherits(noWrap, node);
    function noWrap(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(noWrap.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, noWrap);
        this.wzElement = "noWrap";
    }
    return noWrap;
})(node);

_md.noWrap = noWrap;
// element h1
var h1 = (function (node) {
    _inherits(h1, node);
    function h1(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h1.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h1);
        this.wzElement = "h1";
    }
    return h1;
})(node);

_md.h1 = h1;
// element h2
var h2 = (function (node) {
    _inherits(h2, node);
    function h2(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(h2.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, h2);
        this.wzElement = "h2";
    }
    return h2;
})(node);

_md.h2 = h2;
/**
    element p
     has no "p" or "+/text" child nodes
*/
var p = (function (node) {
    _inherits(p, node);
    function p(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(p.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, p);
        this.wzElement = "p";
    }
    return p;
})(node);

_md.p = p;
/**
    element pStack
     has "p" or '+/text' child nodes
*/
var pStack = (function (node) {
    _inherits(pStack, node);
    function pStack(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pStack.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pStack);
        this.wzElement = "pStack";
    }
    return pStack;
})(node);

_md.pStack = pStack;
// element xbreak
var xbreak = (function (node) {
    _inherits(xbreak, node);
    function xbreak(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xbreak.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xbreak);
        this.wzElement = "xbreak";
    }
    return xbreak;
})(node);

_md.xbreak = xbreak;
// element ul
var ul = (function (node) {
    _inherits(ul, node);
    function ul(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ul.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ul);
        this.wzElement = "ul";
    }
    return ul;
})(node);

_md.ul = ul;
// element ol
var ol = (function (node) {
    _inherits(ol, node);
    function ol(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ol.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ol);
        this.wzElement = "ol";
    }
    return ol;
})(node);

_md.ol = ol;
// element bullet
var bullet = (function (node) {
    _inherits(bullet, node);
    function bullet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bullet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bullet);
        this.wzElement = "bullet";
    }
    return bullet;
})(node);

_md.bullet = bullet;
// element bulletObj
var bulletObj = (function (node) {
    _inherits(bulletObj, node);
    function bulletObj(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bulletObj.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bulletObj);
        this.wzElement = "bulletObj";
    }
    return bulletObj;
})(node);

_md.bulletObj = bulletObj;
// element code
var code = (function (node) {
    _inherits(code, node);
    function code(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(code.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, code);
        this.wzElement = "code";
    }
    return code;
})(node);

_md.code = code;
// element indent
var indent = (function (node) {
    _inherits(indent, node);
    function indent(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(indent.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, indent);
        this.wzElement = "indent";
    }
    return indent;
})(node);

_md.indent = indent;
// element indentLevel
var indentLevel = (function (node) {
    _inherits(indentLevel, node);
    function indentLevel(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(indentLevel.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, indentLevel);
        this.wzElement = "indentLevel";
    }
    return indentLevel;
})(node);

_md.indentLevel = indentLevel;
// element charCode
var charCode = (function (node) {
    _inherits(charCode, node);
    function charCode(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(charCode.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, charCode);
        this.wzElement = "charCode";
    }
    return charCode;
})(node);

_md.charCode = charCode;
// element characterCode
var characterCode = (function (node) {
    _inherits(characterCode, node);
    function characterCode(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(characterCode.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, characterCode);
        this.wzElement = "characterCode";
    }
    return characterCode;
})(node);

_md.characterCode = characterCode;
// element image
var image = (function (node) {
    _inherits(image, node);
    function image(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(image.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, image);
        this.wzElement = "image";
    }
    return image;
})(node);

_md.image = image;
/**
    element placeholder
     string // 'body' | 'title' | etc.
*/
var placeholder = (function (node) {
    _inherits(placeholder, node);
    function placeholder(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(placeholder.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, placeholder);
        this.wzElement = "placeholder";
    }
    return placeholder;
})(node);

_md.placeholder = placeholder;
/**
    element rotate
     rotation (degrees) - range: -360 to 360
*/
var rotate = (function (node) {
    _inherits(rotate, node);
    function rotate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rotate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rotate);
        this.wzElement = "rotate";
    }
    return rotate;
})(node);

_md.rotate = rotate;
/**
    element rounding
     Enable image rounding - boolean
*/
var rounding = (function (node) {
    _inherits(rounding, node);
    function rounding(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rounding.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rounding);
        this.wzElement = "rounding";
    }
    return rounding;
})(node);

_md.rounding = rounding;
/**
    element sizing
     type: 'contain' | 'cover' | 'crop'
     w h x y
*/
var sizing = (function (node) {
    _inherits(sizing, node);
    function sizing(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(sizing.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, sizing);
        this.wzElement = "sizing";
    }
    return sizing;
})(node);

_md.sizing = sizing;
// element imageDef
var imageDef = (function (node) {
    _inherits(imageDef, node);
    function imageDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(imageDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, imageDef);
        this.wzElement = "imageDef";
    }
    imageDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'src') {
            this.src = child.v; return true;
        }
        if (name === 'title') {
            this.title = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    imageDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.pptModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        });
    }
    return imageDef;
})(node);

_md.imageDef = imageDef;
// element imageRef
var imageRef = (function (node) {
    _inherits(imageRef, node);
    function imageRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(imageRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, imageRef);
        this.wzElement = "imageRef";
    }
    return imageRef;
})(node);

_md.imageRef = imageRef;
// element border
var border = (function (node) {
    _inherits(border, node);
    function border(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(border.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, border);
        this.wzElement = "border";
    }
    return border;
})(node);

_md.border = border;
// element top
var top = (function (node) {
    _inherits(top, node);
    function top(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(top.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, top);
        this.wzElement = "top";
    }
    return top;
})(node);

_md.top = top;
// element right
var right = (function (node) {
    _inherits(right, node);
    function right(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(right.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, right);
        this.wzElement = "right";
    }
    return right;
})(node);

_md.right = right;
// element bottom
var bottom = (function (node) {
    _inherits(bottom, node);
    function bottom(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bottom.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bottom);
        this.wzElement = "bottom";
    }
    return bottom;
})(node);

_md.bottom = bottom;
// element left
var left = (function (node) {
    _inherits(left, node);
    function left(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(left.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, left);
        this.wzElement = "left";
    }
    return left;
})(node);

_md.left = left;
// element pt
var pt = (function (node) {
    _inherits(pt, node);
    function pt(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pt.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pt);
        this.wzElement = "pt";
    }
    return pt;
})(node);

_md.pt = pt;
// element shadow
var shadow = (function (node) {
    _inherits(shadow, node);
    function shadow(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(shadow.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, shadow);
        this.wzElement = "shadow";
    }
    return shadow;
})(node);

_md.shadow = shadow;
/**
    element opacity
     (0-100%)" in PPT
*/
var opacity = (function (node) {
    _inherits(opacity, node);
    function opacity(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(opacity.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, opacity);
        this.wzElement = "opacity";
    }
    return opacity;
})(node);

_md.opacity = opacity;
/**
    element blur
     range: 0-100
*/
var blur = (function (node) {
    _inherits(blur, node);
    function blur(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(blur.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, blur);
        this.wzElement = "blur";
    }
    return blur;
})(node);

_md.blur = blur;
/**
    element angle
     (degrees) - range: 0-359
*/
var angle = (function (node) {
    _inherits(angle, node);
    function angle(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(angle.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, angle);
        this.wzElement = "angle";
    }
    return angle;
})(node);

_md.angle = angle;
/**
    element offset
     shadow offset (points) - range: 0-200
*/
var offset = (function (node) {
    _inherits(offset, node);
    function offset(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(offset.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, offset);
        this.wzElement = "offset";
    }
    return offset;
})(node);

_md.offset = offset;
// element shape
var shape = (function (node) {
    _inherits(shape, node);
    function shape(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(shape.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, shape);
        this.wzElement = "shape";
    }
    return shape;
})(node);

_md.shape = shape;
/**
    element angleRange
     only for pptx.shapes.PIE, pptx.shapes.ARC, pptx.shapes.BLOCK_ARC
*/
var angleRange = (function (node) {
    _inherits(angleRange, node);
    function angleRange(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(angleRange.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, angleRange);
        this.wzElement = "angleRange";
    }
    return angleRange;
})(node);

_md.angleRange = angleRange;
/**
    element radius
     synonim angleRange
*/
var radius = (function (node) {
    _inherits(radius, node);
    function radius(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(radius.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, radius);
        this.wzElement = "radius";
    }
    return radius;
})(node);

_md.radius = radius;
/**
    element arcThicknessRatio
     Radius (only for pptx.shapes.BLOCK_ARC)
*/
var arcThicknessRatio = (function (node) {
    _inherits(arcThicknessRatio, node);
    function arcThicknessRatio(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(arcThicknessRatio.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, arcThicknessRatio);
        this.wzElement = "arcThicknessRatio";
    }
    return arcThicknessRatio;
})(node);

_md.arcThicknessRatio = arcThicknessRatio;
/**
    element fill
     ShapeFillProps
     color
     transparency
     alpha
*/
var fill = (function (node) {
    _inherits(fill, node);
    function fill(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fill.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fill);
        this.wzElement = "fill";
    }
    return fill;
})(node);

_md.fill = fill;
// element flipH
var flipH = (function (node) {
    _inherits(flipH, node);
    function flipH(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(flipH.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, flipH);
        this.wzElement = "flipH";
    }
    return flipH;
})(node);

_md.flipH = flipH;
// element flipV
var flipV = (function (node) {
    _inherits(flipV, node);
    function flipV(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(flipV.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, flipV);
        this.wzElement = "flipV";
    }
    return flipV;
})(node);

_md.flipV = flipV;
/**
    element line
     ShapeLineProps
*/
var line = (function (node) {
    _inherits(line, node);
    function line(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(line.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, line);
        this.wzElement = "line";
    }
    return line;
})(node);

_md.line = line;
/**
    element dashType
     'solid', 'dash', 'dashDot', 'lgDash', 'lgDashDot', 'lgDashDotDot', 'sysDash', 'sysDot'
*/
var dashType = (function (node) {
    _inherits(dashType, node);
    function dashType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dashType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dashType);
        this.wzElement = "dashType";
    }
    return dashType;
})(node);

_md.dashType = dashType;
/**
    element beginArrowType
     'none' 'arrow' 'diamond' 'oval' 'stealth' 'triangle'
*/
var beginArrowType = (function (node) {
    _inherits(beginArrowType, node);
    function beginArrowType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(beginArrowType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, beginArrowType);
        this.wzElement = "beginArrowType";
    }
    return beginArrowType;
})(node);

_md.beginArrowType = beginArrowType;
/**
    element endArrowType
     'none' 'arrow' 'diamond' 'oval' 'stealth' 'triangle'
*/
var endArrowType = (function (node) {
    _inherits(endArrowType, node);
    function endArrowType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(endArrowType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, endArrowType);
        this.wzElement = "endArrowType";
    }
    return endArrowType;
})(node);

_md.endArrowType = endArrowType;
/**
    element rectRadius
     Radius (only for pptx.shapes.ROUNDED_RECTANGLE)
*/
var rectRadius = (function (node) {
    _inherits(rectRadius, node);
    function rectRadius(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(rectRadius.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, rectRadius);
        this.wzElement = "rectRadius";
    }
    return rectRadius;
})(node);

_md.rectRadius = rectRadius;
// element shapeName
var shapeName = (function (node) {
    _inherits(shapeName, node);
    function shapeName(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(shapeName.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, shapeName);
        this.wzElement = "shapeName";
    }
    return shapeName;
})(node);

_md.shapeName = shapeName;
_md.__tagElementMapping = { '#': 'comment', 'name': 'xname', 'type': 'xtype', 'slide-href': 'slideHref', 'slidehref': 'slideHref', 'default-style-def': 'defaultStyleDef', 'defaultstyledef': 'defaultStyleDef', 'style-def': 'styleDef', 'styledef': 'styleDef', 'layout-def': 'layoutDef', 'layoutdef': 'layoutDef', 'page-margins': 'pageMargins', 'pagemargins': 'pageMargins', 'col-w': 'colW', 'colw': 'colW', 'row-h': 'rowH', 'rowh': 'rowH', 'auto-page-char-weight': 'autoPageCharWeight', 'autopagecharweight': 'autoPageCharWeight', 'auto-page-line-weight': 'autoPageLineWeight', 'autopagelineweight': 'autoPageLineWeight', 'column-gap': 'columnGap', 'columngap': 'columnGap', '+': 'text', 'font-size': 'fontSize', 'fontsize': 'fontSize', 'font-features': 'fontFeatures', 'fontfeatures': 'fontFeatures', 'line-height': 'lineHeight', 'lineheight': 'lineHeight', 'b': 'bold', 'bold': 'boldProp', 'i': 'italic', 'italic': 'italicProp', 'u': 'underline', 'underline': 'underlineProp', 'char-spacing': 'charSpacing', 'charspacing': 'charSpacing', 'character-spacing': 'characterSpacing', 'characterspacing': 'characterSpacing', 'marker-color': 'markerColor', 'markercolor': 'markerColor', 'decoration-style': 'decorationStyle', 'decorationstyle': 'decorationStyle', 'no-wrap': 'noWrap', 'nowrap': 'noWrap', 'p-stack': 'pStack', 'pstack': 'pStack', 'br': 'xbreak', 'bullet-obj': 'bulletObj', 'bulletobj': 'bulletObj', 'indent-level': 'indentLevel', 'indentlevel': 'indentLevel', 'char-code': 'charCode', 'charcode': 'charCode', 'character-code': 'characterCode', 'charactercode': 'characterCode', 'image-def': 'imageDef', 'imagedef': 'imageDef', 'image-ref': 'imageRef', 'imageref': 'imageRef', 'angle-range': 'angleRange', 'anglerange': 'angleRange', 'arc-thickness-ratio': 'arcThicknessRatio', 'arcthicknessratio': 'arcThicknessRatio', 'dash-type': 'dashType', 'dashtype': 'dashType', 'begin-arrow-type': 'beginArrowType', 'beginarrowtype': 'beginArrowType', 'end-arrow-type': 'endArrowType', 'endarrowtype': 'endArrowType', 'rect-radius': 'rectRadius', 'rectradius': 'rectRadius', 'shape-name': 'shapeName', 'shapename': 'shapeName' };
// model/replaceUnknownElement( )
var pptModelException = (function () {
    function pptModelException(message, node, instance) {
        _classCallCheck(this, pptModelException);
        this.node = node;
        this.instance = instance;
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log('message', this.message);
        this.stack = (new Error()).stack;
    }
    pptModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: pptModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return pptModelException;
})();

_md.pptModelException = pptModelException;
var pptContext = (function () {
    function pptContext() {
        _classCallCheck(this, pptContext);
        this.validationErrors = [];
    }
    pptContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    pptContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    return pptContext;
})();

_md.pptContext = pptContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new pptModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

