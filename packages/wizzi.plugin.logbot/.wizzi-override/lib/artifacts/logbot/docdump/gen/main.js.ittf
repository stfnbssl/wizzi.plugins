module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.lbot',
            name: 'document',
            schema: 'logbot',
            rootElement: 'logbot',
            rootTag: 'lbot',
            checkSchema: true,
            isAsync: true,
        };

    gen( &md )
        $append imports
            var included_writers = require('./included_writers')
            var jsonata = require('jsonata')
            var axios = require('axios')
            var api = null

        $append main
            _ md.lbot
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        
        async-md( lbot )
            if verify.isNotEmpty(model.apiUrl)
                set api
                    _ axios.create
                        {
                            @ baseURL model.apiUrl
                            { headers
                                @ ['Content-Type'] "application/json"
            _ ctx.w('<lbot>')
            _ md.genItems
                @ model.nodes
                @ ctx
                {
                    @ indent true
                a_cb()
                    _ ctx.w('</lbot>')
                    r_cb()
        
        async-md( aiCall )
            _ ctx.w('<ai-call>')
            _ ctx.indent
            _ ctx.w('<name>' + model.wzName + '</name>')
            _ ctx.w('<description>' + model.description + '</description>')
            _ ctx.w('<ai-messages>')
            let messages = null
            if model.aiMessages.length > 0
                set messages = []
                foreach message in model.aiMessages
                    _ ctx.w('<role>' + message.role + '</role>')
                    _ writeTextElement
                        @ ctx
                        @ 'content'
                        @ message.content
                        @ true
                    _ messages.push
                        {
                            @ role message.role
                            @ content message.content
            _ ctx.w('</ai-messages>')
            log 'aiCall, model.messages', messages
            if api && messages && messages.length > 0
                try
                    _ api.post
                        @ 'aiapicall'
                        { 
                            @ model model.model
                            @ max_tokens parseInt(model.max_tokens)
                            @ temperature parseFloat(model.temperature)
                            @ frequency_penalty parseInt(model.frequency_penalty)
                            @ presence_penalty parseInt(model.presence_penalty)
                            @ messages messages
                            @ prompt model.aiPrompt

                        a_then( response ) 
                            log model.aiPrompt, ' -> ', response.data
                            _ ctx.w('<ai-info>')
                            _ ctx.indent
                            _ ctx.w(response.data.info)
                            _ ctx.deindent
                            _ ctx.w('</ai-info>')
                            _ ctx.w('<ai-response>')
                            _ ctx.indent
                            _ ctx.w(response.data.result)
                            _ ctx.deindent
                            _ ctx.w('</ai-call>')
                            r_cb()
                        catch( err ) 
                            error 'Error:', err.message
                            _ ctx.w('<ai-error>')
                            _ ctx.indent
                            _ ctx.w('Error:', err.message)
                            if err.response
                                _ ctx.w('Response data:', err.response.data)
                                _ ctx.w('Response status:', err.response.status)
                            _ ctx.deindent
                            _ ctx.w('</ai-error>')
                            _ ctx.deindent
                            _ ctx.w('</ai-call>')
                            r_cb()
                catch ex
                    error 'Exception.message:', ex.message
                    error 'Exception:', ex
                    _ ctx.w('<ai-error>')
                    _ ctx.indent
                    _ ctx.w('Error:', ex.message)
                    _ ctx.deindent
                    _ ctx.w('</ai-error>')
                    _ ctx.deindent
                    _ ctx.w('</ai-call>')
                    r_cb()
            else
                _ ctx.deindent
                _ ctx.w('</ai-call>')
                r_cb()

        function aiCall_close
            param model
            param ctx
            param info
            param callback
            _ ctx.deindent
            _ ctx.w('</ai-response>')
            if info != null 
                _ ctx.w('<ai-info>')
                _ ctx.indent
                _ ctx.w(info)
                _ ctx.deindent
                _ ctx.w('</ai-info>')
            _ ctx.deindent
            _ ctx.w('</ai-call>')
            r_cb()
        
        async-md( transformation )
            _ ctx.w('<transformation>')
            _ ctx.indent
            _ ctx.w('<name>' + model.wzName + '</name>')
            _ ctx.w('<description>' + model.description + '</description>')
            _ ctx.w('<aiprompt>' + model.aiPrompt + '</aiprompt>')
            $if TODO
                log 'model.inputs.length', model.inputs.length
                log 'model.aiResults.length', model.aiResults.length
                log 'model.applies.length', model.applies.length
            _ md.genItems
                @ model.inputs
                @ ctx
                {
                    @ indent false
                a_cb()
                    _ md.genItems
                        @ model.aiResults
                        @ ctx
                        {
                            @ indent false
                        a_cb()
                            _ md.genItems
                                @ model.applies
                                @ ctx
                                {
                                    @ indent false
                                a_cb()
                                    _ ctx.deindent
                                    _ ctx.w('</transformation>')
                                    r_cb()
        async-md( input )
            _ ctx.w('<input>')
            _ ctx.indent
            _ ctx.w('<name>' + model.wzName + '</name>')
            let jsonModel = model.jsonObjectInclude
            if !jsonModel
                set jsonModel = model.jsonArrayInclude
            if jsonModel
                _ ctx.w("<script>")
                log 1
                if jsonModel.get_json
                    log 2
                    _ included_writers.writeIncludeJson
                        @ ctx
                        @ jsonModel
                        a_cb( notUsed )
                            log 3
                            _ ctx.w("</script>")
                            _ ctx.deindent
                            _ ctx.w('</input>')
                            r_cb()
                else
                    log 4
                    _ ctx.indent
                    _ ctx.w("something went wrong processing json")
                    _ ctx.deindent
                    _ ctx.w("</script>")
                    _ ctx.deindent
                    _ ctx.w('</input>')
                    r_cb()
            else
                log 5
                _ ctx.w("no data")
                _ ctx.deindent
                _ ctx.w('</input>')
                r_cb()
        
        async-md( aiResult )
            _ ctx.w('<aiResult>')
            _ ctx.indent
            _ ctx.w('<name>' + model.wzName + '</name>')
            if model.jsonata
                _ md.jsonata
                    @ model.jsonata
                    @ ctx
                    a_cb( )
                        _ ctx.deindent
                        _ ctx.w('</aiResult>')
                        r_cb()
        
        async-md( jsonata )
            _ ctx.w('<jsonata>')
            if model.jsInclude
                _ ctx.indent
                _ ctx.w("<script>")
                if model.jsInclude.get_js
                    _ included_writers.writeIncludeJs
                        @ ctx
                        @ model.jsInclude
                        a_cb( notUsed )
                            _ ctx.w("</script>")
                            _ ctx.deindent
                            _ ctx.w('</jsonata>')
                            r_cb()
                else
                    _ ctx.indent
                    _ ctx.w("something went wrong processing js")
                    _ ctx.deindent
                    _ ctx.w("</script>")
                    _ ctx.deindent
                    _ ctx.w('</jsonata>')
                    r_cb()
            elif verify.isNotEmpty(model.wzName)
                _ writeTextElement
                    @ ctx
                    @ 'script'
                    @ model.wzName
                _ ctx.w('</jsonata>')
                r_cb()
            else
                _ ctx.w("<error>Could not retrieve a jsonata expression</error>")
                _ ctx.w('</jsonata>')
                r_cb()
        
        async-md( apply )
            _ ctx.w('<apply>')
            _ ctx.indent
            _ ctx.w('<name>' + model.wzName + '</name>')
            _ md.genItems
                @ model.tos
                @ ctx
                {
                    @ indent false
                a_cb()
                    _ ctx.deindent
                    _ ctx.w('</apply>')
                    r_cb()
        
        async-md( to )
            _ ctx.w('<to>')
            _ ctx.indent
            _ ctx.w('<name>' + model.wzName + '</name>')
            _ ctx.deindent
            $if TODO
                log "model.wzParent.wzName", model.wzParent.wzElement, model.wzParent.wzName
                log "model.wzParent.wzParent.wzName", model.wzParent.wzParent.wzElement, model.wzParent.wzParent.wzName
                log "model.wzParent.wzParent.wzParent.wzName", model.wzParent.wzParent.wzParent.wzElement, model.wzParent.wzParent.wzParent.wzName
            const inputEl
                _ model.wzParent.wzParent.getInputByName
                    @ model.wzName
            $if TODO
                log "inputEl.jsonObjectInclude", inputEl.jsonObjectInclude
                log "inputEl.jsonArrayInclude", inputEl.jsonArrayInclude
            const aiResultEl
                _ model.wzParent.wzParent.getAiResultByName
                    @ model.wzParent.wzName
            $if TODO                    
                log "aiResultEl.jsonata", aiResultEl.jsonata
            if aiResultEl
                _ getJsonataExpression
                    @ aiResultEl
                    @ ctx
                    a_cb( jsonataExpression )
                        if jsonataExpression
                            log "aiResultEl.jsonataExpression", jsonataExpression
                            if inputEl
                                let jsonModel = inputEl.jsonObjectInclude
                                if !jsonModel
                                    set jsonModel = inputEl.jsonArrayInclude
                                if jsonModel
                                    _ included_writers.getIncludeJsonArtifact
                                        @ ctx
                                        @ jsonModel
                                        a_cb( jsonInput )
                                            _ ctx.indent
                                            _ ctx.w('<result>')
                                            _ ctx.indent
                                            const jsonInputParsed = JSON.parse(jsonInput)
                                            log "inputEl.jsonInputParsed", jsonInputParsed
                                            try
                                                _ jsonata
                                                    @ jsonataExpression
                                                    ._ evaluate
                                                        @ jsonInputParsed
                                                        ._ then
                                                            =>
                                                                param result
                                                                log "jsonata.result", result
                                                                _ ctx.writeAligned
                                                                    _ JSON.stringify
                                                                        @ result
                                                                        @ null
                                                                        @ 2
                                                                _ ctx.deindent
                                                                _ ctx.w('</result>')
                                                                _ ctx.deindent
                                                                _ ctx.w('</to>')
                                                                r_cb()
                                            catch ex
                                                error ex
                                                _ ctx.w('Error calling jsonata: ' + ex.message)
                                                _ ctx.deindent
                                                _ ctx.w('</result>')
                                                _ ctx.deindent
                                                _ ctx.w('</to>')
                                                r_cb()
                                else
                                    _ ctx.w('<error>Cannot retrieve json from input data: ' + model.wzName + '</error>')
                                    _ ctx.deindent
                                    _ ctx.w('</to>')
                                    r_cb()
                            else
                                _ ctx.w('<error>Missing input data: ' + model.wzName + '</error>')
                                _ ctx.deindent
                                _ ctx.w('</to>')
                                r_cb()
                        else
                            _ ctx.w('<error>Could not retrieve a jsonata expression in: ' + model.wzParent.wzName + '</error>')
                            _ ctx.deindent
                            _ ctx.w('</to>')
                            r_cb()
            else
                _ ctx.w('<error>Missing ai result: ' + model.wzParent.wzName + '</error>')
                _ ctx.deindent
                _ ctx.w('</to>')
                r_cb()

        function getJsonataExpression
            param aiResultEl
            param ctx
            param callback
            if aiResultEl && aiResultEl.jsonata && aiResultEl.jsonata.jsInclude
                _ included_writers.getIncludeJsArtifact
                    @ ctx
                    @ aiResultEl.jsonata.jsInclude
                    a_cb( jsonataExpression )
                        r_cb( jsonataExpression )
            elif aiResultEl && aiResultEl.jsonata && verify.isNotEmpty(aiResultEl.jsonata.wzName)
                r_cb( aiResultEl.jsonata.wzName )
            else
                r_cb(null)

        function writeTextElement
            param ctx
            param name
            param text
            param indent
            if indent
                _ ctx.indent
            _ ctx.w('<' + name + '>')
            _ ctx.indent
            _ ctx.w(text)
            _ ctx.deindent
            _ ctx.w('</' + name + '>')
            if indent
                _ ctx.deindent

        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval