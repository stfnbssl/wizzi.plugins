module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.logbot',
            name: 'jsonupload',
            schema: 'logbot',
            rootElement: 'logbot',
            rootTag: 'logbot',
            checkSchema: true,
            isAsync: true,
        };

    gen( &md )
        $append main
            set ctx.__json
                {
                    [ manufacturers
                    [ gatewayModels
                    [ deviceModels
                    [ userGroups
                    [ plants
                    $if false
                        [ plantPermissions
                    [ gateways
                    [ devices
                    
            set ctx.__current = ctx.__json
            _ md.logbot
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        _ ctx.w
                            _ JSON.stringify
                                @ ctx.__json
                                @ null
                                @ 2
                        r_cb( ctx )

        async-md( logbot )
            _ md.genItems
                @ model.nodes
                @ ctx
                {
                    @ indent true
                a_cb()
                    r_cb()
        
        async-md( meta )
            # nothing to do
            r_cb()

        async-md( manufacturer )
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    $if false
                        @ org_xid model.org_xid
                        @ description model.description
            _ ctx.__current.manufacturers.push
                @ json
            foreach item in model.gatewayModels
                # loog 'manufacturer.gatewayModels', item.wzName
                _ gateway
                    @ "gatewayModel"
                    @ ctx.__current
                    @ model
                    @ item
            foreach item in model.deviceModels
                # loog 'manufacturer.deviceModel', item.wzName
                _ deviceModel
                    @ ctx.__current
                    @ model
                    @ item
            r_cb()

        async-md( userGroup )
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ org_xid model.org_xid
                    @ description model.description
            _ ctx.__current.userGroups.push
                @ json
            foreach item in model.gatewayModels
                _ gateway
                    @ 'gatewayModel'
                    @ ctx.__current
                    @ model
                    @ item
            foreach item in model.deviceModels
                _ deviceModel
                    @ ctx.__current
                    @ model
                    @ item
            $if false
                foreach item in model.userGroups
                    _ userGroup
                        @ ctx.__current
                        @ model
                        @ item
            foreach item in model.gateways
                _ gateway
                    @ "gw"
                    @ ctx.__current
                    @ model
                    @ item
            foreach item in model.plants
                _ plant
                    @ ctx.__current
                    @ model
                    @ item
            r_cb()

        $if false
            async-md( modelSchema )
                var json
                    {
                        @ name model.wzName
                        @ version model.version
                        $$ @ nameKey getKeyPath(model)
                        @ nameKey model.wzName
                        @ description model.description
                _ ctx.__current.modelSchemas.push
                    @ json
                r_cb()

    $if false
        +
        function userGroup
            param jsonDataTables
            param parentModel
            param model
            var json
                {
                    @ name model.wzName
                    $$ @ nameKey getKeyPath(model)
                    @ nameKey model.wzName
                    @ tenant getKeyPath(parentModel)
            _ jsonDataTables.userGroups.push
                @ json
    +
    function plant
        param jsonDataTables
        param parentModel
        param model
        var json
            {
                @ name model.wzName
                @ nameKey getKeyPath(model)
                @ groupId getKeyPath(parentModel)
                @ description model.description
                @ address model.address
                $if false
                    @ configState model.configState
                    @ instanceRole model.instanceRole
                    @ itemConfigState model.itemConfigState
                    @ activityState model.activityState
                    @ modifiedId model.modifiedId
                { tags 
        foreach item in model.staticTags
            _ staticTag
                @ jsonDataTables
                @ model
                @ item
                @ json.tags
        $*
        foreach ug in model.userGroups
            _ jsonDataTables.plantPermissions.push
                {
                    @ plant getKeyPath(model)
                    @ userGroup ug.wzName
        *$
        _ jsonDataTables.plants.push
            @ json
        foreach item in model.gateways
            _ gateway
                @ 'gw'
                @ jsonDataTables
                @ model
                @ item
    +
    function gateway
        param kind
        param jsonDataTables
        param parentModel
        param model
        if kind == "gatewayModel"
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ groupId model.groupId
                    @ description model.description
                    @ version model.version
                    @ ingestionConfigData 
                        {
                            [ dynamic_tags
                            [ scripts
            if parentModel.wzElement == 'manufacturer'
                set json.manufacturer = getKeyPath(parentModel)
            else
                set json.groupId = getKeyPath(parentModel)
            _ jsonDataTables.gatewayModels.push
                @ json
            foreach item in model.dynamicTags
                _ dynamicTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.ingestionConfigData
            foreach item in model.scripts
                _ script
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.ingestionConfigData
            $*
            foreach item in model.deviceModels
                _ deviceModel
                    @ jsonDataTables
                    @ model
                    @ item
            *$
        else
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ description model.description
                    $if false
                        @ gw_xid model.gw_xid
                        @ iot_xid model.iot_xid
                    @ balenaId model.balenaId
                    @ status model.status
                    @ orderCode model.orderCode
                    @ deviceVersion model.deviceVersion
                    @ serialCode model.serialCode
                    $if false
                        @ configState model.configState
                        @ instanceRole model.instanceRole
                        @ itemConfigState model.itemConfigState
                        @ activityState model.activityState
                        @ modifiedId model.modifiedId
                    @ gatewayModel model.gatewayModel ? model.gatewayModel.wzName : null
                    { tags
            if parentModel.wzElement == 'plant'
                set json.plant = getKeyPath(parentModel)
                set json.groupId = getKeyPath(parentModel.wzParent)
            else
                set json.groupId = getKeyPath(parentModel)
            if model.batching_maxSize || model.batching_maxSize == 0 ||
                \b model.batching_period || model.batching_period == 0
                set json.ingestionConfigData = {}
                set json.ingestionConfigData.batching = {}
                set json.ingestionConfigData.batching.batching_maxSize = model.batching_maxSize
                set json.ingestionConfigData.batching.batching_period = model.batching_period

            $*
            foreach ug in model.userGroups
                _ jsonDataTables.gatewayPermissions.push
                    {
                        @ gateway getKeyPath(model)
                        @ userGroup ug.wzName
            *$
            _ jsonDataTables.gateways.push
                @ json
            foreach item in model.dynamicTags
                _ dynamicTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json
            foreach item in model.scripts
                _ script
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json
            foreach item in model.staticTags
                _ staticTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.tags
            $*
            foreach item in model.dynamicTags
                _ dynamicTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.ingestionConfigData
            foreach item in model.scripts
                _ script
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.ingestionConfigData
            *$
            foreach item in model.devices
                _ device
                    @ jsonDataTables
                    @ model
                    @ item
    +
    function dynamicTag
        param jsonDataTables
        param parentModel
        param model
        param ingestionConfigData
        var json
            {
                @ tag_xid model.wzName
                @ default_value model.default_value
                @ description model.description
                @ ref_device_xid model.ref_device_xid
                @ ref_metric_name model.ref_metric_name
                [ allowed_values
                [ regex_allowed_values
        foreach item in model.dynamicTagAllowedValues
            _ json.allowed_values.push
                @ item.wzName
        foreach item in model.dynamicTagRegexAllowedValues
            _ json.regex_allowed_values.push
                @ item.wzName
        _ ingestionConfigData.dynamic_tags.push
            @ json
    
    function script
        param jsonDataTables
        param parentModel
        param model
        param ingestionConfigData
        var json
            {
                @ script_xid model.wzName
                @ script_type model.script_type
                @ script_description model.script_description
                @ script_timeout model.script_timeout
                @ script_content model.script_content
        _ ingestionConfigData.scripts.push
            @ json
    +
    function deviceModel
        param jsonDataTables
        param parentModel
        param model
        var json
            {
                @ name model.wzName
                @ nameKey parentModel.wzElement == 'manufacturer' ? model.wzName : getKeyPath(model)
                @ groupId model.groupId
                @ description model.description
                @ protocol model.protocol
                @ version model.version
                @ ingestionConfigData 
                    {
                        [ metric
        # loog 'deviceModel.parentModel.wzElement', parentModel.wzElement
        if parentModel.wzElement == 'manufacturer'
            set json.manufacturer = getKeyPath(parentModel)
        elif parentModel.wzElement == 'gatewayModel'
            set json.gatewayModel = getKeyPath(parentModel)
            if parentModel.wzParent.wzElement == 'manufacturer'
                set json.manufacturer = getKeyPath(parentModel.wzParent)
            else
                set json.groupId = getKeyPath(parentModel.wzParent)
        else
            set json.groupId = getKeyPath(parentModel)
        _ jsonDataTables.deviceModels.push
            @ json
        foreach item in model.metrics
            _ metric
                @ 'deviceModel'
                @ jsonDataTables
                @ model
                @ item
                @ json
    +
    function device
        param jsonDataTables
        param parentModel
        param model
        var json
            {
                @ name model.wzName
                @ nameKey getKeyPath(model)
                @ description model.description
                @ protocol model.protocol
                @ status model.status
                @ orderCode model.orderCode
                @ deviceVersion model.deviceVersion
                @ serialCode model.serialCode
                @ deviceModel model.deviceModel
                $if false
                    @ configState model.configState
                    @ instanceRole model.instanceRole
                    @ itemConfigState model.itemConfigState
                    @ activityState model.activityState
                    @ modifiedId model.modifiedId
                @ deviceModel model.deviceModel ? model.deviceModel.wzName : null
                { connection 
                    $$ @ protocol model.protocol
                    { connection
                { tags
        log 'Device', parentModel.wzElement, parentModel.wzParent.wzElement, parentModel.wzParent.wzParent.wzElement
        log 'Device', parentModel.wzName, parentModel.wzParent.wzName, parentModel.wzParent.wzParent.wzName
        if parentModel.wzElement == 'gateway'
            set json.gateway = getKeyPath(parentModel)
            set json.groupId = parentModel.wzParent.wzParent.wzName
        else
            set json.groupId = parentModel.wzParent.wzName
        $*
        foreach ug in model.userGroups
            _ jsonDataTables.devicePermissions.push
                {
                    @ device getKeyPath(model)
                    @ userGroup ug.wzName
        *$
        _ jsonDataTables.devices.push
            @ json
        foreach item in model.staticTags
            _ staticTag
                @ jsonDataTables
                @ model
                @ item
                @ json.tags
        foreach item in model.connectionValues
            _ connectionValue
                @ jsonDataTables
                @ model
                @ item
                @ json.connectionConfiguration
        foreach item in model.metrics
            _ metric
                @ 'device'
                @ jsonDataTables
                @ model
                @ item
                @ json

    +
    function connectionValue
        param jsonDataTables
        param parentModel
        param model
        param connectionConfiguration
        var json
            {
                @ connectionProperty model.wzName + '-' + parentModel.protocol
                @ nameKey getKeyPath(model)
                @ device getKeyPath(parentModel)
                @ value model.value
        $if false
            _ jsonDataTables.connectionValues.push
                @ json
        set connectionConfiguration.connection[model.wzName]
            _ model.wzRoot().meta.getConnectionTypedValue
                @ parentModel.protocol
                @ model.wzName
                @ model.value
    +
    function metric
        param kind
        param jsonDataTables
        param parentModel
        param model
        param json
        var ingestionConfigData_metric
            {
                @ name model.wzName
                @ interval model.interval
                @ description model.description
                @ topic model.topic
                @ script model.scriptRef ? getKeyPath(parentModel.wzParent) + '+' + model.scriptRef.wzName : null
                @ script_value model.script_value
                @ ret_policy model.ret_policy
                { tags
        foreach item in model.metricValues
            _ metricValue
                @ jsonDataTables
                @ model
                @ item
                @ ingestionConfigData_metric
        foreach item in model.staticTags
            _ staticTag
                @ jsonDataTables
                @ model
                @ item
                @ ingestionConfigData_metric.tags
        if kind == 'device' || (kind == 'deviceModel' && model.wzParent.wzParent.wzElement == 'userGroup' )
            foreach item in model.dynamicTagRefs
                _ dynamicTagRef
                    @ jsonDataTables
                    @ model
                    @ item
                    @ ingestionConfigData_metric.tags
        if !json.ingestionConfigData
            set json.ingestionConfigData = {}
        if !json.ingestionConfigData.metric
            set json.ingestionConfigData.metric = []
        _ json.ingestionConfigData.metric.push
            @ ingestionConfigData_metric
    +
    function staticTag
        param jsonDataTables
        param parentModel
        param model
        param tags
        var json
            {
                @ nameKey getKeyPath(model)
                @ metric getKeyPath(parentModel)
                @ key model.wzName
                @ value model.tag_value
        $*
        _ jsonDataTables.staticTags.push
            @ json
        *$
        if !tags.static 
            set tags.static = []
        _ tags.static.push
            {
                @ key model.wzName
                @ value model.tag_value
    +
    function dynamicTagRef
        param jsonDataTables
        param parentModel
        param model
        param tags
        var json
            {
                @ key model.wzName
                @ nameKey getKeyPath(model)
                @ metric getKeyPath(parentModel)
                @ dynamicTag model.value_ref
                @ value_itself model.value_itself
        $*
        _ jsonDataTables.dynamicTagRefs.push
            @ json
        *$
        if !tags.dynamic
            set tags.dynamic = []
        _ tags.dynamic.push
            {
                @ key model.wzName
                @ value model.value_ref
    +
    function metricValue
        param jsonDataTables
        param parentModel
        param model
        param ingestionConfigData_metric
        var json
            {
                @ metricProperty model.wzName + '-' + parentModel.wzParent.protocol
                @ nameKey getKeyPath(model)
                @ metric getKeyPath(parentModel)
                @ value model.value
        set ingestionConfigData_metric[model.wzName]
            _ model.wzRoot().meta.getMetricTypedValue
                @ parentModel.wzParent.protocol
                @ model.wzName
                @ model.value

        $if false
            _ jsonDataTables.metricValues.push
                @ json
    +
    function getKeyPath
        param model
        param rootEl
        if model.wzElement == 'userGroup' || model.wzElement == 'manufacturer'
            return model.wzName
        const names = [ model.wzName ]
        let parent = model.wzParent
        while parent != null
            _ names.push
                @ parent.wzName
            if parent.wzElement == 'userGroup'
                return [...names].reverse().join('+')
            set parent = parent.wzParent
        return names.join('+')
