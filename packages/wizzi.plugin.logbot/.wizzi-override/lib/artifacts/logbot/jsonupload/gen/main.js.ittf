module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.logbot',
            name: 'jsonupload',
            schema: 'logbot',
            rootElement: 'logbot',
            rootTag: 'logbot',
            checkSchema: true,
            isAsync: true,
        };

    gen( &md )
        $append main
            set ctx.__json
                {
                    [ manufacturers
                    [ manufacturerDeviceModels
                    [ userGatewayModels
                    [ userDeviceModels
                    [ tenants
                    [ userGroups
                    [ modelSchemas
                    [ plants
                    [ plantPermissions
                    [ gateways
                    [ gatewayPermissions
                    [ dynamicTags
                    [ dynamicTagAllowedValues
                    [ scripts
                    [ devices
                    [ devicePermissions
                    [ connectionValues
                    [ metrics
                    [ metricValues
                    [ staticTags
                    [ dynamicTagRefs
                    
            set ctx.__current = ctx.__json
            _ md.logbot
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        _ ctx.w
                            _ JSON.stringify
                                @ ctx.__json
                                @ null
                                @ 2
                        r_cb( ctx )

        async-md( logbot )
            _ md.genItems
                @ model.nodes
                @ ctx
                {
                    @ indent true
                a_cb()
                    r_cb()
        
        async-md( meta )
            # nothing to do
            r_cb()

        async-md( manufacturer )
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ org_xid model.org_xid
                    @ description model.description
            _ ctx.__current.manufacturers.push
                @ json
            foreach item in model.manufacturerDeviceModels
                # loog 'manufacturer.deviceModel', item.wzName
                _ deviceModel
                    @ ctx.__current
                    @ model
                    @ item
            r_cb()

        async-md( tenant )
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ org_xid model.org_xid
                    @ description model.description
            _ ctx.__current.tenants.push
                @ json
            foreach item in model.userGatewayModels
                _ gateway
                    @ 'userGatewayModel'
                    @ ctx.__current
                    @ model
                    @ item
            foreach item in model.userDeviceModels
                _ deviceModel
                    @ ctx.__current
                    @ model
                    @ item
            foreach item in model.userGroups
                _ userGroup
                    @ ctx.__current
                    @ model
                    @ item
            foreach item in model.plants
                _ plant
                    @ ctx.__current
                    @ model
                    @ item
            r_cb()

        async-md( modelSchema )
            var json
                {
                    @ name model.wzName
                    @ version model.version
                    $$ @ nameKey getKeyPath(model)
                    @ nameKey model.wzName
                    @ description model.description
            _ ctx.__current.modelSchemas.push
                @ json
            r_cb()

    +
    function userGroup
        param jsonDataTables
        param parentModel
        param model
        var json
            {
                @ name model.wzName
                $$ @ nameKey getKeyPath(model)
                @ nameKey model.wzName
                @ tenant getKeyPath(parentModel)
        _ jsonDataTables.userGroups.push
            @ json
    +
    function plant
        param jsonDataTables
        param parentModel
        param model
        var json
            {
                @ name model.wzName
                @ nameKey getKeyPath(model)
                @ tenant getKeyPath(parentModel)
                @ groupId model.groupId
                @ plant_xid model.plant_xid
                @ description model.description
                @ modelSchema model.modelSchema
                @ configState model.configState
                @ instanceRole model.instanceRole
                @ itemConfigState model.itemConfigState
                @ activityState model.activityState
                @ modifiedId model.modifiedId
                @ plant_model_data 
                    {
                        { tags
        foreach item in model.staticTags
            _ staticTag
                @ jsonDataTables
                @ model
                @ item
                @ json.plant_model_data
        foreach ug in model.userGroups
            _ jsonDataTables.plantPermissions.push
                {
                    @ plant getKeyPath(model)
                    @ userGroup ug.wzName
        _ jsonDataTables.plants.push
            @ json
        foreach item in model.gateways
            _ gateway
                @ 'gw'
                @ jsonDataTables
                @ model
                @ item
    +
    function gateway
        param kind
        param jsonDataTables
        param parentModel
        param model
        if kind == "userGatewayModel"
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ description model.description
                    @ tenant getKeyPath(parentModel)
                    @ groupId model.groupId
                    @ version model.version
                    @ modelSchema model.modelSchema
                    @ gw_model_data 
                        {
                            { tags
                            [ dynamic_tags
                            [ scripts
            _ jsonDataTables.userGatewayModels.push
                @ json
            foreach item in model.dynamicTags
                _ dynamicTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.gw_model_data
            foreach item in model.scripts
                _ script
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.gw_model_data
        else
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ description model.description
                    @ tenant getKeyPath(parentModel.wzParent)
                    @ groupId model.groupId
                    @ plant getKeyPath(parentModel)
                    @ gw_xid model.gw_xid
                    @ iot_xid model.iot_xid
                    @ balenaId model.balenaId
                    @ deviceModel model.deviceModel
                    @ settings model.settings
                    @ modelSchema model.modelSchema
                    @ configState model.configState
                    @ instanceRole model.instanceRole
                    @ itemConfigState model.itemConfigState
                    @ activityState model.activityState
                    @ modifiedId model.modifiedId
                    @ settings model.settings
                    @ batching_maxSize model.batching_maxSize
                    @ batching_period model.batching_period
                    @ userGatewayModel model.userGatewayModel ? model.userGatewayModel.wzName : null
                    @ gw_model_data 
                        {
                            { tags
                            $if false
                                [ dynamic_tags
                                [ scripts

            foreach ug in model.userGroups
                _ jsonDataTables.gatewayPermissions.push
                    {
                        @ gateway getKeyPath(model)
                        @ userGroup ug.wzName
            _ jsonDataTables.gateways.push
                @ json
            foreach item in model.staticTags
                _ staticTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.gw_model_data
            $*
            foreach item in model.dynamicTags
                _ dynamicTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.gw_model_data
            foreach item in model.scripts
                _ script
                    @ jsonDataTables
                    @ model
                    @ item
                    @ json.gw_model_data
            *$
            foreach item in model.devices
                _ device
                    @ jsonDataTables
                    @ model
                    @ item
    +
    function dynamicTag
        param jsonDataTables
        param parentModel
        param model
        param gw_model_data
        var json
            {
                @ nameKey getKeyPath(model)
                @ gateway getKeyPath(parentModel)
                @ tag_xid model.wzName
                @ default_value model.default_value
                @ description model.description
                @ ref_device_xid model.ref_device_xid
                @ ref_metric_name model.ref_metric_name
        var gw_model_data_dynamicTag
            {
                @ tag_xid model.wzName
                @ default_value model.default_value
                @ description model.description
                @ ref_device_xid model.ref_device_xid
                @ ref_metric_name model.ref_metric_name
                [ allowed_values
                [ regex_allowed_values
        _ jsonDataTables.dynamicTags.push
            @ json
        foreach item in model.dynamicTagAllowedValues
            _ dynamicTagAllowedValue
                @ jsonDataTables
                @ model
                @ item
                @ gw_model_data_dynamicTag
        foreach item in model.dynamicTagRegexAllowedValues
            _ dynamicTagRegexAllowedValue
                @ jsonDataTables
                @ model
                @ item
                @ gw_model_data_dynamicTag
        _ gw_model_data.dynamic_tags.push
            @ gw_model_data_dynamicTag
    +
    function dynamicTagAllowedValue
        param jsonDataTables
        param parentModel
        param model
        param gw_model_data_dynamicTag
        var json
            {
                @ nameKey getKeyPath(model)
                @ dynamicTag getKeyPath(parentModel)
                @ tag_value model.wzName
                @ is_regex false
        _ jsonDataTables.dynamicTagAllowedValues.push
            @ json
        _ gw_model_data_dynamicTag.allowed_values.push
            @ model.wzName
    +
    function dynamicTagRegexAllowedValue
        param jsonDataTables
        param parentModel
        param model
        param gw_model_data_dynamicTag
        var json
            {
                @ nameKey getKeyPath(model)
                @ dynamicTag getKeyPath(parentModel)
                @ tag_value model.wzName
                @ is_regex true
        _ jsonDataTables.dynamicTagAllowedValues.push
            @ json
        _ gw_model_data_dynamicTag.regex_allowed_values.push
            @ model.wzName
    +
    function script
        param jsonDataTables
        param parentModel
        param model
        param gw_model_data
        var json
            {
                @ nameKey getKeyPath(model)
                @ gateway getKeyPath(parentModel)
                @ script_xid model.wzName
                @ script_type model.script_type
                @ script_description model.script_description
                @ script_timeout model.script_timeout
                @ script_content model.script_content
        var script
            {
                @ script_xid model.wzName
                @ script_type model.script_type
                @ script_description model.script_description
                @ script_timeout model.script_timeout
                @ script_content model.script_content
        _ gw_model_data.scripts.push
            @ script
        _ jsonDataTables.scripts.push
            @ json
    +
    function deviceModel
        param jsonDataTables
        param parentModel
        param model
        var json
            {
                @ name model.wzName
                @ nameKey parentModel.wzElement == 'manufacturer' ? model.wzName : getKeyPath(model)
                @ description model.description
                @ groupId model.groupId
                @ protocol model.protocol
                @ version model.version
                @ modelSchema model.modelSchema
                @ manufacturer null
                @ tenant null
                @ device_model_data 
                    {
                        @ protocol model.protocol
                        [ metrics
        # loog 'deviceModel.parentModel.wzElement', parentModel.wzElement
        if parentModel.wzElement == 'manufacturer'
            set json.manufacturer = getKeyPath(parentModel)
            _ jsonDataTables.manufacturerDeviceModels.push
                @ json
        elif parentModel.wzElement == 'tenant'
            set json.tenant = getKeyPath(parentModel)
            _ jsonDataTables.userDeviceModels.push
                @ json
        foreach item in model.metrics
            _ metric
                @ 'manufacturerDevice'
                @ jsonDataTables
                @ model
                @ item
                @ json.device_model_data    
    +
    function device
        param jsonDataTables
        param parentModel
        param model
        var json
            {
                @ name model.wzName
                @ nameKey getKeyPath(model)
                @ description model.description
                @ groupId model.groupId
                @ tenant getKeyPath(parentModel.wzParent.wzParent)
                @ gateway getKeyPath(parentModel)
                @ protocol model.protocol
                @ device_xid model.device_xid
                @ deviceModel model.deviceModel
                @ modelConnectionSchema model.modelConnectionSchema
                @ modelSchema model.modelSchema
                @ configState model.configState
                @ instanceRole model.instanceRole
                @ itemConfigState model.itemConfigState
                @ activityState model.activityState
                @ modifiedId model.modifiedId
                @ manufacturerDeviceModel model.manufacturerDeviceModel ? model.manufacturerDeviceModel.wzName : null
                @ userDeviceModel model.userDeviceModel ? model.userDeviceModel.wzName : null
                { device_model_connection_data 
                    @ protocol model.protocol
                    { connection
                { device_model_data 
                    { tags
        foreach ug in model.userGroups
            _ jsonDataTables.devicePermissions.push
                {
                    @ device getKeyPath(model)
                    @ userGroup ug.wzName
        _ jsonDataTables.devices.push
            @ json
        foreach item in model.connectionValues
            _ connectionValue
                @ jsonDataTables
                @ model
                @ item
                @ json.device_model_connection_data
        foreach item in model.staticTags
            _ staticTag
                @ jsonDataTables
                @ model
                @ item
                @ json.device_model_data
        $*
        foreach item in model.metrics
            _ metric
                @ 'device'
                @ jsonDataTables
                @ model
                @ item
                @ json.device_model_data    
        *$

    +
    function connectionValue
        param jsonDataTables
        param parentModel
        param model
        param device_model_connection_data
        var json
            {
                @ connectionProperty model.wzName + '-' + parentModel.protocol
                @ nameKey getKeyPath(model)
                @ device getKeyPath(parentModel)
                @ value model.value
        _ jsonDataTables.connectionValues.push
            @ json
        set device_model_connection_data.connection[model.wzName]
            _ model.wzRoot().meta.getConnectionTypedValue
                @ parentModel.protocol
                @ model.wzName
                @ model.value
    +
    function metric
        param kind
        param jsonDataTables
        param parentModel
        param model
        param device_model_data
        var device_model_data_metric
            {
                @ name model.wzName
                @ interval model.interval
                { tags
                @ description model.description
                @ topic model.topic
                @ script model.scriptRef ? getKeyPath(parentModel.wzParent) + '+' + model.scriptRef.wzName : null
                @ script_value model.script_value
                @ ret_policy model.ret_policy
        if kind == 'manufacturerDevice'
            foreach item in model.metricValues
                _ metricValue
                    @ jsonDataTables
                    @ model
                    @ item
                    @ device_model_data_metric
            _ device_model_data.metrics.push
                @ device_model_data_metric
        else
            var json
                {
                    @ name model.wzName
                    @ nameKey getKeyPath(model)
                    @ device getKeyPath(parentModel)
                    @ script model.scriptRef ? getKeyPath(parentModel.wzParent) + '+' + model.scriptRef.wzName : null
                    @ interval model.interval
                    @ description model.description
                    @ topic model.topic
                    @ script_value model.script_value
                    @ ret_policy model.ret_policy
            _ device_model_data.metrics.push
                @ device_model_data_metric
            _ jsonDataTables.metrics.push
                @ json
            foreach item in model.staticTags
                _ staticTag
                    @ jsonDataTables
                    @ model
                    @ item
                    @ device_model_data_metric
            foreach item in model.dynamicTagRefs
                _ dynamicTagRef
                    @ jsonDataTables
                    @ model
                    @ item
                    @ device_model_data_metric
            foreach item in model.metricValues
                _ metricValue
                    @ jsonDataTables
                    @ model
                    @ item
                    @ device_model_data_metric
    +
    function staticTag
        param jsonDataTables
        param parentModel
        param model
        param device_model_data_metric
        var json
            {
                @ nameKey getKeyPath(model)
                @ metric getKeyPath(parentModel)
                @ key model.wzName
                @ value model.tag_value
        _ jsonDataTables.staticTags.push
            @ json
        if !device_model_data_metric.tags.static 
            set device_model_data_metric.tags.static = []
        _ device_model_data_metric.tags.static.push
            {
                @ key model.wzName
                @ value model.tag_value
    +
    function dynamicTagRef
        param jsonDataTables
        param parentModel
        param model
        param device_model_data_metric
        var json
            {
                @ key model.wzName
                @ nameKey getKeyPath(model)
                @ metric getKeyPath(parentModel)
                @ dynamicTag model.value_ref
                @ value_itself model.value_itself
        _ jsonDataTables.dynamicTagRefs.push
            @ json
        if !device_model_data_metric.tags.dynamic
            set device_model_data_metric.tags.dynamic = []
        _ device_model_data_metric.tags.dynamic.push
            {
                @ key model.wzName
                @ value model.value_ref
    +
    function metricValue
        param jsonDataTables
        param parentModel
        param model
        param device_model_data_metric
        var json
            {
                @ metricProperty model.wzName + '-' + parentModel.wzParent.protocol
                @ nameKey getKeyPath(model)
                @ metric getKeyPath(parentModel)
                @ value model.value
        set device_model_data_metric[model.wzName]
            _ model.wzRoot().meta.getMetricTypedValue
                @ parentModel.wzParent.protocol
                @ model.wzName
                @ model.value

        _ jsonDataTables.metricValues.push
            @ json
    +
    function getKeyPath
        param model
        param rootEl
        if model.wzElement == 'tenant'
            return model.wzName
        const names = [ model.wzName ]
        let parent = model.wzParent
        while parent != null
            _ names.push
                @ parent.wzName
            if parent.wzElement == 'tenant'
                return [...names].reverse().join('+')
            set parent = parent.wzParent
        return names.join('+')
