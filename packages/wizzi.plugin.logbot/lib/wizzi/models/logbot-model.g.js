/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wzschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Fri, 24 Jan 2025 15:11:11 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('@wizzi/utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var logbotBase = (function () {
    function logbotBase(name, sourceLineInfo) {
        _classCallCheck(this, logbotBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    logbotBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    logbotBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    logbotBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    logbotBase.prototype.wzVerify = function() {
    }
    logbotBase.prototype.wzInitialize = function() {
    }
    logbotBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    logbotBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    logbotBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    logbotBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    logbotBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    logbotBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    logbotBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    logbotBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    logbotBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    logbotBase.prototype.error = function(message, node) {
        throw new _md.logbotModelException(message, node, this);
    }
    return logbotBase;
})();

_md.logbotBase = logbotBase;

// element node
var node = (function (logbotBase) {
    _inherits(node, logbotBase);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
        // relation node
        this.nodes = [];
    }
    node.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    node.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    node.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'to') {
            return this.wzLoadToChildColl(child, _md.to, this.nodes);
        }
        if (name === '::js') {
            return this.wzLoadToChildColl(child, _md.jsInclude, this.nodes);
        }
        if (name === 'meta') {
            return this.wzLoadToChildColl(child, _md.meta, this.nodes);
        }
        if (name === 'node') {
            return this.wzLoadToChildColl(child, _md.node, this.nodes);
        }
        if (name === 'apply') {
            return this.wzLoadToChildColl(child, _md.apply, this.nodes);
        }
        if (name === 'input') {
            return this.wzLoadToChildColl(child, _md.input, this.nodes);
        }
        if (name === 'aicall') {
            return this.wzLoadToChildColl(child, _md.aiCall, this.nodes);
        }
        if (name === 'logbot') {
            return this.wzLoadToChildColl(child, _md.logbot, this.nodes);
        }
        if (name === 'ai-call') {
            return this.wzLoadToChildColl(child, _md.aiCall, this.nodes);
        }
        if (name === 'jsonata') {
            return this.wzLoadToChildColl(child, _md.jsonata, this.nodes);
        }
        if (name === 'airesult') {
            return this.wzLoadToChildColl(child, _md.aiResult, this.nodes);
        }
        if (name === 'aimessage') {
            return this.wzLoadToChildColl(child, _md.aiMessage, this.nodes);
        }
        else if (name === 'ai-result') {
            return this.wzLoadToChildColl(child, _md.aiResult, this.nodes);
        }
        if (name === 'ai-message') {
            return this.wzLoadToChildColl(child, _md.aiMessage, this.nodes);
        }
        if (name === 'user_group') {
            return this.wzLoadToChildColl(child, _md.userGroup, this.nodes);
        }
        if (name === '::jsonarray') {
            return this.wzLoadToChildColl(child, _md.jsonArrayInclude, this.nodes);
        }
        if (name === '::jsonobject') {
            return this.wzLoadToChildColl(child, _md.jsonObjectInclude, this.nodes);
        }
        else if (name === '::json-array') {
            return this.wzLoadToChildColl(child, _md.jsonArrayInclude, this.nodes);
        }
        if (name === 'model_schema') {
            return this.wzLoadToChildColl(child, _md.modelSchema, this.nodes);
        }
        else if (name === 'manufacturer') {
            return this.wzLoadToChildColl(child, _md.manufacturer, this.nodes);
        }
        if (name === '::json-object') {
            return this.wzLoadToChildColl(child, _md.jsonObjectInclude, this.nodes);
        }
        if (name === 'metricproperty') {
            return this.wzLoadToChildColl(child, _md.metricProperty, this.nodes);
        }
        if (name === 'transformation') {
            return this.wzLoadToChildColl(child, _md.transformation, this.nodes);
        }
        if (name === 'connectionproperty') {
            return this.wzLoadToChildColl(child, _md.connectionProperty, this.nodes);
        }
        return false;
    }
    node.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    node.prototype.wzVerify = function(ctx) {
        this.nodes.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    node.prototype.wzInitialize = function(ctx) {
        this.nodes.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return node;
})(logbotBase);

_md.node = node;
// element logbot
var logbot = (function (node) {
    _inherits(logbot, node);
    function logbot(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(logbot.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, logbot);
        this.wzElement = "logbot";
    }
    logbot.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'api-url') {
            this.apiUrl = child.v; return true;
        }
        else if (name === 'api_url') {
            this.apiUrl = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    logbot.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    logbot.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
            utc time: Fri, 24 Jan 2025 15:11:11 GMT
        */
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            if (item.wzElement == "meta") {
                this.meta = item;
            }
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return logbot;
})(node);

_md.logbot = logbot;
// element meta
var meta = (function (node) {
    _inherits(meta, node);
    function meta(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(meta.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, meta);
        this.wzElement = "meta";
    }
    meta.prototype.getConnectionProperty = function(protocol, connectionProperty) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
            utc time: Fri, 24 Jan 2025 15:11:11 GMT
        */
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            if (item.wzElement == "connectionProperty" && item.protocol == protocol && item.wzName == connectionProperty) {
                return item;
            }
        }
        return null;
    }
    meta.prototype.getMetricProperty = function(protocol, metricProperty) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
            utc time: Fri, 24 Jan 2025 15:11:11 GMT
        */
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            if (item.wzElement == "metricProperty" && item.protocol == protocol && item.wzName == metricProperty) {
                return item;
            }
        }
        return null;
    }
    meta.prototype.getConnectionTypedValue = function(protocol, connectionProperty, value) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
            utc time: Fri, 24 Jan 2025 15:11:11 GMT
        */
        var cp = this.getConnectionProperty(protocol, connectionProperty);
        if (!cp) {
            throw new Error("Unknown protocol+connectionProperty: " + protocol + '+' + connectionProperty);
        }
        else {
            return getTypedValue(cp.type, value);
        }
    }
    meta.prototype.getMetricTypedValue = function(protocol, metricProperty, value) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
            utc time: Fri, 24 Jan 2025 15:11:11 GMT
        */
        var cp = this.getMetricProperty(protocol, metricProperty);
        if (!cp) {
            throw new Error("Unknown protocol+metricProperty: " + protocol + '+' + metricProperty);
        }
        else {
            return getTypedValue(cp.type, value);
        }
    }
    return meta;
})(node);

_md.meta = meta;
// element connectionProperty
var connectionProperty = (function (node) {
    _inherits(connectionProperty, node);
    function connectionProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(connectionProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, connectionProperty);
        this.wzElement = "connectionProperty";
        // the json type
    }
    connectionProperty.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === 'protocol') {
            this.protocol = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    connectionProperty.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return connectionProperty;
})(node);

_md.connectionProperty = connectionProperty;
// element metricProperty
var metricProperty = (function (node) {
    _inherits(metricProperty, node);
    function metricProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(metricProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, metricProperty);
        this.wzElement = "metricProperty";
        // the json type
    }
    metricProperty.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === 'protocol') {
            this.protocol = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    metricProperty.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return metricProperty;
})(node);

_md.metricProperty = metricProperty;
/**
    element userGroup
     the wzName is the `name` attribute
*/
var userGroup = (function (node) {
    _inherits(userGroup, node);
    function userGroup(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(userGroup.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, userGroup);
        this.wzElement = "userGroup";
        // relation plant
        this.plants = [];
        // relation gateway
        this.gateways = [];
        // relation device
        this.devices = [];
        // relation gatewayModel
        this.gatewayModels = [];
        // relation deviceModel
        this.deviceModels = [];
    }
    userGroup.prototype.addPlant = function(name, sourceLineInfo) {
        var retval = new _md.plant(name, sourceLineInfo);
        retval.wzParent = this;
        this.plants.push(retval);
        return retval;
    }
    userGroup.prototype.getPlant = function(name) {
        var found = null;
        this.plants.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    userGroup.prototype.addGateway = function(name, sourceLineInfo) {
        var retval = new _md.gateway(name, sourceLineInfo);
        retval.wzParent = this;
        this.gateways.push(retval);
        return retval;
    }
    userGroup.prototype.getGateway = function(name) {
        var found = null;
        this.gateways.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    userGroup.prototype.addDevice = function(name, sourceLineInfo) {
        var retval = new _md.device(name, sourceLineInfo);
        retval.wzParent = this;
        this.devices.push(retval);
        return retval;
    }
    userGroup.prototype.getDevice = function(name) {
        var found = null;
        this.devices.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    userGroup.prototype.addGatewayModel = function(name, sourceLineInfo) {
        var retval = new _md.gatewayModel(name, sourceLineInfo);
        retval.wzParent = this;
        this.gatewayModels.push(retval);
        return retval;
    }
    userGroup.prototype.getGatewayModel = function(name) {
        var found = null;
        this.gatewayModels.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    userGroup.prototype.addDeviceModel = function(name, sourceLineInfo) {
        var retval = new _md.deviceModel(name, sourceLineInfo);
        retval.wzParent = this;
        this.deviceModels.push(retval);
        return retval;
    }
    userGroup.prototype.getDeviceModel = function(name) {
        var found = null;
        this.deviceModels.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    userGroup.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'plant') {
            return this.wzLoadToChildColl(child, _md.plant, this.plants);
        }
        if (name === 'device') {
            return this.wzLoadToChildColl(child, _md.device, this.devices);
        }
        if (name === 'gateway') {
            return this.wzLoadToChildColl(child, _md.gateway, this.gateways);
        }
        if (name === 'device_model') {
            return this.wzLoadToChildColl(child, _md.deviceModel, this.deviceModels);
        }
        if (name === 'gateway_model') {
            return this.wzLoadToChildColl(child, _md.gatewayModel, this.gatewayModels);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    userGroup.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    userGroup.prototype.wzVerify = function(ctx) {
        this.plants.forEach(item => 
            item.wzVerify(ctx)
        )
        this.gateways.forEach(item => 
            item.wzVerify(ctx)
        )
        this.devices.forEach(item => 
            item.wzVerify(ctx)
        )
        this.gatewayModels.forEach(item => 
            item.wzVerify(ctx)
        )
        this.deviceModels.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    userGroup.prototype.wzInitialize = function(ctx) {
        this.plants.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.gateways.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.devices.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.gatewayModels.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.deviceModels.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return userGroup;
})(node);

_md.userGroup = userGroup;
/**
    element modelSchema
     the wzName is the `name` attribute
*/
var modelSchema = (function (node) {
    _inherits(modelSchema, node);
    function modelSchema(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelSchema.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelSchema);
        this.wzElement = "modelSchema";
    }
    modelSchema.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'version') {
            this.version = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    modelSchema.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return modelSchema;
})(node);

_md.modelSchema = modelSchema;
/**
    element plant
     the wzName is the `name` attribute
*/
var plant = (function (logbotBase) {
    _inherits(plant, logbotBase);
    function plant(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(plant.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, plant);
        this.allowedCONFIGSTATES = [ "creating", "modifyingPrevious", "modifyingCloned", "completed", "eliminating"];
        this.CONFIGSTATE_CREATING = "creating";
        this.CONFIGSTATE_MODIFYINGPREVIOUS = "modifyingPrevious";
        this.CONFIGSTATE_MODIFYINGCLONED = "modifyingCloned";
        this.CONFIGSTATE_COMPLETED = "completed";
        this.CONFIGSTATE_ELIMINATING = "eliminating";
        this.allowedINSTANCEROLES = [ "none", "master", "item"];
        this.INSTANCEROLE_NONE = "none";
        this.INSTANCEROLE_MASTER = "master";
        this.INSTANCEROLE_ITEM = "item";
        this.allowedITEMCONFIGSTATES = [ "none", "completed", "modifying"];
        this.ITEMCONFIGSTATE_NONE = "none";
        this.ITEMCONFIGSTATE_COMPLETED = "completed";
        this.ITEMCONFIGSTATE_MODIFYING = "modifying";
        this.allowedACTIVITYSTATES = [ "none", "active", "suspended"];
        this.ACTIVITYSTATE_NONE = "none";
        this.ACTIVITYSTATE_ACTIVE = "active";
        this.ACTIVITYSTATE_SUSPENDED = "suspended";
        this.wzElement = "plant";
        this.configState = "completed";
        this.instanceRole = "none";
        this.itemConfigState = "none";
        this.activityState = "none";
        // relation staticTag
        this.staticTags = [];
        // relation gateway
        this.gateways = [];
    }
    plant.CONFIGSTATE_CREATING = "creating";
    
    plant.CONFIGSTATE_MODIFYINGPREVIOUS = "modifyingPrevious";
    
    plant.CONFIGSTATE_MODIFYINGCLONED = "modifyingCloned";
    
    plant.CONFIGSTATE_COMPLETED = "completed";
    
    plant.CONFIGSTATE_ELIMINATING = "eliminating";
    
    plant.INSTANCEROLE_NONE = "none";
    
    plant.INSTANCEROLE_MASTER = "master";
    
    plant.INSTANCEROLE_ITEM = "item";
    
    plant.ITEMCONFIGSTATE_NONE = "none";
    
    plant.ITEMCONFIGSTATE_COMPLETED = "completed";
    
    plant.ITEMCONFIGSTATE_MODIFYING = "modifying";
    
    plant.ACTIVITYSTATE_NONE = "none";
    
    plant.ACTIVITYSTATE_ACTIVE = "active";
    
    plant.ACTIVITYSTATE_SUSPENDED = "suspended";
    
    plant.prototype.addStaticTag = function(name, sourceLineInfo) {
        var retval = new _md.staticTag(name, sourceLineInfo);
        retval.wzParent = this;
        this.staticTags.push(retval);
        return retval;
    }
    plant.prototype.getStaticTag = function(name) {
        var found = null;
        this.staticTags.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    plant.prototype.addGateway = function(name, sourceLineInfo) {
        var retval = new _md.gateway(name, sourceLineInfo);
        retval.wzParent = this;
        this.gateways.push(retval);
        return retval;
    }
    plant.prototype.getGateway = function(name) {
        var found = null;
        this.gateways.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    plant.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'static') {
            return this.wzLoadToChildColl(child, _md.staticTag, this.staticTags);
        }
        if (name === 'address') {
            this.address = child.v; return true;
        }
        if (name === 'groupid') {
            this.groupId = child.v; return true;
        }
        else if (name === 'gateway') {
            return this.wzLoadToChildColl(child, _md.gateway, this.gateways);
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'modified-id') {
            this.modifiedId = child.v; return true;
        }
        else if (name === 'modified_id') {
            this.modifiedId = child.v; return true;
        }
        if (name === 'config-state') {
            this.configState = child.v; return true;
        }
        else if (name === 'config_state') {
            this.configState = child.v; return true;
        }
        if (name === 'instance-role') {
            this.instanceRole = child.v; return true;
        }
        else if (name === 'instance_role') {
            this.instanceRole = child.v; return true;
        }
        if (name === 'activity-state') {
            this.activityState = child.v; return true;
        }
        else if (name === 'activity_state') {
            this.activityState = child.v; return true;
        }
        if (name === 'item-config-state') {
            this.itemConfigState = child.v; return true;
        }
        else if (name === 'item_config_state') {
            this.itemConfigState = child.v; return true;
        }
        return false;
    }
    plant.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    plant.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("plant", "configState", this.configState, this.allowedCONFIGSTATES, this);
        ctx.verifyEnum("plant", "instanceRole", this.instanceRole, this.allowedINSTANCEROLES, this);
        ctx.verifyEnum("plant", "itemConfigState", this.itemConfigState, this.allowedITEMCONFIGSTATES, this);
        ctx.verifyEnum("plant", "activityState", this.activityState, this.allowedACTIVITYSTATES, this);
        this.staticTags.forEach(item => 
            item.wzVerify(ctx)
        )
        this.gateways.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    plant.prototype.wzInitialize = function(ctx) {
        this.staticTags.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.gateways.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return plant;
})(logbotBase);

_md.plant = plant;
/**
    element gateway
     the wzName is the `name` attribute
*/
var gateway = (function (logbotBase) {
    _inherits(gateway, logbotBase);
    function gateway(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(gateway.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, gateway);
        this.allowedSTATUSES = [ "activated", "deactivated", "inventory", "retired"];
        this.STATUS_ACTIVATED = "activated";
        this.STATUS_DEACTIVATED = "deactivated";
        this.STATUS_INVENTORY = "inventory";
        this.STATUS_RETIRED = "retired";
        this.allowedCONFIGSTATES = [ "creating", "modifyingPrevious", "modifyingCloned", "completed", "eliminating"];
        this.CONFIGSTATE_CREATING = "creating";
        this.CONFIGSTATE_MODIFYINGPREVIOUS = "modifyingPrevious";
        this.CONFIGSTATE_MODIFYINGCLONED = "modifyingCloned";
        this.CONFIGSTATE_COMPLETED = "completed";
        this.CONFIGSTATE_ELIMINATING = "eliminating";
        this.allowedINSTANCEROLES = [ "none", "master", "item"];
        this.INSTANCEROLE_NONE = "none";
        this.INSTANCEROLE_MASTER = "master";
        this.INSTANCEROLE_ITEM = "item";
        this.allowedITEMCONFIGSTATES = [ "none", "completed", "modifying"];
        this.ITEMCONFIGSTATE_NONE = "none";
        this.ITEMCONFIGSTATE_COMPLETED = "completed";
        this.ITEMCONFIGSTATE_MODIFYING = "modifying";
        this.allowedACTIVITYSTATES = [ "none", "active", "suspended"];
        this.ACTIVITYSTATE_NONE = "none";
        this.ACTIVITYSTATE_ACTIVE = "active";
        this.ACTIVITYSTATE_SUSPENDED = "suspended";
        this.wzElement = "gateway";
        this.configState = "completed";
        this.instanceRole = "none";
        this.itemConfigState = "none";
        this.activityState = "none";
        // relation batching
        this.batching = null;
        // relation staticTag
        this.staticTags = [];
        // relation dynamicTag
        this.dynamicTags = [];
        // relation script
        this.scripts = [];
        // relation gatewayModel
        this.gatewayModel = null;
        // relation device
        this.devices = [];
    }
    gateway.STATUS_ACTIVATED = "activated";
    
    gateway.STATUS_DEACTIVATED = "deactivated";
    
    gateway.STATUS_INVENTORY = "inventory";
    
    gateway.STATUS_RETIRED = "retired";
    
    gateway.CONFIGSTATE_CREATING = "creating";
    
    gateway.CONFIGSTATE_MODIFYINGPREVIOUS = "modifyingPrevious";
    
    gateway.CONFIGSTATE_MODIFYINGCLONED = "modifyingCloned";
    
    gateway.CONFIGSTATE_COMPLETED = "completed";
    
    gateway.CONFIGSTATE_ELIMINATING = "eliminating";
    
    gateway.INSTANCEROLE_NONE = "none";
    
    gateway.INSTANCEROLE_MASTER = "master";
    
    gateway.INSTANCEROLE_ITEM = "item";
    
    gateway.ITEMCONFIGSTATE_NONE = "none";
    
    gateway.ITEMCONFIGSTATE_COMPLETED = "completed";
    
    gateway.ITEMCONFIGSTATE_MODIFYING = "modifying";
    
    gateway.ACTIVITYSTATE_NONE = "none";
    
    gateway.ACTIVITYSTATE_ACTIVE = "active";
    
    gateway.ACTIVITYSTATE_SUSPENDED = "suspended";
    
    gateway.prototype.addStaticTag = function(name, sourceLineInfo) {
        var retval = new _md.staticTag(name, sourceLineInfo);
        retval.wzParent = this;
        this.staticTags.push(retval);
        return retval;
    }
    gateway.prototype.getStaticTag = function(name) {
        var found = null;
        this.staticTags.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    gateway.prototype.addDynamicTag = function(name, sourceLineInfo) {
        var retval = new _md.dynamicTag(name, sourceLineInfo);
        retval.wzParent = this;
        this.dynamicTags.push(retval);
        return retval;
    }
    gateway.prototype.getDynamicTag = function(name) {
        var found = null;
        this.dynamicTags.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    gateway.prototype.addScript = function(name, sourceLineInfo) {
        var retval = new _md.script(name, sourceLineInfo);
        retval.wzParent = this;
        this.scripts.push(retval);
        return retval;
    }
    gateway.prototype.getScript = function(name) {
        var found = null;
        this.scripts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    gateway.prototype.addDevice = function(name, sourceLineInfo) {
        var retval = new _md.device(name, sourceLineInfo);
        retval.wzParent = this;
        this.devices.push(retval);
        return retval;
    }
    gateway.prototype.getDevice = function(name) {
        var found = null;
        this.devices.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    gateway.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'device') {
            return this.wzLoadToChildColl(child, _md.device, this.devices);
        }
        if (name === 'status') {
            this.status = child.v; return true;
        }
        else if (name === 'static') {
            return this.wzLoadToChildColl(child, _md.staticTag, this.staticTags);
        }
        else if (name === 'script') {
            return this.wzLoadToChildColl(child, _md.script, this.scripts);
        }
        if (name === 'dynamic') {
            return this.wzLoadToChildColl(child, _md.dynamicTag, this.dynamicTags);
        }
        if (name === 'groupid') {
            this.groupId = child.v; return true;
        }
        if (name === 'balenaid') {
            this.balenaId = child.v; return true;
        }
        else if (name === 'batching') {
            return this.wzLoadOneToOne(child, _md.batching, 'batching');
        }
        if (name === 'ordercode') {
            this.orderCode = child.v; return true;
        }
        if (name === 'serialcode') {
            this.serialCode = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'modified-id') {
            this.modifiedId = child.v; return true;
        }
        else if (name === 'modified_id') {
            this.modifiedId = child.v; return true;
        }
        if (name === 'config-state') {
            this.configState = child.v; return true;
        }
        else if (name === 'config_state') {
            this.configState = child.v; return true;
        }
        if (name === 'deviceversion') {
            this.deviceVersion = child.v; return true;
        }
        if (name === 'gateway_model') {
            return this.wzLoadOneToOne(child, _md.gatewayModel, 'gatewayModel');
        }
        if (name === 'instance-role') {
            this.instanceRole = child.v; return true;
        }
        else if (name === 'instance_role') {
            this.instanceRole = child.v; return true;
        }
        if (name === 'activity-state') {
            this.activityState = child.v; return true;
        }
        else if (name === 'activity_state') {
            this.activityState = child.v; return true;
        }
        if (name === 'message_version') {
            this.message_version = child.v; return true;
        }
        if (name === 'item-config-state') {
            this.itemConfigState = child.v; return true;
        }
        else if (name === 'item_config_state') {
            this.itemConfigState = child.v; return true;
        }
        return false;
    }
    gateway.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    gateway.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("gateway", "status", this.status, this.allowedSTATUSES, this);
        ctx.verifyEnum("gateway", "configState", this.configState, this.allowedCONFIGSTATES, this);
        ctx.verifyEnum("gateway", "instanceRole", this.instanceRole, this.allowedINSTANCEROLES, this);
        ctx.verifyEnum("gateway", "itemConfigState", this.itemConfigState, this.allowedITEMCONFIGSTATES, this);
        ctx.verifyEnum("gateway", "activityState", this.activityState, this.allowedACTIVITYSTATES, this);
        if (this.batching != null) {
            this.batching.wzVerify(ctx);
        }
        this.staticTags.forEach(item => 
            item.wzVerify(ctx)
        )
        this.dynamicTags.forEach(item => 
            item.wzVerify(ctx)
        )
        this.scripts.forEach(item => 
            item.wzVerify(ctx)
        )
        if (this.gatewayModel != null) {
            this.gatewayModel.wzVerify(ctx);
        }
        this.devices.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    gateway.prototype.wzInitialize = function(ctx) {
        if (this.batching != null) {
            this.batching.wzInitialize(ctx);
        }
        this.staticTags.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.dynamicTags.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.scripts.forEach(item => 
            item.wzInitialize(ctx)
        )
        if (this.gatewayModel != null) {
            this.gatewayModel.wzInitialize(ctx);
        }
        this.devices.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return gateway;
})(logbotBase);

_md.gateway = gateway;
/**
    element batching
     the wzName is the `name` attribute
*/
var batching = (function (logbotBase) {
    _inherits(batching, logbotBase);
    function batching(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(batching.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, batching);
        this.wzElement = "batching";
    }
    batching.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'period') {
            this.period = parseinteger(child.v, null, child); return true;
        }
        if (name === 'maxsize') {
            this.maxSize = parseinteger(child.v, null, child); return true;
        }
        return false;
    }
    batching.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return batching;
})(logbotBase);

_md.batching = batching;
/**
    element device
     the wzName is the `name` attribute
*/
var device = (function (logbotBase) {
    _inherits(device, logbotBase);
    function device(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(device.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, device);
        this.allowedSTATUSES = [ "activated", "deactivated", "inventory", "retired"];
        this.STATUS_ACTIVATED = "activated";
        this.STATUS_DEACTIVATED = "deactivated";
        this.STATUS_INVENTORY = "inventory";
        this.STATUS_RETIRED = "retired";
        this.allowedCONFIGSTATES = [ "creating", "modifyingPrevious", "modifyingCloned", "completed", "eliminating"];
        this.CONFIGSTATE_CREATING = "creating";
        this.CONFIGSTATE_MODIFYINGPREVIOUS = "modifyingPrevious";
        this.CONFIGSTATE_MODIFYINGCLONED = "modifyingCloned";
        this.CONFIGSTATE_COMPLETED = "completed";
        this.CONFIGSTATE_ELIMINATING = "eliminating";
        this.allowedINSTANCEROLES = [ "none", "master", "item"];
        this.INSTANCEROLE_NONE = "none";
        this.INSTANCEROLE_MASTER = "master";
        this.INSTANCEROLE_ITEM = "item";
        this.allowedITEMCONFIGSTATES = [ "none", "completed", "modifying"];
        this.ITEMCONFIGSTATE_NONE = "none";
        this.ITEMCONFIGSTATE_COMPLETED = "completed";
        this.ITEMCONFIGSTATE_MODIFYING = "modifying";
        this.allowedACTIVITYSTATES = [ "none", "active", "suspended"];
        this.ACTIVITYSTATE_NONE = "none";
        this.ACTIVITYSTATE_ACTIVE = "active";
        this.ACTIVITYSTATE_SUSPENDED = "suspended";
        this.wzElement = "device";
        this.configState = "completed";
        this.instanceRole = "none";
        this.itemConfigState = "none";
        this.activityState = "none";
        // relation connectionValue
        this.connectionValues = [];
        // relation staticTag
        this.staticTags = [];
        // relation metric
        this.metrics = [];
        // relation deviceModel
        this.deviceModel = null;
    }
    device.STATUS_ACTIVATED = "activated";
    
    device.STATUS_DEACTIVATED = "deactivated";
    
    device.STATUS_INVENTORY = "inventory";
    
    device.STATUS_RETIRED = "retired";
    
    device.CONFIGSTATE_CREATING = "creating";
    
    device.CONFIGSTATE_MODIFYINGPREVIOUS = "modifyingPrevious";
    
    device.CONFIGSTATE_MODIFYINGCLONED = "modifyingCloned";
    
    device.CONFIGSTATE_COMPLETED = "completed";
    
    device.CONFIGSTATE_ELIMINATING = "eliminating";
    
    device.INSTANCEROLE_NONE = "none";
    
    device.INSTANCEROLE_MASTER = "master";
    
    device.INSTANCEROLE_ITEM = "item";
    
    device.ITEMCONFIGSTATE_NONE = "none";
    
    device.ITEMCONFIGSTATE_COMPLETED = "completed";
    
    device.ITEMCONFIGSTATE_MODIFYING = "modifying";
    
    device.ACTIVITYSTATE_NONE = "none";
    
    device.ACTIVITYSTATE_ACTIVE = "active";
    
    device.ACTIVITYSTATE_SUSPENDED = "suspended";
    
    device.prototype.addConnectionValue = function(name, sourceLineInfo) {
        var retval = new _md.connectionValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.connectionValues.push(retval);
        return retval;
    }
    device.prototype.getConnectionValue = function(name) {
        var found = null;
        this.connectionValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    device.prototype.addStaticTag = function(name, sourceLineInfo) {
        var retval = new _md.staticTag(name, sourceLineInfo);
        retval.wzParent = this;
        this.staticTags.push(retval);
        return retval;
    }
    device.prototype.getStaticTag = function(name) {
        var found = null;
        this.staticTags.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    device.prototype.addMetric = function(name, sourceLineInfo) {
        var retval = new _md.metric(name, sourceLineInfo);
        retval.wzParent = this;
        this.metrics.push(retval);
        return retval;
    }
    device.prototype.getMetric = function(name) {
        var found = null;
        this.metrics.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    device.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'metric') {
            return this.wzLoadToChildColl(child, _md.metric, this.metrics);
        }
        if (name === 'status') {
            this.status = child.v; return true;
        }
        else if (name === 'static') {
            return this.wzLoadToChildColl(child, _md.staticTag, this.staticTags);
        }
        if (name === 'groupid') {
            this.groupId = child.v; return true;
        }
        if (name === 'protocol') {
            this.protocol = child.v; return true;
        }
        if (name === 'ordercode') {
            this.orderCode = child.v; return true;
        }
        if (name === 'serialcode') {
            this.serialCode = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'modified-id') {
            this.modifiedId = child.v; return true;
        }
        else if (name === 'modified_id') {
            this.modifiedId = child.v; return true;
        }
        if (name === 'config-state') {
            this.configState = child.v; return true;
        }
        else if (name === 'config_state') {
            this.configState = child.v; return true;
        }
        if (name === 'device_model') {
            return this.wzLoadOneToOne(child, _md.deviceModel, 'deviceModel');
        }
        if (name === 'deviceversion') {
            this.deviceVersion = child.v; return true;
        }
        if (name === 'instance-role') {
            this.instanceRole = child.v; return true;
        }
        else if (name === 'instance_role') {
            this.instanceRole = child.v; return true;
        }
        if (name === 'activity-state') {
            this.activityState = child.v; return true;
        }
        else if (name === 'activity_state') {
            this.activityState = child.v; return true;
        }
        if (name === 'connection_value') {
            return this.wzLoadToChildColl(child, _md.connectionValue, this.connectionValues);
        }
        if (name === 'item-config-state') {
            this.itemConfigState = child.v; return true;
        }
        else if (name === 'item_config_state') {
            this.itemConfigState = child.v; return true;
        }
        return false;
    }
    device.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    device.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("device", "status", this.status, this.allowedSTATUSES, this);
        ctx.verifyEnum("device", "configState", this.configState, this.allowedCONFIGSTATES, this);
        ctx.verifyEnum("device", "instanceRole", this.instanceRole, this.allowedINSTANCEROLES, this);
        ctx.verifyEnum("device", "itemConfigState", this.itemConfigState, this.allowedITEMCONFIGSTATES, this);
        ctx.verifyEnum("device", "activityState", this.activityState, this.allowedACTIVITYSTATES, this);
        this.connectionValues.forEach(item => 
            item.wzVerify(ctx)
        )
        this.staticTags.forEach(item => 
            item.wzVerify(ctx)
        )
        this.metrics.forEach(item => 
            item.wzVerify(ctx)
        )
        if (this.deviceModel != null) {
            this.deviceModel.wzVerify(ctx);
        }
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    device.prototype.wzInitialize = function(ctx) {
        this.connectionValues.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.staticTags.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.metrics.forEach(item => 
            item.wzInitialize(ctx)
        )
        if (this.deviceModel != null) {
            this.deviceModel.wzInitialize(ctx);
        }
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return device;
})(logbotBase);

_md.device = device;
/**
    element connectionValue
     the wzName is the `connectionProperty` attribute
*/
var connectionValue = (function (logbotBase) {
    _inherits(connectionValue, logbotBase);
    function connectionValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(connectionValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, connectionValue);
        this.wzElement = "connectionValue";
    }
    connectionValue.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'value') {
            this.value = child.v; return true;
        }
        return false;
    }
    connectionValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return connectionValue;
})(logbotBase);

_md.connectionValue = connectionValue;
/**
    element metric
     the wzName is the `name` attribute
*/
var metric = (function (logbotBase) {
    _inherits(metric, logbotBase);
    function metric(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(metric.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, metric);
        this.allowedACCESSLEVELS = [ "1", "2", "3"];
        this.ACCESSLEVEL_1 = "1";
        this.ACCESSLEVEL_2 = "2";
        this.ACCESSLEVEL_3 = "3";
        this.allowedCATEGORIES = [ "alarm", "data"];
        this.CATEGORY_ALARM = "alarm";
        this.CATEGORY_DATA = "data";
        this.wzElement = "metric";
        // relation metricValue
        this.metricValues = [];
        // relation staticTag
        this.staticTags = [];
        // relation dynamicTagRef
        this.dynamicTagRefs = [];
        // relation scriptRef
        this.scriptRef = null;
    }
    metric.ACCESSLEVEL_1 = "1";
    
    metric.ACCESSLEVEL_2 = "2";
    
    metric.ACCESSLEVEL_3 = "3";
    
    metric.CATEGORY_ALARM = "alarm";
    
    metric.CATEGORY_DATA = "data";
    
    metric.prototype.addMetricValue = function(name, sourceLineInfo) {
        var retval = new _md.metricValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.metricValues.push(retval);
        return retval;
    }
    metric.prototype.getMetricValue = function(name) {
        var found = null;
        this.metricValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    metric.prototype.addStaticTag = function(name, sourceLineInfo) {
        var retval = new _md.staticTag(name, sourceLineInfo);
        retval.wzParent = this;
        this.staticTags.push(retval);
        return retval;
    }
    metric.prototype.getStaticTag = function(name) {
        var found = null;
        this.staticTags.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    metric.prototype.addDynamicTagRef = function(name, sourceLineInfo) {
        var retval = new _md.dynamicTagRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.dynamicTagRefs.push(retval);
        return retval;
    }
    metric.prototype.getDynamicTagRef = function(name) {
        var found = null;
        this.dynamicTagRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    metric.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'min') {
            this.min = child.v; return true;
        }
        else if (name === 'max') {
            this.max = child.v; return true;
        }
        if (name === 'unit') {
            this.unit = child.v; return true;
        }
        if (name === 'topic') {
            this.topic = child.v; return true;
        }
        if (name === 'static') {
            return this.wzLoadToChildColl(child, _md.staticTag, this.staticTags);
        }
        if (name === 'dynamic') {
            return this.wzLoadToChildColl(child, _md.dynamicTagRef, this.dynamicTagRefs);
        }
        if (name === 'category') {
            this.category = child.v; return true;
        }
        if (name === 'interval') {
            this.interval = parseinteger(child.v, null, child); return true;
        }
        if (name === 'property') {
            return this.wzLoadToChildColl(child, _md.metricValue, this.metricValues);
        }
        if (name === 'ret_policy') {
            this.ret_policy = child.v; return true;
        }
        if (name === 'script_ref') {
            return this.wzLoadOneToOne(child, _md.scriptRef, 'scriptRef');
        }
        if (name === 'accesslevel') {
            this.accessLevel = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'script_value') {
            this.script_value = child.v; return true;
        }
        return false;
    }
    metric.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    metric.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("metric", "accessLevel", this.accessLevel, this.allowedACCESSLEVELS, this);
        ctx.verifyEnum("metric", "category", this.category, this.allowedCATEGORIES, this);
        this.metricValues.forEach(item => 
            item.wzVerify(ctx)
        )
        this.staticTags.forEach(item => 
            item.wzVerify(ctx)
        )
        this.dynamicTagRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        if (this.scriptRef != null) {
            this.scriptRef.wzVerify(ctx);
        }
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    metric.prototype.wzInitialize = function(ctx) {
        this.metricValues.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.staticTags.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.dynamicTagRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        if (this.scriptRef != null) {
            this.scriptRef.wzInitialize(ctx);
        }
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return metric;
})(logbotBase);

_md.metric = metric;
/**
    element metricValue
     the wzName is the `metricProperty` attribute
*/
var metricValue = (function (logbotBase) {
    _inherits(metricValue, logbotBase);
    function metricValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(metricValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, metricValue);
        this.wzElement = "metricValue";
    }
    metricValue.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'value') {
            this.value = child.v; return true;
        }
        return false;
    }
    metricValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return metricValue;
})(logbotBase);

_md.metricValue = metricValue;
/**
    element staticTag
     the wzName is the `tag_key` attribute
*/
var staticTag = (function (logbotBase) {
    _inherits(staticTag, logbotBase);
    function staticTag(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(staticTag.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, staticTag);
        this.wzElement = "staticTag";
    }
    staticTag.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'value') {
            this.tag_value = child.v; return true;
        }
        return false;
    }
    staticTag.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return staticTag;
})(logbotBase);

_md.staticTag = staticTag;
/**
    element dynamicTag
     the wzName is the `tag_xid` attribute
*/
var dynamicTag = (function (logbotBase) {
    _inherits(dynamicTag, logbotBase);
    function dynamicTag(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dynamicTag.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dynamicTag);
        this.wzElement = "dynamicTag";
        // relation dynamicTagAllowedValue
        this.dynamicTagAllowedValues = [];
        // relation dynamicTagRegexAllowedValue
        this.dynamicTagRegexAllowedValues = [];
    }
    dynamicTag.prototype.addDynamicTagAllowedValue = function(name, sourceLineInfo) {
        var retval = new _md.dynamicTagAllowedValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.dynamicTagAllowedValues.push(retval);
        return retval;
    }
    dynamicTag.prototype.getDynamicTagAllowedValue = function(name) {
        var found = null;
        this.dynamicTagAllowedValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    dynamicTag.prototype.addDynamicTagRegexAllowedValue = function(name, sourceLineInfo) {
        var retval = new _md.dynamicTagRegexAllowedValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.dynamicTagRegexAllowedValues.push(retval);
        return retval;
    }
    dynamicTag.prototype.getDynamicTagRegexAllowedValue = function(name) {
        var found = null;
        this.dynamicTagRegexAllowedValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    dynamicTag.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'allowed_value') {
            return this.wzLoadToChildColl(child, _md.dynamicTagAllowedValue, this.dynamicTagAllowedValues);
        }
        if (name === 'default_value') {
            this.default_value = child.v; return true;
        }
        if (name === 'ref_device_xid') {
            this.ref_device_xid = child.v; return true;
        }
        if (name === 'ref_metric_name') {
            this.ref_metric_name = child.v; return true;
        }
        if (name === 'regex_allowed_value') {
            return this.wzLoadToChildColl(child, _md.dynamicTagRegexAllowedValue, this.dynamicTagRegexAllowedValues);
        }
        return false;
    }
    dynamicTag.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    dynamicTag.prototype.wzVerify = function(ctx) {
        this.dynamicTagAllowedValues.forEach(item => 
            item.wzVerify(ctx)
        )
        this.dynamicTagRegexAllowedValues.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    dynamicTag.prototype.wzInitialize = function(ctx) {
        this.dynamicTagAllowedValues.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.dynamicTagRegexAllowedValues.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return dynamicTag;
})(logbotBase);

_md.dynamicTag = dynamicTag;
/**
    element dynamicTagRef
     the wzName is the `key` attribute
*/
var dynamicTagRef = (function (logbotBase) {
    _inherits(dynamicTagRef, logbotBase);
    function dynamicTagRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dynamicTagRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dynamicTagRef);
        this.wzElement = "dynamicTagRef";
    }
    dynamicTagRef.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'value_ref') {
            this.value_ref = child.v; return true;
        }
        if (name === 'value_itself') {
            this.value_itself = child.v; return true;
        }
        return false;
    }
    dynamicTagRef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return dynamicTagRef;
})(logbotBase);

_md.dynamicTagRef = dynamicTagRef;
/**
    element dynamicTagAllowedValue
     the wzName is the `tag_value` attribute
*/
var dynamicTagAllowedValue = (function (logbotBase) {
    _inherits(dynamicTagAllowedValue, logbotBase);
    function dynamicTagAllowedValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dynamicTagAllowedValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dynamicTagAllowedValue);
        this.wzElement = "dynamicTagAllowedValue";
    }
    return dynamicTagAllowedValue;
})(logbotBase);

_md.dynamicTagAllowedValue = dynamicTagAllowedValue;
/**
    element dynamicTagRegexAllowedValue
     the wzName is the `tag_value`
*/
var dynamicTagRegexAllowedValue = (function (logbotBase) {
    _inherits(dynamicTagRegexAllowedValue, logbotBase);
    function dynamicTagRegexAllowedValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(dynamicTagRegexAllowedValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, dynamicTagRegexAllowedValue);
        this.wzElement = "dynamicTagRegexAllowedValue";
    }
    return dynamicTagRegexAllowedValue;
})(logbotBase);

_md.dynamicTagRegexAllowedValue = dynamicTagRegexAllowedValue;
/**
    element script
     the wzName is the `script_xid` attribute
*/
var script = (function (logbotBase) {
    _inherits(script, logbotBase);
    function script(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(script.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, script);
        this.wzElement = "script";
    }
    script.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'script_type') {
            this.script_type = child.v; return true;
        }
        if (name === 'script_timeout') {
            this.script_timeout = parseinteger(child.v, null, child); return true;
        }
        else if (name === 'script_content') {
            this.script_content = child.v; return true;
        }
        if (name === 'script_description') {
            this.script_description = child.v; return true;
        }
        return false;
    }
    script.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return script;
})(logbotBase);

_md.script = script;
/**
    element scriptRef
     the wzName is the `script_xid` attribute
*/
var scriptRef = (function (logbotBase) {
    _inherits(scriptRef, logbotBase);
    function scriptRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(scriptRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, scriptRef);
        this.wzElement = "scriptRef";
    }
    return scriptRef;
})(logbotBase);

_md.scriptRef = scriptRef;
/**
    element manufacturer
     the wzName is the `name` attribute
*/
var manufacturer = (function (node) {
    _inherits(manufacturer, node);
    function manufacturer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(manufacturer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, manufacturer);
        this.wzElement = "manufacturer";
        // relation deviceModel
        this.deviceModels = [];
        // relation gatewayModel
        this.gatewayModels = [];
    }
    manufacturer.prototype.addDeviceModel = function(name, sourceLineInfo) {
        var retval = new _md.deviceModel(name, sourceLineInfo);
        retval.wzParent = this;
        this.deviceModels.push(retval);
        return retval;
    }
    manufacturer.prototype.getDeviceModel = function(name) {
        var found = null;
        this.deviceModels.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    manufacturer.prototype.addGatewayModel = function(name, sourceLineInfo) {
        var retval = new _md.gatewayModel(name, sourceLineInfo);
        retval.wzParent = this;
        this.gatewayModels.push(retval);
        return retval;
    }
    manufacturer.prototype.getGatewayModel = function(name) {
        var found = null;
        this.gatewayModels.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    manufacturer.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'device_model') {
            return this.wzLoadToChildColl(child, _md.deviceModel, this.deviceModels);
        }
        if (name === 'gateway_model') {
            return this.wzLoadToChildColl(child, _md.gatewayModel, this.gatewayModels);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    manufacturer.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    manufacturer.prototype.wzVerify = function(ctx) {
        this.deviceModels.forEach(item => 
            item.wzVerify(ctx)
        )
        this.gatewayModels.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    manufacturer.prototype.wzInitialize = function(ctx) {
        this.deviceModels.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.gatewayModels.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return manufacturer;
})(node);

_md.manufacturer = manufacturer;
/**
    element deviceModel
     the wzName is the `name` attribute
*/
var deviceModel = (function (logbotBase) {
    _inherits(deviceModel, logbotBase);
    function deviceModel(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(deviceModel.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, deviceModel);
        this.wzElement = "deviceModel";
        // relation metric
        this.metrics = [];
    }
    deviceModel.prototype.addMetric = function(name, sourceLineInfo) {
        var retval = new _md.metric(name, sourceLineInfo);
        retval.wzParent = this;
        this.metrics.push(retval);
        return retval;
    }
    deviceModel.prototype.getMetric = function(name) {
        var found = null;
        this.metrics.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    deviceModel.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'metric') {
            return this.wzLoadToChildColl(child, _md.metric, this.metrics);
        }
        if (name === 'groupid') {
            this.groupId = child.v; return true;
        }
        if (name === 'version') {
            this.version = child.v; return true;
        }
        if (name === 'protocol') {
            this.protocol = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        return false;
    }
    deviceModel.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    deviceModel.prototype.wzVerify = function(ctx) {
        this.metrics.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    deviceModel.prototype.wzInitialize = function(ctx) {
        this.metrics.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return deviceModel;
})(logbotBase);

_md.deviceModel = deviceModel;
/**
    element gatewayModel
     the wzName is the `name` attribute
*/
var gatewayModel = (function (logbotBase) {
    _inherits(gatewayModel, logbotBase);
    function gatewayModel(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(gatewayModel.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, gatewayModel);
        this.wzElement = "gatewayModel";
        // relation dynamicTag
        this.dynamicTags = [];
        // relation script
        this.scripts = [];
        // relation deviceModel
        this.deviceModels = [];
    }
    gatewayModel.prototype.addDynamicTag = function(name, sourceLineInfo) {
        var retval = new _md.dynamicTag(name, sourceLineInfo);
        retval.wzParent = this;
        this.dynamicTags.push(retval);
        return retval;
    }
    gatewayModel.prototype.getDynamicTag = function(name) {
        var found = null;
        this.dynamicTags.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    gatewayModel.prototype.addScript = function(name, sourceLineInfo) {
        var retval = new _md.script(name, sourceLineInfo);
        retval.wzParent = this;
        this.scripts.push(retval);
        return retval;
    }
    gatewayModel.prototype.getScript = function(name) {
        var found = null;
        this.scripts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    gatewayModel.prototype.addDeviceModel = function(name, sourceLineInfo) {
        var retval = new _md.deviceModel(name, sourceLineInfo);
        retval.wzParent = this;
        this.deviceModels.push(retval);
        return retval;
    }
    gatewayModel.prototype.getDeviceModel = function(name) {
        var found = null;
        this.deviceModels.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    gatewayModel.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'script') {
            return this.wzLoadToChildColl(child, _md.script, this.scripts);
        }
        if (name === 'dynamic') {
            return this.wzLoadToChildColl(child, _md.dynamicTag, this.dynamicTags);
        }
        if (name === 'groupid') {
            this.groupId = child.v; return true;
        }
        if (name === 'version') {
            this.version = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'device_model') {
            return this.wzLoadToChildColl(child, _md.deviceModel, this.deviceModels);
        }
        return false;
    }
    gatewayModel.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    gatewayModel.prototype.wzVerify = function(ctx) {
        this.dynamicTags.forEach(item => 
            item.wzVerify(ctx)
        )
        this.scripts.forEach(item => 
            item.wzVerify(ctx)
        )
        this.deviceModels.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.logbotBase.prototype.wzVerify.call(this, ctx);
    }
    gatewayModel.prototype.wzInitialize = function(ctx) {
        this.dynamicTags.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.scripts.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.deviceModels.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.logbotBase.prototype.wzInitialize.call(this, ctx);
    }
    return gatewayModel;
})(logbotBase);

_md.gatewayModel = gatewayModel;
// element jsInclude
var jsInclude = (function (node) {
    _inherits(jsInclude, node);
    function jsInclude(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsInclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsInclude);
        this.wzElement = "jsInclude";
        this.js_module_items = [];
    }
    jsInclude.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'module') {
            // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
            this.js_module_items.push(child);
            var err, wizziModel;
            this.wzRoot().wzFactory.loadModelFromMtree( //;
                'js',  //;
                { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                function(cberr, cbwizziModel) { //;
                    err = cberr;
                    wizziModel = cbwizziModel;
                });
            this.get_js = function(callback) { //;
                // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                var iv = setInterval(function() { //;
                    if (err || wizziModel) { //;
                        clearInterval(iv);
                        if (callback) { //;
                            callback(err, wizziModel);
                            callback = null;
                        } //;
                    } //;
                }, 100);
            };
            return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    jsInclude.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return jsInclude;
})(node);

_md.jsInclude = jsInclude;
// element jsonObjectInclude
var jsonObjectInclude = (function (node) {
    _inherits(jsonObjectInclude, node);
    function jsonObjectInclude(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonObjectInclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonObjectInclude);
        this.wzElement = "jsonObjectInclude";
        this.json___items = [];
    }
    jsonObjectInclude.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
            this.json___items.push(child);
            var err, wizziModel;
            this.wzRoot().wzFactory.loadModelFromMtree( //;
                'json',  //;
                { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                function(cberr, cbwizziModel) { //;
                    err = cberr;
                    wizziModel = cbwizziModel;
                });
            this.get_json = function(callback) { //;
                // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                var iv = setInterval(function() { //;
                    if (err || wizziModel) { //;
                        clearInterval(iv);
                        if (callback) { //;
                            callback(err, wizziModel);
                            callback = null;
                        } //;
                    } //;
                }, 100);
            };
            return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    jsonObjectInclude.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return jsonObjectInclude;
})(node);

_md.jsonObjectInclude = jsonObjectInclude;
// element jsonArrayInclude
var jsonArrayInclude = (function (node) {
    _inherits(jsonArrayInclude, node);
    function jsonArrayInclude(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonArrayInclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonArrayInclude);
        this.wzElement = "jsonArrayInclude";
        this.json___items = [];
    }
    jsonArrayInclude.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '[') {
            // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
            this.json___items.push(child);
            var err, wizziModel;
            this.wzRoot().wzFactory.loadModelFromMtree( //;
                'json',  //;
                { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                function(cberr, cbwizziModel) { //;
                    err = cberr;
                    wizziModel = cbwizziModel;
                });
            this.get_json = function(callback) { //;
                // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                var iv = setInterval(function() { //;
                    if (err || wizziModel) { //;
                        clearInterval(iv);
                        if (callback) { //;
                            callback(err, wizziModel);
                            callback = null;
                        } //;
                    } //;
                }, 100);
            };
            return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    jsonArrayInclude.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return jsonArrayInclude;
})(node);

_md.jsonArrayInclude = jsonArrayInclude;
// element aiCall
var aiCall = (function (node) {
    _inherits(aiCall, node);
    function aiCall(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(aiCall.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, aiCall);
        this.wzElement = "aiCall";
        this.max_tokens = "1500";
        this.temperature = "0.7";
        this.top_p = "1";
        this.frequency_penalty = "0";
        this.presence_penalty = "0";
        // relation aiMessage
        this.aiMessages = [];
    }
    aiCall.prototype.addAiMessage = function(name, sourceLineInfo) {
        var retval = new _md.aiMessage(name, sourceLineInfo);
        retval.wzParent = this;
        this.aiMessages.push(retval);
        return retval;
    }
    aiCall.prototype.getAiMessage = function(name) {
        var found = null;
        this.aiMessages.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    aiCall.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'kind') {
            this.kind = child.v; return true;
        }
        if (name === 'top_p') {
            this.top_p = child.v; return true;
        }
        if (name === 'ai-prompt') {
            this.aiPrompt = child.v; return true;
        }
        else if (name === 'ai_prompt') {
            this.aiPrompt = child.v; return true;
        }
        else if (name === 'aimessage') {
            return this.wzLoadToChildColl(child, _md.aiMessage, this.aiMessages);
        }
        if (name === 'ai-message') {
            return this.wzLoadToChildColl(child, _md.aiMessage, this.aiMessages);
        }
        if (name === 'max_tokens') {
            this.max_tokens = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'temperature') {
            this.temperature = child.v; return true;
        }
        if (name === 'presence_penalty') {
            this.presence_penalty = child.v; return true;
        }
        if (name === 'frequency_penalty') {
            this.frequency_penalty = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    aiCall.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    aiCall.prototype.wzVerify = function(ctx) {
        this.aiMessages.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    aiCall.prototype.wzInitialize = function(ctx) {
        this.aiMessages.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return aiCall;
})(node);

_md.aiCall = aiCall;
// element aiMessage
var aiMessage = (function (node) {
    _inherits(aiMessage, node);
    function aiMessage(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(aiMessage.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, aiMessage);
        this.wzElement = "aiMessage";
    }
    aiMessage.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'role') {
            this.role = child.v; return true;
        }
        if (name === 'content') {
            this.content = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    aiMessage.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return aiMessage;
})(node);

_md.aiMessage = aiMessage;
// element transformation
var transformation = (function (node) {
    _inherits(transformation, node);
    function transformation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(transformation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, transformation);
        this.wzElement = "transformation";
        // relation input
        this.inputs = [];
        // relation aiResult
        this.aiResults = [];
        // relation apply
        this.applies = [];
    }
    transformation.prototype.addInput = function(name, sourceLineInfo) {
        var retval = new _md.input(name, sourceLineInfo);
        retval.wzParent = this;
        this.inputs.push(retval);
        return retval;
    }
    transformation.prototype.getInput = function(name) {
        var found = null;
        this.inputs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    transformation.prototype.addAiResult = function(name, sourceLineInfo) {
        var retval = new _md.aiResult(name, sourceLineInfo);
        retval.wzParent = this;
        this.aiResults.push(retval);
        return retval;
    }
    transformation.prototype.getAiResult = function(name) {
        var found = null;
        this.aiResults.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    transformation.prototype.addApply = function(name, sourceLineInfo) {
        var retval = new _md.apply(name, sourceLineInfo);
        retval.wzParent = this;
        this.applies.push(retval);
        return retval;
    }
    transformation.prototype.getApply = function(name) {
        var found = null;
        this.applies.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    transformation.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'kind') {
            this.kind = child.v; return true;
        }
        if (name === 'apply') {
            return this.wzLoadToChildColl(child, _md.apply, this.applies);
        }
        if (name === 'input') {
            return this.wzLoadToChildColl(child, _md.input, this.inputs);
        }
        if (name === 'airesult') {
            return this.wzLoadToChildColl(child, _md.aiResult, this.aiResults);
        }
        if (name === 'ai-prompt') {
            this.aiPrompt = child.v; return true;
        }
        else if (name === 'ai_prompt') {
            this.aiPrompt = child.v; return true;
        }
        else if (name === 'ai-result') {
            return this.wzLoadToChildColl(child, _md.aiResult, this.aiResults);
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    transformation.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    transformation.prototype.wzVerify = function(ctx) {
        this.inputs.forEach(item => 
            item.wzVerify(ctx)
        )
        this.aiResults.forEach(item => 
            item.wzVerify(ctx)
        )
        this.applies.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    transformation.prototype.wzInitialize = function(ctx) {
        this.inputs.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.aiResults.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.applies.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    transformation.prototype.getInputByName = function(name) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
            utc time: Fri, 24 Jan 2025 15:11:11 GMT
        */
        var i, i_items=this.inputs, i_len=this.inputs.length, item;
        for (i=0; i<i_len; i++) {
            item = this.inputs[i];
            if (item.wzName === name) {
                return item;
            }
        }
        return null;
    }
    transformation.prototype.getAiResultByName = function(name) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
            utc time: Fri, 24 Jan 2025 15:11:11 GMT
        */
        var i, i_items=this.aiResults, i_len=this.aiResults.length, item;
        for (i=0; i<i_len; i++) {
            item = this.aiResults[i];
            if (item.wzName === name) {
                return item;
            }
        }
        return null;
    }
    return transformation;
})(node);

_md.transformation = transformation;
// element input
var input = (function (node) {
    _inherits(input, node);
    function input(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(input.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, input);
        this.wzElement = "input";
        // relation jsonObjectInclude
        this.jsonObjectInclude = null;
        // relation jsonArrayInclude
        this.jsonArrayInclude = null;
    }
    input.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '::jsonarray') {
            return this.wzLoadOneToOne(child, _md.jsonArrayInclude, 'jsonArrayInclude');
        }
        if (name === '::jsonobject') {
            return this.wzLoadOneToOne(child, _md.jsonObjectInclude, 'jsonObjectInclude');
        }
        else if (name === '::json-array') {
            return this.wzLoadOneToOne(child, _md.jsonArrayInclude, 'jsonArrayInclude');
        }
        if (name === '::json-object') {
            return this.wzLoadOneToOne(child, _md.jsonObjectInclude, 'jsonObjectInclude');
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    input.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    input.prototype.wzVerify = function(ctx) {
        if (this.jsonObjectInclude != null) {
            this.jsonObjectInclude.wzVerify(ctx);
        }
        if (this.jsonArrayInclude != null) {
            this.jsonArrayInclude.wzVerify(ctx);
        }
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    input.prototype.wzInitialize = function(ctx) {
        if (this.jsonObjectInclude != null) {
            this.jsonObjectInclude.wzInitialize(ctx);
        }
        if (this.jsonArrayInclude != null) {
            this.jsonArrayInclude.wzInitialize(ctx);
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return input;
})(node);

_md.input = input;
// element aiResult
var aiResult = (function (node) {
    _inherits(aiResult, node);
    function aiResult(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(aiResult.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, aiResult);
        this.wzElement = "aiResult";
        // relation jsonata
        this.jsonata = null;
    }
    aiResult.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'jsonata') {
            return this.wzLoadOneToOne(child, _md.jsonata, 'jsonata');
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    aiResult.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    aiResult.prototype.wzVerify = function(ctx) {
        if (this.jsonata != null) {
            this.jsonata.wzVerify(ctx);
        }
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    aiResult.prototype.wzInitialize = function(ctx) {
        if (this.jsonata != null) {
            this.jsonata.wzInitialize(ctx);
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return aiResult;
})(node);

_md.aiResult = aiResult;
// element jsonata
var jsonata = (function (node) {
    _inherits(jsonata, node);
    function jsonata(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonata.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonata);
        this.wzElement = "jsonata";
        // relation jsInclude
        this.jsInclude = null;
    }
    jsonata.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '::js') {
            return this.wzLoadOneToOne(child, _md.jsInclude, 'jsInclude');
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    jsonata.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    jsonata.prototype.wzVerify = function(ctx) {
        if (this.jsInclude != null) {
            this.jsInclude.wzVerify(ctx);
        }
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    jsonata.prototype.wzInitialize = function(ctx) {
        if (this.jsInclude != null) {
            this.jsInclude.wzInitialize(ctx);
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return jsonata;
})(node);

_md.jsonata = jsonata;
// element to
var to = (function (node) {
    _inherits(to, node);
    function to(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(to.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, to);
        this.wzElement = "to";
    }
    return to;
})(node);

_md.to = to;
// element apply
var apply = (function (node) {
    _inherits(apply, node);
    function apply(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(apply.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, apply);
        this.wzElement = "apply";
        // relation to
        this.tos = [];
    }
    apply.prototype.addTo = function(name, sourceLineInfo) {
        var retval = new _md.to(name, sourceLineInfo);
        retval.wzParent = this;
        this.tos.push(retval);
        return retval;
    }
    apply.prototype.getTo = function(name) {
        var found = null;
        this.tos.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    apply.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'to') {
            return this.wzLoadToChildColl(child, _md.to, this.tos);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    apply.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.logbotModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    apply.prototype.wzVerify = function(ctx) {
        this.tos.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    apply.prototype.wzInitialize = function(ctx) {
        this.tos.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return apply;
})(node);

_md.apply = apply;
_md.__tagElementMapping = { 'user_group': 'userGroup', 'model_schema': 'modelSchema', '::js': 'jsInclude', '::json-object': 'jsonObjectInclude', '::jsonobject': 'jsonObjectInclude', '::json-array': 'jsonArrayInclude', '::jsonarray': 'jsonArrayInclude', 'ai-call': 'aiCall', 'aicall': 'aiCall', 'ai-message': 'aiMessage', 'aimessage': 'aiMessage', 'ai-result': 'aiResult', 'airesult': 'aiResult', 'gateway_model': 'gatewayModel', 'device_model': 'deviceModel', 'static': 'staticTag', 'dynamic': 'dynamicTag', 'connection_value': 'connectionValue', 'property': 'metricValue', 'script_ref': 'scriptRef', 'allowed_value': 'dynamicTagAllowedValue', 'regex_allowed_value': 'dynamicTagRegexAllowedValue' };
// model/replaceUnknownElement( )
var logbotModelException = (function () {
    function logbotModelException(message, node, instance) {
        _classCallCheck(this, logbotModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    logbotModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: logbotModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return logbotModelException;
})();

_md.logbotModelException = logbotModelException;
var logbotContext = (function () {
    function logbotContext() {
        _classCallCheck(this, logbotContext);
        this.validationErrors = [];
    }
    logbotContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    logbotContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    logbotContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'))
        }
    }
    return logbotContext;
})();

_md.logbotContext = logbotContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseinteger(value, defaultValue, node) {
    if (isEmpty(value)) {
        return defaultValue;
    }
    if (!isInt(value)) {
        throw new logbotModelException('Must be an int value, got:' + value, node);
    }
    return parseInt(value, 10);
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function isArray(value) {
    return Object.prototype.toString.call( value ) === '[object Array]';
}
function isNumber(value) {
    return !isArray( value ) && (value - parseFloat( value ) + 1) >= 0;
}
function isInt(value) {
    return isNumber( value );
}
function getTypedValue(type, value) {
    
    /*
        artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
        package: @wizzi/plugin.js@0.8.9
        primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.logbot\.wizzi-override\lib\wizzi\schemas\logbot.wzschema.ittf
        utc time: Fri, 24 Jan 2025 15:11:11 GMT
    */
    if (type == "boolean") {
        return value == "true" ? true : false;
    }
    else if (type == "integer") {
        return parseInt(value);
    }
    else if (type == "number") {
        return parseFloat(value);
    }
    return value;
}