module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.wzschema',
            name: 'document',
            schema: 'wfschema',
            checkSchema: true,
            isAsync: true,
        };
    gen( &md )
        $append imports
            var included_writers = require('./included_writers')
        $append main
            _ md.wfschema
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        
        async-md( wfschema )
            xml-dump-el-open( wfschema )
            xml-dump-attr( preserveTags )
            xml-dump-attr( mTreeIsPreprocessed )
            xml-dump-attr( unknownElementReplacer, last )
            _md_gen_items( exportTos, indent )
                _md_gen_items( requires, indent )
                    _md_gen_items( declares, indent )
                        _md_gen_items( methods, indent )
                            _md_gen_items( elements, indent )
                                _md_gen_items_comments_and_r_cb.js( wfschema, indent )

        async-md( exportTo )
            xml-dump-el-open( exportTo )
            _ ctx.w('>')
            xml-dump-el-close( exportTo )
            r_cb()

        async-md( require )
            xml-dump-el-open( require )
            xml-dump-attr( kind )
            xml-dump-attr( declareVar, last )
            xml-dump-el-close( require )
            r_cb()

        async-md( declare )
            xml-dump-el-open( declare )
            _ ctx.w('>')
            # _md_gen_items( statements, indent )
            xml-dump-el-close( declare )
            r_cb()

        async-md( method )
            xml-dump-el-open( method )
            xml-dump-attr( emitkey, last )
            _md_gen_items( params, indent )
                _md_gen_items( requires, indent )
                    # _md_gen_items( statements, indent )
                    xml-dump-el-close( method )
                    r_cb()
        
        async-md( param )
            xml-dump-el-open( param )
            _ ctx.w('>')
            xml-dump-el-close( param )
            r_cb()

        async-md( element )
            xml-dump-el-open( element )
            xml-dump-attr( super )
            xml-dump-attr( isAbstract )
            xml-dump-attr( tagInternal )
            xml-dump-attr( xmlTagInternal )
            xml-dump-attr( tagType )
            xml-dump-attr( acceptAnyTag )
            xml-dump-attr( nameIsRequired )
            xml-dump-attr( addToChildren )
            xml-dump-attr( hasMTreeData )
            xml-dump-attr( suppressCollectionEmit )
            xml-dump-attr( isRoot, last )
            _md_gen_items( attributes, indent )
                _md_gen_items( relations, indent )
                    _md_gen_items( restricts, indent )
                        _md_gen_items( methods, indent )
                            _md_gen_items( includes , indent )
                                _md_gen_items_comments_and_r_cb.js( element, indent )

        async-md( attribute )
            xml-dump-el-open( attribute )
            xml-dump-attr( tagInternal )
            xml-dump-attr( type )
            xml-dump-attr( default )
            xml-dump-attr( isRequired )
            xml-dump-attr( isDataType )
            xml-dump-attr( isDataType )
            xml-dump-attr( defaultWhenDeclared, last )
            _md_gen_items( restricts, indent )
                _md_gen_items( comments, indent )
                    xml-dump-el-close( attribute )
                    r_cb()
        
        async-md( restrict )
            xml-dump-el-open( restrict )
            _ ctx.w('>')
            _md_gen_items( facets, indent )
                xml-dump-el-close( restrict )
                r_cb()

        $
            var facets = [
                "enum",
                "maxLength",
                "minLength",
                "maxValue",
                "minValue",
                "regexp",
                "element",
            ];

        $foreach facet in facets
            async-md( ${facet}Facet )
                xml-dump-el-open( ${facet}Facet )
                _ ctx.w('>')
                xml-dump-el-close( ${facet}Facet )
                r_cb()
	
        async-md( relation )
            xml-dump-el-open( relation )
            xml-dump-attr( isOneToOne )
            xml-dump-attr( noGetMethod )
            xml-dump-attr( hasAddOnce, last )
            _md_gen_items_comments_and_r_cb.js( relation, indent )

        async-md( comment )
            xml-dump-el-open( comment )
            _ ctx.w('>')
            _md_gen_items( comments, indent )
                xml-dump-el-close( comment )
                r_cb()

        async-md( include )
            xml-dump-el-open( include )
            _ ctx.w('>')
            _md_gen_items( comments, indent )
                xml-dump-el-close( include )
                r_cb()

        $include includes
        
        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval
