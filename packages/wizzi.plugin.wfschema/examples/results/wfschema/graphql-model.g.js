/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    package: wizzi-js@0.7.13
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var graphqlBase = (function () {
    function graphqlBase(name, sourceLineInfo) {
        _classCallCheck(this, graphqlBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    graphqlBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    graphqlBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    graphqlBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    graphqlBase.prototype.wzVerify = function() {
    }
    graphqlBase.prototype.wzInitialize = function() {
    }
    graphqlBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    graphqlBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    graphqlBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    graphqlBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    graphqlBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    graphqlBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    graphqlBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    graphqlBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    graphqlBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    graphqlBase.prototype.error = function(message, node) {
        throw new _md.graphqlModelException(message, node, this);
    }
    graphqlBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    graphqlBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach(item => 
            
                children.push(item.toJson())
            )
            result.wzChildren = children;
        }
    }
    return graphqlBase;
})();

_md.graphqlBase = graphqlBase;

// element comment
var comment = (function (graphqlBase) {
    _inherits(comment, graphqlBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.graphqlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.graphqlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        return false;
    }
    comment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    comment.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.graphqlBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.graphqlBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(graphqlBase);

_md.comment = comment;
// element commentable
var commentable = (function (graphqlBase) {
    _inherits(commentable, graphqlBase);
    function commentable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(commentable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, commentable);
        this.wzElement = "commentable";
        // relation comment
        this.comments = [];
    }
    commentable.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    commentable.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    commentable.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    commentable.prototype.toJsonProperties = function(result) {
        _md.graphqlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    commentable.prototype.toJsonChildren = function(result) {
        _md.graphqlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    commentable.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        return false;
    }
    commentable.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    commentable.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.graphqlBase.prototype.wzVerify.call(this, ctx);
    }
    commentable.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.graphqlBase.prototype.wzInitialize.call(this, ctx);
    }
    return commentable;
})(graphqlBase);

_md.commentable = commentable;
// element basenode
var basenode = (function (commentable) {
    _inherits(basenode, commentable);
    function basenode(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(basenode.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, basenode);
        this.wzElement = "basenode";
        // relation directive
        this.directives = [];
    }
    basenode.prototype.addDirective = function(name, sourceLineInfo) {
        var retval = new _md.directive(name, sourceLineInfo);
        retval.wzParent = this;
        this.directives.push(retval);
        return retval;
    }
    basenode.prototype.getDirective = function(name) {
        var found = null;
        this.directives.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    basenode.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    basenode.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    basenode.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.directives.forEach(item => 
        
            items.push(item.toJson())
        )
        result['directives'] = items;
    }
    basenode.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '%') {
            return this.wzLoadToChildColl(child, _md.TODO, this.directives);
        }
        if (name === '%list') {
            return this.wzLoadToChildColl(child, _md.isList, this.directives);
        }
        else if (name === '%skip') {
            return this.wzLoadToChildColl(child, _md.skip, this.directives);
        }
        if (name === '%include') {
            return this.wzLoadToChildColl(child, _md.include, this.directives);
        }
        if (name === '%required') {
            return this.wzLoadToChildColl(child, _md.isRequired, this.directives);
        }
        if (name === 'directive') {
            return this.wzLoadToChildColl(child, _md.directive, this.directives);
        }
        if (name === '%deprecated') {
            return this.wzLoadToChildColl(child, _md.isDeprecated, this.directives);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    basenode.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    basenode.prototype.wzVerify = function(ctx) {
        this.directives.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    basenode.prototype.wzInitialize = function(ctx) {
        this.directives.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return basenode;
})(commentable);

_md.basenode = basenode;
// element graphql
var graphql = (function (basenode) {
    _inherits(graphql, basenode);
    function graphql(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(graphql.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, graphql);
        this.wzElement = "graphql";
        // relation typeDef
        this.typeDefs = [];
        // relation operation
        this.operations = [];
        // relation selectionSet
        this.selectionSet = null;
        // relation fragment
        this.fragments = [];
    }
    graphql.prototype.getTypeDef = function(name) {
        var found = null;
        this.typeDefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    graphql.prototype.getOperation = function(name) {
        var found = null;
        this.operations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    graphql.prototype.addFragment = function(name, sourceLineInfo) {
        var retval = new _md.fragment(name, sourceLineInfo);
        retval.wzParent = this;
        this.fragments.push(retval);
        return retval;
    }
    graphql.prototype.getFragment = function(name) {
        var found = null;
        this.fragments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    graphql.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    graphql.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    graphql.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.typeDefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['typeDefs'] = items;
        items = [];
        this.operations.forEach(item => 
        
            items.push(item.toJson())
        )
        result['operations'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
        items = [];
        this.fragments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fragments'] = items;
    }
    graphql.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '') {
            return this.wzLoadToChildColl(child, _md.unionMemberType, this.typeDefs);
        }
        else if (name === '') {
            return this.wzLoadToChildColl(child, _md.unionMemberType, this.typeDefs);
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === ':{') {
            return this.wzLoadToChildColl(child, _md.objectTypeDef, this.typeDefs);
        }
        if (name === 'query') {
            return this.wzLoadToChildColl(child, _md.query, this.operations);
        }
        if (name === 'union') {
            return this.wzLoadToChildColl(child, _md.unionTypeDef, this.typeDefs);
        }
        if (name === 'scalar') {
            return this.wzLoadToChildColl(child, _md.scalarTypeDef, this.typeDefs);
        }
        if (name === 'fragment') {
            return this.wzLoadToChildColl(child, _md.fragment, this.fragments);
        }
        if (name === 'mutation') {
            return this.wzLoadToChildColl(child, _md.mutation, this.operations);
        }
        if (name === 'interface') {
            return this.wzLoadToChildColl(child, _md.interfaceTypeDef, this.typeDefs);
        }
        if (name === 'subscription') {
            return this.wzLoadToChildColl(child, _md.subscription, this.operations);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    graphql.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    graphql.prototype.wzVerify = function(ctx) {
        this.typeDefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.operations.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        this.fragments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    graphql.prototype.wzInitialize = function(ctx) {
        this.typeDefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.operations.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        this.fragments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return graphql;
})(basenode);

_md.graphql = graphql;
// element argument
var argument = (function (commentable) {
    _inherits(argument, commentable);
    function argument(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(argument.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, argument);
        this.wzElement = "argument";
    }
    argument.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    argument.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
    }
    argument.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    argument.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            this.defaultValue = child.v; return true;
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    argument.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return argument;
})(commentable);

_md.argument = argument;
// element selectionSet
var selectionSet = (function (basenode) {
    _inherits(selectionSet, basenode);
    function selectionSet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(selectionSet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, selectionSet);
        this.wzElement = "selectionSet";
        // relation argument
        this.xarguments = [];
        // relation selection
        this.selections = [];
    }
    selectionSet.prototype.addArgument = function(name, sourceLineInfo) {
        var retval = new _md.argument(name, sourceLineInfo);
        retval.wzParent = this;
        this.xarguments.push(retval);
        return retval;
    }
    selectionSet.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    selectionSet.prototype.getSelection = function(name) {
        var found = null;
        this.selections.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    selectionSet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    selectionSet.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    selectionSet.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.xarguments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['xarguments'] = items;
        items = [];
        this.selections.forEach(item => 
        
            items.push(item.toJson())
        )
        result['selections'] = items;
    }
    selectionSet.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '.') {
            return this.wzLoadToChildColl(child, _md.field, this.selections);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.argument, this.xarguments);
        }
        if (name === '...') {
            return this.wzLoadToChildColl(child, _md.fragmentSpread, this.selections);
        }
        if (name === '...on') {
            return this.wzLoadToChildColl(child, _md.inlineFragment, this.selections);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    selectionSet.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    selectionSet.prototype.wzVerify = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.selections.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    selectionSet.prototype.wzInitialize = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.selections.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return selectionSet;
})(basenode);

_md.selectionSet = selectionSet;
// element operation
var operation = (function (basenode) {
    _inherits(operation, basenode);
    function operation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(operation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, operation);
        this.wzElement = "operation";
        // relation variable
        this.variables = [];
        // relation selectionSet
        this.selectionSet = null;
    }
    operation.prototype.getVariable = function(name) {
        var found = null;
        this.variables.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    operation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    operation.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    operation.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.variables.forEach(item => 
        
            items.push(item.toJson())
        )
        result['variables'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    operation.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'int') {
            return this.wzLoadToChildColl(child, _md.intVar, this.variables);
        }
        if (name === 'float') {
            return this.wzLoadToChildColl(child, _md.floatVar, this.variables);
        }
        if (name === 'string') {
            return this.wzLoadToChildColl(child, _md.stringVar, this.variables);
        }
        if (name === 'boolean') {
            return this.wzLoadToChildColl(child, _md.booleanVar, this.variables);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    operation.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    operation.prototype.wzVerify = function(ctx) {
        this.variables.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    operation.prototype.wzInitialize = function(ctx) {
        this.variables.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return operation;
})(basenode);

_md.operation = operation;
// element query
var query = (function (operation) {
    _inherits(query, operation);
    function query(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(query.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, query);
        this.wzElement = "query";
    }
    query.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    query.prototype.toJsonProperties = function(result) {
        _md.operation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    query.prototype.toJsonChildren = function(result) {
        _md.operation.prototype.toJsonChildren.call(this, result);
    }
    return query;
})(operation);

_md.query = query;
// element mutation
var mutation = (function (operation) {
    _inherits(mutation, operation);
    function mutation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mutation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mutation);
        this.wzElement = "mutation";
    }
    mutation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mutation.prototype.toJsonProperties = function(result) {
        _md.operation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    mutation.prototype.toJsonChildren = function(result) {
        _md.operation.prototype.toJsonChildren.call(this, result);
    }
    return mutation;
})(operation);

_md.mutation = mutation;
// element subscription
var subscription = (function (operation) {
    _inherits(subscription, operation);
    function subscription(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(subscription.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, subscription);
        this.wzElement = "subscription";
    }
    subscription.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    subscription.prototype.toJsonProperties = function(result) {
        _md.operation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    subscription.prototype.toJsonChildren = function(result) {
        _md.operation.prototype.toJsonChildren.call(this, result);
    }
    return subscription;
})(operation);

_md.subscription = subscription;
// element fragment
var fragment = (function (basenode) {
    _inherits(fragment, basenode);
    function fragment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fragment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fragment);
        this.wzElement = "fragment";
        // relation selectionSet
        this.selectionSet = null;
    }
    fragment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fragment.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.typeCondition)) {
            result["typeCondition"] = this.typeCondition;
        }
    }
    fragment.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    fragment.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'on') {
            this.typeCondition = child.v; return true;
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    fragment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fragment.prototype.wzVerify = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    fragment.prototype.wzInitialize = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return fragment;
})(basenode);

_md.fragment = fragment;
// element selection
var selection = (function (basenode) {
    _inherits(selection, basenode);
    function selection(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(selection.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, selection);
        this.wzElement = "selection";
    }
    selection.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    selection.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    selection.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
    }
    selection.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    selection.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return selection;
})(basenode);

_md.selection = selection;
// element field
var field = (function (selection) {
    _inherits(field, selection);
    function field(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(field.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, field);
        this.wzElement = "field";
        // relation argument
        this.xarguments = [];
        // relation selectionSet
        this.selectionSet = null;
    }
    field.prototype.addArgument = function(name, sourceLineInfo) {
        var retval = new _md.argument(name, sourceLineInfo);
        retval.wzParent = this;
        this.xarguments.push(retval);
        return retval;
    }
    field.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    field.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    field.prototype.toJsonProperties = function(result) {
        _md.selection.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.alias)) {
            result["alias"] = this.alias;
        }
    }
    field.prototype.toJsonChildren = function(result) {
        _md.selection.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.xarguments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['xarguments'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    field.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.argument, this.xarguments);
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'as') {
            this.alias = child.v; return true;
        }
        ok = _md.selection.prototype.loadChild.call(this, child);
        return ok;
    }
    field.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    field.prototype.wzVerify = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.selection.prototype.wzVerify.call(this, ctx);
    }
    field.prototype.wzInitialize = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.selection.prototype.wzInitialize.call(this, ctx);
    }
    return field;
})(selection);

_md.field = field;
// element fragmentSpread
var fragmentSpread = (function (selection) {
    _inherits(fragmentSpread, selection);
    function fragmentSpread(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fragmentSpread.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fragmentSpread);
        this.wzElement = "fragmentSpread";
    }
    fragmentSpread.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fragmentSpread.prototype.toJsonProperties = function(result) {
        _md.selection.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fragmentSpread.prototype.toJsonChildren = function(result) {
        _md.selection.prototype.toJsonChildren.call(this, result);
    }
    return fragmentSpread;
})(selection);

_md.fragmentSpread = fragmentSpread;
// element inlineFragment
var inlineFragment = (function (selection) {
    _inherits(inlineFragment, selection);
    function inlineFragment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(inlineFragment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, inlineFragment);
        this.wzElement = "inlineFragment";
        // relation selectionSet
        this.selectionSet = null;
    }
    inlineFragment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    inlineFragment.prototype.toJsonProperties = function(result) {
        _md.selection.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    inlineFragment.prototype.toJsonChildren = function(result) {
        _md.selection.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    inlineFragment.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        ok = _md.selection.prototype.loadChild.call(this, child);
        return ok;
    }
    inlineFragment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    inlineFragment.prototype.wzVerify = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.selection.prototype.wzVerify.call(this, ctx);
    }
    inlineFragment.prototype.wzInitialize = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.selection.prototype.wzInitialize.call(this, ctx);
    }
    return inlineFragment;
})(selection);

_md.inlineFragment = inlineFragment;
// element directiveLocation
var directiveLocation = (function (graphqlBase) {
    _inherits(directiveLocation, graphqlBase);
    function directiveLocation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(directiveLocation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, directiveLocation);
        this.wzElement = "directiveLocation";
    }
    directiveLocation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    directiveLocation.prototype.toJsonProperties = function(result) {
        _md.graphqlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    directiveLocation.prototype.toJsonChildren = function(result) {
        _md.graphqlBase.prototype.toJsonChildren.call(this, result);
    }
    return directiveLocation;
})(graphqlBase);

_md.directiveLocation = directiveLocation;
// element directive
var directive = (function (commentable) {
    _inherits(directive, commentable);
    function directive(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(directive.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, directive);
        this.wzElement = "directive";
        // relation directiveLocation
        this.directiveLocations = [];
    }
    directive.prototype.addDirectiveLocation = function(name, sourceLineInfo) {
        var retval = new _md.directiveLocation(name, sourceLineInfo);
        retval.wzParent = this;
        this.directiveLocations.push(retval);
        return retval;
    }
    directive.prototype.getDirectiveLocation = function(name) {
        var found = null;
        this.directiveLocations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    directive.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    directive.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    directive.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.directiveLocations.forEach(item => 
        
            items.push(item.toJson())
        )
        result['directiveLocations'] = items;
    }
    directive.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'on') {
            return this.wzLoadToChildColl(child, _md.directiveLocation, this.directiveLocations);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    directive.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    directive.prototype.wzVerify = function(ctx) {
        this.directiveLocations.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    directive.prototype.wzInitialize = function(ctx) {
        this.directiveLocations.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return directive;
})(commentable);

_md.directive = directive;
// element TODO
var TODO = (function (directive) {
    _inherits(TODO, directive);
    function TODO(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(TODO.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, TODO);
        this.wzElement = "TODO";
    }
    TODO.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    TODO.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    TODO.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return TODO;
})(directive);

_md.TODO = TODO;
// element isList
var isList = (function (directive) {
    _inherits(isList, directive);
    function isList(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(isList.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, isList);
        this.wzElement = "isList";
    }
    isList.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    isList.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    isList.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return isList;
})(directive);

_md.isList = isList;
// element isRequired
var isRequired = (function (directive) {
    _inherits(isRequired, directive);
    function isRequired(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(isRequired.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, isRequired);
        this.wzElement = "isRequired";
    }
    isRequired.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    isRequired.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    isRequired.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return isRequired;
})(directive);

_md.isRequired = isRequired;
// element isDeprecated
var isDeprecated = (function (directive) {
    _inherits(isDeprecated, directive);
    function isDeprecated(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(isDeprecated.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, isDeprecated);
        this.wzElement = "isDeprecated";
    }
    isDeprecated.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    isDeprecated.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    isDeprecated.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return isDeprecated;
})(directive);

_md.isDeprecated = isDeprecated;
// element skip
var skip = (function (directive) {
    _inherits(skip, directive);
    function skip(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(skip.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, skip);
        this.wzElement = "skip";
    }
    skip.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    skip.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    skip.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return skip;
})(directive);

_md.skip = skip;
// element include
var include = (function (directive) {
    _inherits(include, directive);
    function include(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(include.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, include);
        this.wzElement = "include";
    }
    include.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    include.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    include.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return include;
})(directive);

_md.include = include;
// element variable
var variable = (function (basenode) {
    _inherits(variable, basenode);
    function variable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(variable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, variable);
        this.wzElement = "variable";
    }
    variable.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    variable.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    variable.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
    }
    variable.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    variable.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return variable;
})(basenode);

_md.variable = variable;
// element stringVar
var stringVar = (function (variable) {
    _inherits(stringVar, variable);
    function stringVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stringVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stringVar);
        this.wzElement = "stringVar";
    }
    stringVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stringVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stringVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    stringVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'String';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return stringVar;
})(variable);

_md.stringVar = stringVar;
// element intVar
var intVar = (function (variable) {
    _inherits(intVar, variable);
    function intVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(intVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, intVar);
        this.wzElement = "intVar";
    }
    intVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    intVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    intVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    intVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'Int';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return intVar;
})(variable);

_md.intVar = intVar;
// element floatVar
var floatVar = (function (variable) {
    _inherits(floatVar, variable);
    function floatVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(floatVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, floatVar);
        this.wzElement = "floatVar";
    }
    floatVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    floatVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    floatVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    floatVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'Float';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return floatVar;
})(variable);

_md.floatVar = floatVar;
// element booleanVar
var booleanVar = (function (variable) {
    _inherits(booleanVar, variable);
    function booleanVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(booleanVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, booleanVar);
        this.wzElement = "booleanVar";
    }
    booleanVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    booleanVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    booleanVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    booleanVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'Boolean';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return booleanVar;
})(variable);

_md.booleanVar = booleanVar;
// element implement
var implement = (function (commentable) {
    _inherits(implement, commentable);
    function implement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(implement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, implement);
        this.wzElement = "implement";
    }
    implement.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    implement.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    implement.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return implement;
})(commentable);

_md.implement = implement;
// element typeDef
var typeDef = (function (basenode) {
    _inherits(typeDef, basenode);
    function typeDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeDef);
        this.wzElement = "typeDef";
    }
    typeDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    typeDef.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    typeDef.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
    }
    typeDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    typeDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return typeDef;
})(basenode);

_md.typeDef = typeDef;
// element scalarTypeDef
var scalarTypeDef = (function (typeDef) {
    _inherits(scalarTypeDef, typeDef);
    function scalarTypeDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(scalarTypeDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, scalarTypeDef);
        this.wzElement = "scalarTypeDef";
    }
    scalarTypeDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    scalarTypeDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    scalarTypeDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
    }
    return scalarTypeDef;
})(typeDef);

_md.scalarTypeDef = scalarTypeDef;
// element objectTypeDef
var objectTypeDef = (function (typeDef) {
    _inherits(objectTypeDef, typeDef);
    function objectTypeDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(objectTypeDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, objectTypeDef);
        this.wzElement = "objectTypeDef";
        // relation implement
        this.ximplements = [];
        // relation fieldDef
        this.fieldDefs = [];
    }
    objectTypeDef.prototype.addImplement = function(name, sourceLineInfo) {
        var retval = new _md.implement(name, sourceLineInfo);
        retval.wzParent = this;
        this.ximplements.push(retval);
        return retval;
    }
    objectTypeDef.prototype.getImplement = function(name) {
        var found = null;
        this.ximplements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    objectTypeDef.prototype.getFieldDef = function(name) {
        var found = null;
        this.fieldDefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    objectTypeDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    objectTypeDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    objectTypeDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.ximplements.forEach(item => 
        
            items.push(item.toJson())
        )
        result['ximplements'] = items;
        items = [];
        this.fieldDefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fieldDefs'] = items;
    }
    objectTypeDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '&') {
            return this.wzLoadToChildColl(child, _md.implement, this.ximplements);
        }
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.arrayType, this.fieldDefs);
        }
        if (name === 'm') {
            return this.wzLoadToChildColl(child, _md.method, this.fieldDefs);
        }
        if (name === 'id') {
            return this.wzLoadToChildColl(child, _md.IDType, this.fieldDefs);
        }
        if (name === 'int') {
            return this.wzLoadToChildColl(child, _md.intType, this.fieldDefs);
        }
        if (name === 'enum') {
            return this.wzLoadToChildColl(child, _md.enumType, this.fieldDefs);
        }
        if (name === 'null') {
            return this.wzLoadToChildColl(child, _md.nullType, this.fieldDefs);
        }
        if (name === 'float') {
            return this.wzLoadToChildColl(child, _md.floatType, this.fieldDefs);
        }
        if (name === 'string') {
            return this.wzLoadToChildColl(child, _md.stringType, this.fieldDefs);
        }
        if (name === 'boolean') {
            return this.wzLoadToChildColl(child, _md.booleanType, this.fieldDefs);
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    objectTypeDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    objectTypeDef.prototype.wzVerify = function(ctx) {
        this.ximplements.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.fieldDefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    objectTypeDef.prototype.wzInitialize = function(ctx) {
        this.ximplements.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.fieldDefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return objectTypeDef;
})(typeDef);

_md.objectTypeDef = objectTypeDef;
// element interfaceTypeDef
var interfaceTypeDef = (function (typeDef) {
    _inherits(interfaceTypeDef, typeDef);
    function interfaceTypeDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(interfaceTypeDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, interfaceTypeDef);
        this.wzElement = "interfaceTypeDef";
        // relation fieldDef
        this.fieldDefs = [];
    }
    interfaceTypeDef.prototype.getFieldDef = function(name) {
        var found = null;
        this.fieldDefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    interfaceTypeDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    interfaceTypeDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    interfaceTypeDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.fieldDefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fieldDefs'] = items;
    }
    interfaceTypeDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.arrayType, this.fieldDefs);
        }
        if (name === 'm') {
            return this.wzLoadToChildColl(child, _md.method, this.fieldDefs);
        }
        if (name === 'id') {
            return this.wzLoadToChildColl(child, _md.IDType, this.fieldDefs);
        }
        if (name === 'int') {
            return this.wzLoadToChildColl(child, _md.intType, this.fieldDefs);
        }
        if (name === 'enum') {
            return this.wzLoadToChildColl(child, _md.enumType, this.fieldDefs);
        }
        if (name === 'null') {
            return this.wzLoadToChildColl(child, _md.nullType, this.fieldDefs);
        }
        if (name === 'float') {
            return this.wzLoadToChildColl(child, _md.floatType, this.fieldDefs);
        }
        if (name === 'string') {
            return this.wzLoadToChildColl(child, _md.stringType, this.fieldDefs);
        }
        if (name === 'boolean') {
            return this.wzLoadToChildColl(child, _md.booleanType, this.fieldDefs);
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    interfaceTypeDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    interfaceTypeDef.prototype.wzVerify = function(ctx) {
        this.fieldDefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    interfaceTypeDef.prototype.wzInitialize = function(ctx) {
        this.fieldDefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return interfaceTypeDef;
})(typeDef);

_md.interfaceTypeDef = interfaceTypeDef;
// element unionTypeDef
var unionTypeDef = (function (typeDef) {
    _inherits(unionTypeDef, typeDef);
    function unionTypeDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(unionTypeDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, unionTypeDef);
        this.wzElement = "unionTypeDef";
        // relation unionMemberType
        this.unionMemberTypes = [];
    }
    unionTypeDef.prototype.addUnionMemberType = function(name, sourceLineInfo) {
        var retval = new _md.unionMemberType(name, sourceLineInfo);
        retval.wzParent = this;
        this.unionMemberTypes.push(retval);
        return retval;
    }
    unionTypeDef.prototype.getUnionMemberType = function(name) {
        var found = null;
        this.unionMemberTypes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    unionTypeDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    unionTypeDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    unionTypeDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.unionMemberTypes.forEach(item => 
        
            items.push(item.toJson())
        )
        result['unionMemberTypes'] = items;
    }
    unionTypeDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '') {
            return this.wzLoadToChildColl(child, _md.unionMemberType, this.unionMemberTypes);
        }
        else if (name === '') {
            return this.wzLoadToChildColl(child, _md.unionMemberType, this.unionMemberTypes);
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    unionTypeDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    unionTypeDef.prototype.wzVerify = function(ctx) {
        this.unionMemberTypes.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    unionTypeDef.prototype.wzInitialize = function(ctx) {
        this.unionMemberTypes.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return unionTypeDef;
})(typeDef);

_md.unionTypeDef = unionTypeDef;
// element unionMemberType
var unionMemberType = (function (typeDef) {
    _inherits(unionMemberType, typeDef);
    function unionMemberType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(unionMemberType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, unionMemberType);
        this.wzElement = "unionMemberType";
    }
    unionMemberType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    unionMemberType.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    unionMemberType.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
    }
    return unionMemberType;
})(typeDef);

_md.unionMemberType = unionMemberType;
// element fieldDef
var fieldDef = (function (basenode) {
    _inherits(fieldDef, basenode);
    function fieldDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fieldDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fieldDef);
        this.wzElement = "fieldDef";
        this.isList = false;
        this.isRequired = false;
        this.isDeprecated = false;
        this.skip = false;
        this.include = false;
        // relation argument
        this.xarguments = [];
    }
    fieldDef.prototype.addArgument = function(name, sourceLineInfo) {
        var retval = new _md.argument(name, sourceLineInfo);
        retval.wzParent = this;
        this.xarguments.push(retval);
        return retval;
    }
    fieldDef.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    fieldDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fieldDef.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        result["isList"] = this.isList;
        result["isRequired"] = this.isRequired;
        result["isDeprecated"] = this.isDeprecated;
        result["skip"] = this.skip;
        result["include"] = this.include;
    }
    fieldDef.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.xarguments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['xarguments'] = items;
    }
    fieldDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.argument, this.xarguments);
        }
        if (name === 'skip') {
            this.skip = parseboolean(child.v, true, child); return true;
        }
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === 'islist') {
            this.isList = parseboolean(child.v, true, child); return true;
        }
        if (name === 'include') {
            this.include = parseboolean(child.v, true, child); return true;
        }
        if (name === 'isrequired') {
            this.isRequired = parseboolean(child.v, true, child); return true;
        }
        if (name === 'isdeprecated') {
            this.isDeprecated = parseboolean(child.v, true, child); return true;
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    fieldDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fieldDef.prototype.wzVerify = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    fieldDef.prototype.wzInitialize = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        var i, i_items=this.directives, i_len=this.directives.length, item;
        for (i=0; i<i_len; i++) {
            item = this.directives[i];
            if (item.wzElement === 'isList') {
                this.isList = true;
            }
            else if (item.wzElement === 'isRequired') {
                this.isRequired = true;
            }
            else if (item.wzElement === 'isDeprecated') {
                this.isDeprecated = true;
            }
            else if (item.wzElement === 'skip') {
                this.skip = true;
            }
            else if (item.wzElement === 'include') {
                this.include = true;
            }
        }
        
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return fieldDef;
})(basenode);

_md.fieldDef = fieldDef;
// element itemType
var itemType = (function (commentable) {
    _inherits(itemType, commentable);
    function itemType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(itemType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, itemType);
        this.wzElement = "itemType";
    }
    itemType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    itemType.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    itemType.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return itemType;
})(commentable);

_md.itemType = itemType;
// element arrayType
var arrayType = (function (fieldDef) {
    _inherits(arrayType, fieldDef);
    function arrayType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(arrayType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, arrayType);
        this.wzElement = "arrayType";
        // relation itemType
        this.itemType = null;
    }
    arrayType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    arrayType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    arrayType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.itemType != null) {
            result['itemType'] = this.itemType.toJson();
        }
        else {
            result['itemType'] = null;
        }
    }
    arrayType.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'itemtype') {
            return this.wzLoadOneToOne(child, _md.itemType, 'itemType');
        }
        if (name === 'item-type') {
            return this.wzLoadOneToOne(child, _md.itemType, 'itemType');
        }
        ok = _md.fieldDef.prototype.loadChild.call(this, child);
        return ok;
    }
    arrayType.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    arrayType.prototype.wzVerify = function(ctx) {
        if (this.itemType != null) {
            this.itemType.wzVerify(ctx);
        }
        _md.fieldDef.prototype.wzVerify.call(this, ctx);
    }
    arrayType.prototype.wzInitialize = function(ctx) {
        if (this.itemType != null) {
            this.itemType.wzInitialize(ctx);
        }
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'array';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return arrayType;
})(fieldDef);

_md.arrayType = arrayType;
// element enumType
var enumType = (function (fieldDef) {
    _inherits(enumType, fieldDef);
    function enumType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(enumType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, enumType);
        this.wzElement = "enumType";
    }
    enumType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    enumType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    enumType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
    }
    enumType.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'enum';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return enumType;
})(fieldDef);

_md.enumType = enumType;
// element nullType
var nullType = (function (fieldDef) {
    _inherits(nullType, fieldDef);
    function nullType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(nullType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, nullType);
        this.wzElement = "nullType";
    }
    nullType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    nullType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    nullType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
    }
    nullType.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'null';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return nullType;
})(fieldDef);

_md.nullType = nullType;
// element stringType
var stringType = (function (fieldDef) {
    _inherits(stringType, fieldDef);
    function stringType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stringType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stringType);
        this.wzElement = "stringType";
    }
    stringType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stringType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stringType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
    }
    stringType.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'String';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return stringType;
})(fieldDef);

_md.stringType = stringType;
// element intType
var intType = (function (fieldDef) {
    _inherits(intType, fieldDef);
    function intType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(intType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, intType);
        this.wzElement = "intType";
    }
    intType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    intType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    intType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
    }
    intType.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'Int';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return intType;
})(fieldDef);

_md.intType = intType;
// element floatType
var floatType = (function (fieldDef) {
    _inherits(floatType, fieldDef);
    function floatType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(floatType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, floatType);
        this.wzElement = "floatType";
    }
    floatType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    floatType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    floatType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
    }
    floatType.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'Float';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return floatType;
})(fieldDef);

_md.floatType = floatType;
// element booleanType
var booleanType = (function (fieldDef) {
    _inherits(booleanType, fieldDef);
    function booleanType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(booleanType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, booleanType);
        this.wzElement = "booleanType";
    }
    booleanType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    booleanType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    booleanType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
    }
    booleanType.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'Boolean';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return booleanType;
})(fieldDef);

_md.booleanType = booleanType;
// element IDType
var IDType = (function (fieldDef) {
    _inherits(IDType, fieldDef);
    function IDType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(IDType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, IDType);
        this.wzElement = "IDType";
    }
    IDType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    IDType.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    IDType.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
    }
    IDType.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\graphql.wfschema.ittf
        */
        this.type = 'ID';
        
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return IDType;
})(fieldDef);

_md.IDType = IDType;
// element method
var method = (function (fieldDef) {
    _inherits(method, fieldDef);
    function method(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(method.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, method);
        this.wzElement = "method";
        // relation fieldDef
        this.fieldDefs = [];
        // relation selectionSet
        this.selectionSet = null;
    }
    method.prototype.getFieldDef = function(name) {
        var found = null;
        this.fieldDefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    method.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    method.prototype.toJsonProperties = function(result) {
        _md.fieldDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    method.prototype.toJsonChildren = function(result) {
        _md.fieldDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.fieldDefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fieldDefs'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    method.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.arrayType, this.fieldDefs);
        }
        if (name === 'm') {
            return this.wzLoadToChildColl(child, _md.method, this.fieldDefs);
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'id') {
            return this.wzLoadToChildColl(child, _md.IDType, this.fieldDefs);
        }
        if (name === 'int') {
            return this.wzLoadToChildColl(child, _md.intType, this.fieldDefs);
        }
        if (name === 'enum') {
            return this.wzLoadToChildColl(child, _md.enumType, this.fieldDefs);
        }
        if (name === 'null') {
            return this.wzLoadToChildColl(child, _md.nullType, this.fieldDefs);
        }
        if (name === 'float') {
            return this.wzLoadToChildColl(child, _md.floatType, this.fieldDefs);
        }
        if (name === 'string') {
            return this.wzLoadToChildColl(child, _md.stringType, this.fieldDefs);
        }
        if (name === 'boolean') {
            return this.wzLoadToChildColl(child, _md.booleanType, this.fieldDefs);
        }
        ok = _md.fieldDef.prototype.loadChild.call(this, child);
        return ok;
    }
    method.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    method.prototype.wzVerify = function(ctx) {
        this.fieldDefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.fieldDef.prototype.wzVerify.call(this, ctx);
    }
    method.prototype.wzInitialize = function(ctx) {
        this.fieldDefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.fieldDef.prototype.wzInitialize.call(this, ctx);
    }
    return method;
})(fieldDef);

_md.method = method;
_md.__tagElementMapping = { '#': 'comment', '%': 'TODO', '%list': 'isList', '%required': 'isRequired', '%deprecated': 'isDeprecated', '%skip': 'skip', '%include': 'include', 'scalar': 'scalarTypeDef', ':{': 'objectTypeDef', 'interface': 'interfaceTypeDef', 'union': 'unionTypeDef', '': 'unionMemberType', '{': 'selectionSet', '@': 'argument', '.': 'field', '...': 'fragmentSpread', '...on': 'inlineFragment', 'string': 'stringVar', 'int': 'intVar', 'float': 'floatVar', 'boolean': 'booleanVar', 'on': 'directiveLocation', '&': 'implement', '[': 'arrayType', 'enum': 'enumType', 'null': 'nullType', 'ID': 'IDType', 'm': 'method', 'item-type': 'itemType', 'itemtype': 'itemType' };
// model/replaceUnknownElement( )
var graphqlModelException = (function () {
    function graphqlModelException(message, node, instance) {
        _classCallCheck(this, graphqlModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    graphqlModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: graphqlModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return graphqlModelException;
})();

_md.graphqlModelException = graphqlModelException;
var graphqlContext = (function () {
    function graphqlContext() {
        _classCallCheck(this, graphqlContext);
        this.validationErrors = [];
    }
    graphqlContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    graphqlContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    return graphqlContext;
})();

_md.graphqlContext = graphqlContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new graphqlModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

