$group

    $if element.hasAttributesOrChildsToLoad()
    
		m loadChild
			param child
    
			$* STOP 13/6/19
            # Make test case insensitive
			var 
				decl item
				decl ok = false
				decl name = child.n.toLowerCase()
                
				decl _l = name.length
				decl _ch = name[0]
                *$

            $if verify.isNotEmpty(element.acceptAnyTag) || verify.isNotEmpty(element.super)
			    var ok = false, name = child.n.toLowerCase()
            $else
                var name = child.n.toLowerCase()

			$foreach ordered in element.choiceOrdered
			
				$* STOP 13/6/19
                if _l == ${ordered.length} && _ch == '${ordered.char}'

					$ var first = true
					$foreach choice in ordered.choices

						$if first
							if name === '${choice.test}'
								$foreach line in choice.codelines
									set ${line}
						$else
							elif name === '${choice.test}'
								$foreach line in choice.codelines
									set ${line}
					
						$ first = false;
                *$

                $ var first = true
                $foreach choice in ordered.choices

                    $if first
                        if name === '${choice.test}'
                            $foreach line in choice.codelines
                                set ${line}
                    $else
                        elif name === '${choice.test}'
                            $foreach line in choice.codelines
                                set ${line}
                
                    $ first = false;

			$foreach t in element.wildTags
			
				if name.substr(0, ${t.length - 1}) == "${t.substr(0, t.length - 1)}"
					set this[name] = child.v
					return true
		
			$foreach ttag in element.typeTags
				if verify.${ttag.method}(name)
					set child.v = child.n
					set child.n = '${ttag.element}'
					$foreach line in ttag.codelines
						set ${line}

			loader_callBase( &element )
		
			$if verify.isNotEmpty(element.acceptAnyTag)
		
				if !ok
                    return this.wzLoadToChildColl(child, _md.${element.acceptAnyTagId}, this.${element.acceptAnyTagCollectionId})
                    $* OLD VIA
					set item = new Any${element.acceptAnyTagId}(child.v, new wzSourceLineInfo(child.r, child.c, child.u))
					set item.wzParent = this
					set item.wzTag = name
					_ this.${element.AcceptAnyTagCollectionId}.push(item)
					_ item.loadFromNode(child)
					set ok = true
                    *$
		
			$if verify.isNotEmpty(element.acceptAnyTag) || verify.isNotEmpty(element.super)
                return ok
            $else
                return false

		m loadFromNode
			param node
		
			$* STOP 13/6/19
            var loaded = false
			var children = node.children
			foreach item in children
				set loaded = this.loadChild(item)
				if !loaded
					$if schema.unknownElementReplacer && schema.unknownElementReplacer.length > 0
						set item.v = item.n + ' ' + item.v
						set item.n = '${schema.unknownElementReplacer}'
						set loaded = this.loadChild(item)
						if !loaded
							throw new _md.${schema.wzId}ModelException("Tag not recognized: " + item.n, item, this)
					$else
						throw new _md.${schema.wzId}ModelException("Tag not recognized: " + item.n, item, this)
            *$

            _ node.children.forEach
                =>
                    param item
                    var loaded = this.loadChild(item)
                    if !loaded
                        $if schema.unknownElementReplacer && schema.unknownElementReplacer.length > 0
                            set item.v = item.n + ' ' + item.v
                            set item.n = '${schema.unknownElementReplacer}'
                            set loaded = this.loadChild(item)
                            if !loaded
                                throw new _md.${schema.wzId}ModelException("Tag not recognized: " + item.n, item, this)
                        $else
                            throw new _md.${schema.wzId}ModelException("Tag not recognized: " + item.n, item, this)