module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.ittf',
            name: 'cheatsheet',
            Name: 'Cheatsheet',
            schema: 'ittf',
            rootElement: '',
            checkSchema: false
        };
    trans( &md )
        $append imports
            var stringify = require('json-stringify-safe')
            var pretty = require('wizzi-utils').pretty
                        
            function loadCheats
                param model
                param workObj

                foreach itemTop in model.children
                    if itemTop.name !== 'element'
                        set workObj[itemTop.name] = itemTop.value
                            
                foreach itemTop in model.children
                    # loog 'name, value', itemTop.name, itemTop.value
                    if itemTop.name === 'element'
                        var elementResult
                            {
                                @ name itemTop.value
                                [ items
                        foreach itemEl in itemTop.children
                            if itemEl.name === 'item'
                                var itemResult
                                    {
                                        @ schema workObj.schema
                                        @ render 'artifact'
                                foreach item in itemEl.children
                                    if item.name === 'ittf'
                                        # loog 'item.name, toIttf(item.children[0])', item.name, toIttf(item.children[0])
                                        if item.children.length == 1
                                            if (workObj.schema === 'json' && (item.children[0].name === '{' || item.children[0].name === '[')) ||
                                                \b item.children[0].name === ittfRootFromSchema(workObj.schema) ||
                                                \b ittfRootFromSchema(workObj.schema) === 'any'
                                                # is already ok, has the correct root
                                                # ??? set itemResult[item.name] = toIttf(item.children[0])
                                                set itemResult[item.name] = toIttf(item.children[0])
                                                set itemResult[item.name + 'Wrapped'] = itemResult[item.name]
                                            else
                                                # wrap it
                                                var ittfNode
                                                    _ wrapperForSchema
                                                        @ workObj.schema
                                                foreach node in item.children
                                                    _ ittfNode.children.push
                                                        @ node
                                                set itemResult[item.name] = toIttf(item.children[0])
                                                set itemResult[item.name + 'Wrapped'] = toIttf(ittfNode)
                                        else
                                            # wrap them
                                            var ittfNode
                                                _ wrapperForSchema
                                                    @ workObj.schema
                                            foreach node in item.children
                                                _ ittfNode.children.push
                                                    @ node
                                            set itemResult[item.name] = toIttf(item.children)
                                            set itemResult[item.name + 'Wrapped'] = toIttf(ittfNode)
                                    else
                                        set itemResult[item.name] = item.value
                                        $$ loogitem.name, item.value
                                _ elementResult.items.push
                                    @ itemResult
                                _ workObj._all_items.push
                                    @ itemResult
                            else
                                set elementResult[itemEl.name] = itemEl.value
                        _ workObj.elements.push
                            @ elementResult
                
                var dump
                    _ stringify
                        @ workObj
                        @ null
                        @ 2
                # loog 'loadCheats, _all_items.length', workObj._all_items.length
                # loog 'loadCheats, workObj\n', dump
                
            function generateArtifacts
                param ctx
                param workObj
                param callback_main

                var counter = 0
                _ async.mapSeries
                    @ workObj._all_items
                    function
                        param item
                        param callback
                        log 'counter', ++counter
                        _ process.nextTick
                            function
                                _ pretty.prettifyIttfHtmlFromString
                                    @ item.ittfWrapped
                                    a_cb( pretty )
                                        set item.ittfPretty = pretty
                                        # loog 'pretty', pretty
                                        # loog 'ittf.cheatsheet.ctx', ctx
                                        # loog 'counter.prettified', counter
                                        if item.render === 'script'
                                            # loog 'ctx.wizziFactory.loadMTreeBuildupScriptFromText', ctx.wizziFactory.loadMTreeBuildupScriptFromText
                                            _ ctx.wizziFactory.loadMTreeBuildupScriptFromText
                                                @ item.ittfWrapped
                                                {
                                                a_cb_no_throw(script)
                                                    # loog 'counter', --counter
                                                    if err
                                                        set item.generated = '\n' + verify.htmlEscape(stringify(err, null, 2))
                                                    else
                                                        set item.generated = '\n' + verify.htmlEscape(script.mTreeBuildUpScript)
                                                    _ callback
                                                        @ null
                                        else
                                            # loog 'ctx.wizziFactory.loadModelAndGenerateArtifactFromText', ctx.wizziFactory.loadModelAndGenerateArtifactFromText, artifactNameFromSchema(item.schema)
                                            _ ctx.wizziFactory.loadModelAndGenerateArtifactFromText
                                                @ item.ittfWrapped
                                                {
                                                    { artifactRequestContext
                                                        @ noUseStrict true
                                                        @ noGeneratorComments true
                                                @ artifactNameFromSchema(item.schema)
                                                a_cb_no_throw(artifactText)
                                                    # loog 'err, artifactText', err, artifactText
                                                    # loog 'counter', --counter
                                                    if err
                                                        set item.generated = '\n' + verify.htmlEscape(stringify(err, null, 2))
                                                    else
                                                        set artifactText = verify.htmlEscape(artifactText)
                                                        set item.generated = '\n' + artifactText
                                                    _ callback
                                                        @ null
                    a_cb()
                        var dump
                            _ stringify
                                @ workObj
                                @ null
                                @ 2
                        log 'workObj final\n', dump
                        log 'Ending transform ittf/cheatsheet'
                        _ callback_main
                            @ null
                            {
                                @ schema workObj.schema
                                @ elements workObj.elements

            function toIttf
                param node
                var buffer
                    [ 
                if verify.isArray(node)
                    foreach item in node
                        if item.children
                            _ _toIttfNodeDeep(item, 0, buffer)
                        else
                            _ item.nodes.forEach
                                function 
                                    param node
                                    _ _toIttfNodeDeep(node, 0, buffer)

                else
                    if node && node.children
                        _ _toIttfNodeDeep(node, 0, buffer)
                    else
                        _ node.nodes.forEach
                            function 
                                param node
                                _ _toIttfNodeDeep(node, 0, buffer)
                return buffer.join('\n')

            function _toIttfNodeDeep
                param node
                param indent
                param buffer
                if node.name
                    _ buffer.push
                        @ spaces(indent * 4) + node.name + ' ' + (node.value || '')
                else
                    _ buffer.push
                        @ spaces(indent * 4) + node.n + ' ' + (node.v || '')
                foreach child in node.children
                    _ _toIttfNodeDeep(child, indent + 1, buffer)

            function spaces
                param num
                return 
                    _ Array(num + 1)
                        ._ join(" ")

            function wrapperForSchema
                param schema
                if schema === 'js' || schema === 'jsx'
                    return
                        {
                            @ n 'module'
                            [ children
                                {
                                    @ n 'kind'
                                    @ v 'react'
                                    [ children
                elif schema === 'ts'
                    return
                        {
                            @ n 'module'
                            [ children
                else
                    return
                        {
                            @ n schema
                            [ children

            var schemaArtifactMap
                {
                    @ js 'js/module'
                    @ jsx 'js/module'
                    @ ts 'ts/module'
                    @ html 'html/document'
                    @ css 'css/document'
                    @ scss 'scss/document'
                    @ svg 'svg/document'
                    @ vtt 'vtt/document'
                    @ md 'md/document'
                    @ vue 'vue/document'
                    @ graphql 'graphql/document'
                    @ json 'json/document'
                    @ yaml 'yaml/document'
                    @ ittf 'ittf/document'
                    @ xml 'xml/document'
                    @ text 'text/document'

            function artifactNameFromSchema
                param schema
                # loog 'artifactNameFromSchema', schema, schemaArtifactMap[schema]
                return schemaArtifactMap[schema]

            var schemaIttfRootMap
                {
                    @ js 'module'
                    @ jsx 'module'
                    @ html 'html'
                    @ css 'css'
                    @ scss 'scss'
                    @ svg 'svg'
                    @ md 'md'
                    @ vtt 'vtt'
                    @ vue 'vue'
                    @ graphql 'graphql'
                    @ json '{'
                    @ yaml 'yaml'
                    @ ittf 'any'
                    @ text 'text'
                    @ xml 'xml'

            function ittfRootFromSchema
                param schema
                # loog 'ittfRootFromSchema', schema, schemaIttfRootMap[schema]
                return schemaIttfRootMap[schema]

        $append main
            # loog 'Starting transform ittf/cheatsheet'
            var workObj
                {
                    [ elements
                    [ _all_items

            _ loadCheats
                @ model
                @ workObj
            log 'main.loadCheats.done'

            _ generateArtifacts
                @ ctx
                @ workObj
                a_cb( result )
                    log 'main.generateArtifacts.result', result
                    _ callback
                        @ null
                        @ result

    function doitem
        param parent
        param resultObj
        var f = functors[parent.wzElement]
        if f
            _ f
                @ parent
                @ resultObj
    var functors = {}
