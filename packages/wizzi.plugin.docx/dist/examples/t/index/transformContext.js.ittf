$group

    function transformContext
        param beba
        param callback

        _ async.mapSeries
            @ beba.items
            =>
                param item
                param callback
                # BAX var itemTesto = setSpaces(item.Testo)
                var itemTesto = item.Testo
                # log 'transformBeba.text', '|' + itemTesto + '|'
                _ wizziTools.wizzify_mtree_html
                    @ itemTesto
                    {
                    f_cb_throw( mtree )
                        _ transformMTree
                            @ mtree
                        set item.TestoJson = mtree
                        # log 'transformBeba.mtree.to json'
                        $$ _ dumpIttfJson
                        $$    @ mtree
                        r_cb( mtree )
                        
                        $* VIA
                        _ wizziTools.htmlwizzifier.getWizziIttf
                            @ itemTesto
                            {
                            f_cb_throw( ittf )
                                # log 'transformBeba', ittf
                                _ loadModelAndGenerateArtifactFromText
                                    @ ittf
                                    {
                                    @ 'ittf/tojson'
                                    a_cb( artifactText )
                                        # log 'transformBeba.item.NWS_FK_TNW_ID', item.NWS_FK_TNW_ID
                                        set item.TestoJson = JSON.parse(artifactText)
                                        # log 'transformBeba.ittf.to json'
                                        # _ dumpIttfJson
                                        #    @ item.TestoJson
                                        throw new Error('Stop for test')
                                        r_cb( artifactText )
                        *$
            f_cb()
                r_cb(beba)

    function setSpaces
        param Testo
        # _ console.log('Testo init', Testo)
        var splitted = []
        var pos = 0
        var ndx = Testo.indexOf('<a ')
        # _ console.log('ndx', ndx)
        var ctr = 0
        while ndx > -1 && ctr < 20
            set ctr++
            var txtRepl = replSpacesChecked(Testo.substring(0, ndx))
            # _ console.log('txtRepl', txtRepl)
            _ splitted.push(txtRepl)
            var a = "<a "
            var i = ndx + 3
            while i < Testo.length
                if Testo[i] == '/' && Testo[i + 1] == '>'
                    set a += '/>'
                    # _ console.log('a break', a)
                    break 
                if Testo[i] == '/' && Testo[i + 1] == 'a' && Testo[i + 2] == '>'
                    set a += '/a>'
                    # _ console.log('a break', a)
                    break 
                set a += Testo.substr(i, 1)
                set i++
            # _ console.log('a', '|' + a + '|')
            _ splitted.push(a)
            set pos = i + 3
            set Testo = Testo.substr(pos)
            # _ console.log('Testo remain', '|' + Testo + '|')
            set ndx = Testo.indexOf('<a ')
            # _ console.log('ndx', ndx)
        _ splitted.push
            _ replSpacesChecked
                @ Testo
        var NewTesto = splitted.join('')
        # _ console.log('Testo fin', Testo)
        # _ console.log('NewTesto', NewTesto)
        return NewTesto;

    function replSpacesChecked
        param Testo
        var txt = verify.replaceAll(Testo, ' />', '&endtag;')
        # TODOset txt = verify.replaceAll(cleanTetx(txt), ' ', '&nbsp;')
        set txt = verify.replaceAll(txt, ' ', '&nbsp;')
        return verify.replaceAll(txt, '&endtag;', ' />')

    function cleanTetx
        param Testo
        var ch
        var len = Testo.length - 2
        var buf = []
        for var i=0; i<len; i++
            set ch = Testo[i]
            _ buf.push(ch)
            if ".,;!?:".indexOf(ch) > -1 && isWhitespace(Testo[i+1]) == false
                _ buf.push(' ')
        return buf.join('')


    function cleanTetxNew
        param Testo
        var state
            {
                @ tagOpen false
                @ punct false
                [ token
        var ch
        var len = Testo.length - 1
        var buf = []
        for var i=0; i<len; i++
            set ch = Testo[i]
            if isWhitespace(ch)
                if state.tagOpen
                    # a tag with content, state.token contains tag name
                if state.punct
                    # punct is ok
            if ch == '>'
                if state.tagOpen
                    _ buf.push('<')
                    _ buf.push(state.token.join(''))
                    set state.token.length = 0
                    set state.tagOpen = false
            if ch == '<'
                set state.tagOpen = true
            if ".,;!?:".indexOf(ch) > -1
                set state.punct = true
            
            _ buf.push(ch)
            if ".,;!?:".indexOf(ch) > -1 && isWhitespace(Testo[i+1]) == false
                _ buf.push(' ')
        return buf.join('')

    function transformMTree
        param node
        $$ log 'transformMTree', node.tag, '|' + node.name + '|'
        if node.name && node.name.length > 0
            var buf = []
            var ch
            var len = node.name.length
            for var i=0; i<len; i++
                set ch = node.name.substr(i,1)
                if ch == ' '
                    _ buf.push('&nbsp;')
                    $$ log 'a'
                elif i < len - 1 && ".,;".indexOf(ch) > -1 && isLetter(node.name[i+1])
                    _ buf.push(ch)
                    _ buf.push('&nbsp;')
                    $$ log 'b'
                else
                    $$ TODO whtas the meaning of 160 (nobreaking space?) if node.name.charCodeAt(i) != 160
                    _ buf.push(ch)
                    $$ log 'c'
                $$ log i, ch, buf.length, node.name.charCodeAt(i)
            set node.value = buf.join('')
        else
            set node.value = node.name
        set node.name = node.tag
        set node.tag = null
        foreach child in node.children
            _ transformMTree
                @ child

    function isWhitespace
        param ch
        return ch == ' ' || ch == '\t' || ch == '\r ' || ch == '\n'

    function isLetter
        param str
        return str.match(/[a-zA-Z]/i)

    function dumpIttfJson
        param node
        param indent
        if node.tag
            log new Array(1+indent||1).join(' ') + (node.tag), '|' + (node.name || '') +'|'
        else
            log new Array(1+indent||1).join(' ') + (node.name), '|' + (node.value || '') +'|'
        foreach item in node.children
            _ dumpIttfJson
                @ item
                @ (indent||1) + 1

        



