module
    kind es6
    $
        var md = {
            name: 'docx',
        };

    const normal_JUSTIFIED = false
    const H2_Size = 28
    const Big_Size = 24
    const Normal_Size = 24
    const P_spacing_before = 20 * 72 * 0.05
    const P_spacing_before_h2 = 20 * 72 * 0.2
    const P_spacing_after = 20 * 72 * 0.025
    const P_spacing_after_h2 = 20 * 72 * 0.1
    
    v08/examples/plugin(&md)
        $append imports
            # var wizziTools = require('wizzi-tools')
            var wizziTools = require('../../../wizzi-tools/dist/index')

        $override requireWizzi
            var wizzi = require('../../../wizzi/dist/index')

        $append plugins
            [ items
                $$ @ './index.js'
                @ './wizzi.plugin.docx/dist/index.js'
                @ './wizzi-core/dist/index.js'
            @ pluginsBaseFolder
                _ path.resolve
                    @ __dirname
                    @ '..'
                    @ '..'
                    @ '..'
        _ executeGenerateModules
            [
                @ 'Tutti a tavola'
                @ 'NpL-NpM'
                @ 'Famiglia'
                @ 'Bambino'
                @ 'Pediatra'
                @ 'Temi caldi'
                @ 'Giochi-Movimento'

            f_cb_no_throw( result )
                if err
                    log 'docx.examples.executeGenerateModules.err', err
                    log 'docx.examples.executeGenerateModules.err.toString()', err.toString()
                    if err.inner
                        log 'docx.examples.executeGenerateModules.err.inner.toString()', err.inner.toString()
                else
                    # log 'docx.examples.executeGenerateModules.result', result
        function executeGenerateModules
            param modules
            param callback

            _ async.mapSeries
                @ modules
                =>
                    param moduleFileName
                    param callback
                    var context
                        _ file.readJSON
                            _ path.join
                                @ __dirname
                                @ 'ittf'
                                @ 'extracted'
                                @ moduleFileName + '.detail.json'
                    _ context.items.sort(sortItems)
                    # log 'context', context
                    _ transformContext
                        @ context
                        f_cb( context )
                            # log 'context', context
                            var outputPath
                                _ path.join
                                    @ __dirname
                                    @ 'dist'
                                    @ 'beba'
                                    @ moduleFileName + '.docx.js'
                            var outputPathJson
                                _ path.join
                                    @ __dirname
                                    @ 'dist'
                                    @ 'beba'
                                    @ 'test'
                                    @ moduleFileName + '.docx.json'
                            var outputPathDebugTxt
                                _ path.join
                                    @ __dirname
                                    @ 'dist'
                                    @ 'beba'
                                    @ 'test'
                                    @ moduleFileName + '.docx.debug.txt'
                            var outputPathBuildUpIttf
                                _ path.join
                                    @ __dirname
                                    @ 'dist'
                                    @ 'beba'
                                    @ 'test'
                                    @ moduleFileName + '.docx.buildup.ittf'
                            _ file.write
                                @ outputPathJson
                                _ stringify
                                    @ context
                                    @ null
                                    @ 4

                            var sb = []
                            _ buildBeginDocxIttf                            
                                @ "beba"
                                @ sb

                            _ buildHyperlinks
                                @ context
                                @ 1
                                @ sb

                            
                            _ buildIttfLine
                                @ 'section'
                                @ ''
                                @ 1
                                @ sb
                            foreach article in context.items
                                if article.NewsOrGuida == 'guida'
                                    _ buildItemDocxIttf
                                        @ article
                                        @ 2
                                        @ sb
                            var ittfText = sb.join('\n')
                            _ file.write
                                @ outputPathBuildUpIttf
                                @ ittfText
                            _ loadModelAndGenerateArtifactFromText
                                @ ittfText
                                {
                                    @ category context.category
                                @ 'docx/document'
                                f_cb( artifactText )
                                    _ file.write
                                        @ outputPath
                                        @ artifactText
                                    log 'Generated dcox script', outputPath
                                    r_cb( artifactText )
                            $*
                            _ loadMTreeDebugInfo
                                @ ittfDocumentUri
                                {
                                    @ beba context
                                f_cb( debugInfo )
                                    log 'debugInfo', debugInfo
                                    _ file.write
                                        @ outputPathDebugTxt
                                        @ debugInfo.mTreeBuildUpScript
                                    _ loadModelAndGenerateArtifact
                                        @ ittfDocumentUri + '.ittf'
                                        {
                                            @ beba context
                                            @ bebaItem context.items[0]
                                        @ 'ittf/document'
                                        a_cb( artifactText )
                                            log 'artifactText', '\n', artifactText
                                            _ file.write
                                                @ outputPathBuildUpIttf
                                                @ artifactText
                                            return
                                            _ loadModelAndGenerateArtifact
                                                @ ittfDocumentUri
                                                {
                                                    @ beba context
                                                    @ bebaItem context.items[0]
                                                @ 'docx/document'
                                                f_cb( artifactText )
                                                    _ file.write
                                                        @ outputPath
                                                        @ artifactText
                                                    _ file.write
                                                        @ outputPathJson
                                                        _ stringify
                                                            @ context
                                                            @ null
                                                            @ 4
                                                    r_cb( artifactText )
                            *$
                @ callback
            

        function sortItems
            param a
            param b
            if a.sort < b.sort
                return -1
            elif b.sort > a.sort
                return 1
            else
                return 0

        function buildBeginDocxIttf
            param moduleFileName
            param sb
            var beginFromFile
                _ file.read
                    _ path.join
                        @ __dirname
                        @ 'ittf'
                        @ moduleFileName + '_begin.docx.ittf'
            foreach line in beginFromFile.split('\n')
                _ sb.push(line)

        function buildItemDocxIttf
            param item
            param indent
            param sb
            _ buildIttfLine
                @ 'h2'
                @ item.Titolo
                @ indent
                @ sb
            _ buildAbstract
                @ 'dalla ' + item.SettimanaDal + ' alla ' + item.SettimanaAl
                @ item.Abstract
                @ indent
                @ sb
            var ctx
                {
                    [ stack
            _ preprocessTesto
                @ item.TestoJson
                @ ctx
            _ buildTestoDocxIttf
                @ item.TestoJson
                @ indent - 1
                @ sb
                @ ''
                @ ctx
            _ buildPara
                @ ''
                @ 'h2'
                @ indent
                @ sb
            _ buildIttfLine
                @ 'link-ref'
                @ 'testo_' + item.NWS_ID
                @ indent + 1
                @ sb

        function buildTestoDocxIttf
            param item
            param indent
            param sb
            param prev
            param ctx
            if item.deleted
                return
            if item.name == 'p'
                if item.alreadyIsParagraph
                    foreach child in item.children
                        _ buildTestoDocxIttf
                            @ child
                            @ indent
                            @ sb
                            @ ''
                            @ ctx
                else
                    _ buildPara
                        @ item.value
                        @ 'normal'
                        @ indent + 1
                        @ sb
                    foreach child in item.children
                        _ buildTestoDocxIttf
                            @ child
                            @ indent + 1
                            @ sb
                            @ ''
                            @ ctx
            elif item.name == 'h2' || item.name == 'ul' || item.name == 'ol'
                # log 'is ', item.name, item.needsParagraph
                if item.needsParagraph
                    _ buildPara
                        @ item.value
                        @ item.name
                        @ indent + 1
                        @ sb
                    if item.name == 'h2' && item.value && item.value.length > 0
                        _ buildIttfLine
                            @ '+'
                            @ item.value
                            @ indent + 2
                            @ sb
                        _ buildInlineStyle                            
                            @ 'h2'
                            @ indent + 3
                            @ sb
                    elif (item.name == 'ul' || item.name == 'ol') && item.value && item.value.length > 0
                        throw new Error('ul/ol with a line value not managed')
                    else
                        # TODO exclude that can have a parent not == 'p'
                        foreach child in item.children
                            _ buildTestoDocxIttf
                                @ child
                                @ (item.name == 'ul' || item.name == 'ol') ? indent + 1 : indent
                                @ sb
                                @ item.name == 'h2' ? item.name : prev
                                @ ctx
                else
                    if (item.name == 'ul' || item.name == 'ol') && item.value && item.value.length > 0
                        throw new Error('ul/ol with a line value not managed')
                    elif item.value && item.value.length > 0
                        _ buildIttfLine
                            @ '+'
                            @ item.value
                            @ indent + 1
                            @ sb
                        _ buildIttfLine
                            @ 'style'
                            @ (prev && prev.length > 0 ? '_' : '') + 'h2'
                            @ indent + 2
                            @ sb
                        if item.break
                            _ buildIttfLine
                                @ 'br'
                                @ ''
                                @ indent + 2
                                @ sb
                    else
                        foreach child in item.children
                            _ buildTestoDocxIttf
                                @ child
                                @ (item.name == 'ul' || item.name == 'ol') ? indent + 1 : indent
                                @ sb
                                @ item.name == 'h2' ? item.name : null
                                @ ctx
            elif ['strong','big'].indexOf(item.name) > -1
                if item.value && item.value.length > 0
                    _ buildIttfLine
                        @ '+'
                        @ item.value
                        @ indent + 1
                        @ sb
                    _ buildInlineStyle                            
                        @ (prev && prev.length > 0 ? prev + '_' : '') + item.name
                        @ indent + 2
                        @ sb
                    if item.break
                        _ buildIttfLine
                            @ 'br'
                            @ ''
                            @ indent + 2
                            @ sb
                    if item.children.length > 0
                        set ctx.flatten = true
                        foreach child in item.children
                            _ buildTestoDocxIttf
                                @ child
                                @ indent
                                @ sb
                                @ (prev && prev.length > 0 ? prev + '_' : '') + item.name
                                @ ctx
                else
                    foreach child in item.children
                        _ buildTestoDocxIttf
                            @ child
                            $$ @ indent + 1
                            @ indent
                            @ sb
                            @ (prev && prev.length > 0) ? prev + '_' + item.name : item.name
                            @ ctx
            elif item.name == 'br'
                # done
            elif item.name == 'li'
                _ buildIttfLine
                    @ 'li'
                    @ item.value
                    @ indent + 1
                    @ sb
                foreach child in item.children
                    _ buildTestoDocxIttf
                        @ child
                        @ indent + 1
                        @ sb
                        @ prev
                        @ ctx
            elif item.name == 'a'
                _ buildIttfLine
                    @ 'link-ref'
                    @ item.linkId
                    @ indent + 1
                    @ sb
            elif item.name == 'span'
                if item.value && item.value.length > 0
                    _ buildIttfLine
                        @ '+'
                        @ item.value
                        @ indent + 1
                        @ sb
                foreach child in item.children
                    _ buildTestoDocxIttf
                        @ child
                        @ indent + 1
                        @ sb
                        @ (prev && prev.length > 0) ? prev + '_' + item.name : item.name
                        @ ctx
                $$ TODO attributes
            elif item.name == '+'
                _ buildIttfLine
                    @ '+'
                    @ item.value
                    @ indent + 1
                    @ sb
                if prev && prev.length > 0
                    _ buildInlineStyle                            
                        @ prev
                        @ indent + 2
                        @ sb
                if item.break
                    _ buildIttfLine
                        @ 'br'
                        @ ''
                        @ indent + 2
                        @ sb
            else
                if item.name != 'html'
                    log '+++++++++++++++++++++. Unknown', item.name
                    throw new Error(item.name + '/' + item.value)
                foreach child in item.children
                    _ buildTestoDocxIttf
                        @ child
                        @ indent
                        @ sb
                        @ prev
                        @ ctx
        
        function buildAbstract
            param text1
            param text2
            param indent
            param sb
            _ buildPara
                @ ''
                @ 'h2'
                @ indent
                @ sb
            $*
            _ buildIttfLine
                @ 'tabStop'
                @ null
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'type'
                @ "LEFT"
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ 'position'
                @ 2268
                @ indent + 2
                @ sb
            *$
            _ buildIttfLine
                @ 'border'
                @ null
                @ indent + 1
                @ sb
            _ buildBorder
                @ 'top'
                @ 'single'
                @ 3
                @ 2
                @ null
                @ indent + 2
                @ sb
            _ buildBorder
                @ 'bottom'
                @ 'single'
                @ 3
                @ 2
                @ null
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ '+'
                @ 'Settimane'
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'bold'
                @ null
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ 'size'
                @ Normal_Size
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ '+'
                @ ': ' + text1
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'size'
                @ Normal_Size
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ '+'
                @ 'Abstract'
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'size'
                @ Normal_Size
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ 'bold'
                @ null
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ 'br'
                @ null
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ '+'
                @ ': ' + text2
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'size'
                @ Normal_Size
                @ indent + 2
                @ sb
        
        function buildBorder
            param position
            param type
            param size
            param space
            param color
            param indent
            param sb
            _ buildIttfLine
                @ position
                @ null
                @ indent
                @ sb
            _ buildIttfLine
                @ 'size'
                @ size
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'value'
                @ type
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'space'
                @ space
                @ indent + 1
                @ sb
            if color
                _ buildIttfLine
                    @ 'color'
                    @ color
                    @ indent + 1
                    @ sb

        function buildPara
            param text
            param type
            param indent
            param sb
            _ buildIttfLine
                @ (type == 'ul' || type == 'ol') ? type : 'p'
                @ text
                @ indent
                @ sb
            if type == 'normal' && normal_JUSTIFIED
                _ buildIttfLine
                    @ 'alignment'
                    @ 'JUSTIFIED'
                    @ indent + 1
                    @ sb
            _ buildIttfLine
                @ 'font'
                @ 'Garamond'
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'spacing'
                @ text
                @ indent + 1
                @ sb
            _ buildIttfLine
                @ 'before'
                @ type == 'h2' ? P_spacing_before_h2 : P_spacing_before
                @ indent + 2
                @ sb
            _ buildIttfLine
                @ 'after'
                @ type == 'h2' ? P_spacing_after_h2 : P_spacing_after
                @ indent + 2
                @ sb
            
        
        function buildInlineStyle
            param style
            param indent
            param sb
            _ buildIttfLine
                @ 'style'
                @ style
                @ indent
                @ sb
            if style.indexOf('strong') > -1 || style.indexOf('h2') > -1
                _ buildIttfLine
                    @ 'bold'
                    @ ''
                    @ indent
                    @ sb
            if style.indexOf('h2') > -1
                _ buildIttfLine
                    @ 'size'
                    @ H2_Size
                    @ indent
                    @ sb
            elif style.indexOf('big') > -1
                _ buildIttfLine
                    @ 'size'
                    @ Big_Size
                    @ indent
                    @ sb
            else
                _ buildIttfLine
                    @ 'size'
                    @ Normal_Size
                    @ indent
                    @ sb

        function buildIttfLine
            param tag
            param value
            param indent
            param sb
            _ sb.push
                @ new Array(1 + indent).join('\t') + tag + (value ? ' ' + value : '')

        $include index/links
        $include index/preprocess
        $include index/transformContext