module
    kind es6
    $
        var md = {
            name: 'docx',
            artifact: 'document',
        };
    v08/examples/plugin( &md )
        $append imports
            const spawn = require("child_process").spawn

        $append plugins
            [ items
                @ './index.js'
            @ pluginsBaseFolder
                _ path.resolve
                    @ __dirname
                    @ '..'
        let arg = process.argv[2]
        const moduleName = arg && arg.length > 0 ? arg : 'first'
        _ executeGenerateModules
            [
                @ moduleName
            a_cb_no_throw( result )
                if err
                    error 'docx/document.examples.executeGenerateModules.err', err
                    error 'docx/document.examples.executeGenerateModules.err.toString()', err.toString()
                    if err.inner
                        error 'docx/document.examples.executeGenerateModules.err.inner.toString()', err.inner.toString()
                else
        function executeGenerateModules
            param modules
            param callback
            _ async.mapSeries
                @ modules
                =>
                    param module
                    param callback
                    var ittfDocumentUri
                        _ path.join
                            @ __dirname
                            @ 'ittf'
                            @ module + '.docx.ittf'
                    var outputPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ 'docx'
                            @ module + '-document.g.docx'
                    _ loadModelAndGenerateArtifact
                        @ ittfDocumentUri
                        {
                        @ 'docx/document'
                        a_cb( artifactText )
                            _ file.write
                                @ outputPath
                                @ artifactText
                            const docxProcess
                                _ spawn
                                    @ 'node'
                                    [
                                        @ outputPath
                            if docxProcess.stdout 
                                _ docxProcess.stdout.on
                                    @ 'data'
                                    function
                                        param data
                                        _ printValue
                                            @ 'c stdout'
                                            _ data.toString
                                            @ 'dashes'
                            if docxProcess.stderr 
                                _ docxProcess.stderr.on
                                    @ 'data'
                                    function
                                        param data
                                        _ printValue
                                            @ 'c stderr'
                                            _ data.toString
                                            @ 'dashes'
                            _ docxProcess.on
                                @ 'message'
                                function
                                    param message
                                    info `child process message`, message
                            _ docxProcess.on
                                @ 'error'
                                function
                                    param err
                                    info `child process error`, err
                            _ docxProcess.on
                                @ 'exit'
                                function
                                    param code
                            r_cb( artifactText )
                @ callback
        example_prints( ${md.name}, 1
