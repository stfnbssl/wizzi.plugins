module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.philos',
            name: 'extended',
            schema: 'philos',
            rootElement: '',
            checkSchema: true
        };
    trans( &md )
        $append main
            var transformedModel
                {
                    [ authors
                    [ authorsGroups
                    [ fields
                    [ approaches
                    [ concepts
                    [ theories
                    [ books
                    [ articles
                    [ relations
                    { current
            foreach item in model.items
                _ doitem
                    @ item
                    @ transformedModel
            delete transformedModel.current
            delete transformedModel.ns
            foreach obj in transformedModel.fields
                _ clearConcept(obj)
            foreach obj in transformedModel.approaches
                _ clearConcept(obj)
            foreach obj in transformedModel.theories
                _ clearConcept(obj)
            foreach obj in transformedModel.concepts
                _ clearConcept(obj)
            r_cb(transformedModel)


            set transformedModel
                {
            foreach item in model.items
                _ doitem
                    @ item
                    @ transformedModel
            _ callback
                @ null
                @ transformedModel


        function doitem
            param parent
            param resultObj
            var f = functors[parent.wzElement]
            if f
                _ f
                    @ parent
                    @ resultObj

        var functors = {}

        set functors.namespace
            function
                param parent
                param resultObj
                set resultObj.ns = parent.wzName
                log 'functors.namespace'
                foreach child in parent.items
                    if child.wzElement == "author"
                        set resultObj.ns_author = child.wzName
                    else
                        _ doitem
                            @ child
                            @ resultObj
                set resultObj.ns = 'global'
                set resultObj.ns_author = 'global'

        set functors.getQualified
            function
                param ns
                param name
                return name.indexOf('.') > -1 ? name : (ns || 'global') + '.' + name
        
        $include author
        $include comment
        $include concept
        $include contents
        $include field
        $include school
        $include theory
        $include writing

    function createEvent
        param parent
        var eventObj = {}
        foreach item in parent.items
            if item.wzElement == "date"
                set eventObj.date = item.wzName
            elif item.wzElement == "place"
                set eventObj.place = item.wzName
        return eventObj

    function addContribution
        param parent
        param fromObj
        param resultObj

        var contrib = {}
            {
                @ kind null
                @ id null
                [ opinions
                [ contents
        foreach item in parent.items
            if ['field', 'approach', 'theory', 'concept'].indexOf(item.wzElement) > -1
                set contrib.kind = item.wzElement
                set contrib.id = item.wzName
                foreach child in item.items
                    if !fillContents(child, contrib, resultObj)
                    elif child.wzElement == 'opinionof'
                        _ contrib.opinions.push
                            @ child
            elif item.wzElement == 'opinionof'
                _ contrib.opinions.push
                    @ item.toJson()
        _ fromObj.contributionsto.push(contrib)

    function addRelated
        param parent
        param fromObj
        param resultObj

        var related = {}
            {
                @ kind null
                @ id null
                [ opinions
                [ contents
        foreach item in parent.items
            if ['field', 'approach', 'theory', 'concept'].indexOf(item.wzElement) > -1
                set related.kind = item.wzElement
                set related.id = item.wzName
                foreach child in item.items
                    if !fillContents(child, related, resultObj)
                    elif child.wzElement == 'opinionof'
                        _ related.opinions.push
                            @ child
            elif item.wzElement == 'opinionof'
                _ related.opinions.push
                    @ item.toJson()
        _ fromObj.relatedsto.push(related)


    function addFounded
        param resultObj
        param authorId
        param kind
        param id
        foreach item in resultObj.authors
            if item.id == authorId
                foreach found in item.foundations
                    if found.kind == kind && found.id == id
                        return
                if !item.foundations
                    set item.foundations = []
                _ item.foundations.push
                    {
                        @ kind kind
                        @ id id
                return

