/*
    artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.wzschema\lib\artifacts\wzschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Fri, 30 Aug 2024 16:41:06 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('@wizzi/utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var labBase = (function () {
    function labBase(name, sourceLineInfo) {
        _classCallCheck(this, labBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    labBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    labBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    labBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    labBase.prototype.wzVerify = function() {
    }
    labBase.prototype.wzInitialize = function() {
    }
    labBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    labBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    labBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    labBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    labBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    labBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    labBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    labBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    labBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    labBase.prototype.error = function(message, node) {
        throw new _md.labModelException(message, node, this);
    }
    return labBase;
})();

_md.labBase = labBase;

// element node
var node = (function (labBase) {
    _inherits(node, labBase);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
        // relation node
        this.nodes = [];
    }
    node.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    node.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    node.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'lab') {
            return this.wzLoadToChildColl(child, _md.lab, this.nodes);
        }
        if (name === '::md') {
            return this.wzLoadToChildColl(child, _md.mdInclude, this.nodes);
        }
        if (name === 'node') {
            return this.wzLoadToChildColl(child, _md.node, this.nodes);
        }
        if (name === 'comment') {
            return this.wzLoadToChildColl(child, _md.comment, this.nodes);
        }
        return false;
    }
    node.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.labModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        }
        )
    }
    node.prototype.wzVerify = function(ctx) {
        this.nodes.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.labBase.prototype.wzVerify.call(this, ctx);
    }
    node.prototype.wzInitialize = function(ctx) {
        this.nodes.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.labBase.prototype.wzInitialize.call(this, ctx);
    }
    return node;
})(labBase);

_md.node = node;
// element comment
var comment = (function (node) {
    _inherits(comment, node);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    return comment;
})(node);

_md.comment = comment;
// element lab
var lab = (function (node) {
    _inherits(lab, node);
    function lab(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(lab.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, lab);
        this.wzElement = "lab";
        // relation child
        this.childs = [];
    }
    lab.prototype.addChild = function(name, sourceLineInfo) {
        var retval = new _md.child(name, sourceLineInfo);
        retval.wzParent = this;
        this.childs.push(retval);
        return retval;
    }
    lab.prototype.getChild = function(name) {
        var found = null;
        this.childs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    lab.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'child') {
            return this.wzLoadToChildColl(child, _md.child, this.childs);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    lab.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.labModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        }
        )
    }
    lab.prototype.wzVerify = function(ctx) {
        this.childs.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    lab.prototype.wzInitialize = function(ctx) {
        this.childs.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return lab;
})(node);

_md.lab = lab;
// element child
var child = (function (labBase) {
    _inherits(child, labBase);
    function child(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(child.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, child);
        this.wzElement = "child";
    }
    child.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'desc') {
            this.desc = child.v; return true;
        }
        return false;
    }
    child.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.labModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        }
        )
    }
    return child;
})(labBase);

_md.child = child;
// element mdInclude
var mdInclude = (function (node) {
    _inherits(mdInclude, node);
    function mdInclude(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mdInclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mdInclude);
        this.wzElement = "mdInclude";
        this.md_md_items = [];
    }
    mdInclude.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'md') {
            // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
            this.md_md_items.push(child);
            var err, wizziModel;
            this.wzRoot().wzFactory.loadModelFromMtree( //;
                'md',  //;
                { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                function(cberr, cbwizziModel) { //;
                    err = cberr;
                    wizziModel = cbwizziModel;
                });
            this.get_md = function(callback) { //;
                // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                var iv = setInterval(function() { //;
                    if (err || wizziModel) { //;
                        clearInterval(iv);
                        if (callback) { //;
                            callback(err, wizziModel);
                            callback = null;
                        } //;
                    } //;
                }, 100);
            };
            return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    mdInclude.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.labModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        }
        )
    }
    return mdInclude;
})(node);

_md.mdInclude = mdInclude;
/**
    element modelCollection
     Single items of a collection contained in a "model" may act as data contexts
     of artifacts where each collection item generates a separate artifact.
     This element, contained in a "modelRef" element, specifies:
     . the collection name: the IttfNodeValue of this element
     . the export name of the collection item when acting as a context property: the "item-name" attribute
     . the property names of the collection item that will be used to build the destination path
     of the artifact: the "pathTemplateValues" child elements
*/
var modelCollection = (function (labBase) {
    _inherits(modelCollection, labBase);
    function modelCollection(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelCollection.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelCollection);
        this.wzElement = "modelCollection";
        // The export name of a collection item when acting as a context property.
        // relation pathTemplateValue
        this.pathTemplateValues = [];
        // relation comment
        this.comments = [];
    }
    modelCollection.prototype.addPathTemplateValue = function(name, sourceLineInfo) {
        var retval = new _md.pathTemplateValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.pathTemplateValues.push(retval);
        return retval;
    }
    modelCollection.prototype.getPathTemplateValue = function(name) {
        var found = null;
        this.pathTemplateValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelCollection.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    modelCollection.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelCollection.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'comment') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'item-name') {
            this.itemName = child.v; return true;
        }
        else if (name === 'item_name') {
            this.itemName = child.v; return true;
        }
        if (name === 'pathtemplatevalue') {
            return this.wzLoadToChildColl(child, _md.pathTemplateValue, this.pathTemplateValues);
        }
        if (name === 'path-template-value') {
            return this.wzLoadToChildColl(child, _md.pathTemplateValue, this.pathTemplateValues);
        }
        return false;
    }
    modelCollection.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.labModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        }
        )
    }
    modelCollection.prototype.wzVerify = function(ctx) {
        this.pathTemplateValues.forEach(item => 
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.labBase.prototype.wzVerify.call(this, ctx);
    }
    modelCollection.prototype.wzInitialize = function(ctx) {
        this.pathTemplateValues.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.labBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelCollection;
})(labBase);

_md.modelCollection = modelCollection;
// element pathTemplateValue
var pathTemplateValue = (function (labBase) {
    _inherits(pathTemplateValue, labBase);
    function pathTemplateValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pathTemplateValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pathTemplateValue);
        this.wzElement = "pathTemplateValue";
        /**
             The property of the context object (a collection item) containing the value which will replace
             the "token" value in the generated artifact path template.
             Is alternative to "function"
        */
        /**
             The function of the context object (a collection item) that returns the value which will replace
             the "token" value in the generated artifact path template.
             Is alternative to "attribute"
        */
        /**
             The token that will be replaced by the value returned accessing "attribute" or calling "function"
             on a context object.
        */
        // relation comment
        this.comments = [];
    }
    pathTemplateValue.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    pathTemplateValue.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    pathTemplateValue.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'token') {
            this.token = child.v; return true;
        }
        if (name === 'comment') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'function') {
            this.function = child.v; return true;
        }
        if (name === 'attribute') {
            this.attribute = child.v; return true;
        }
        return false;
    }
    pathTemplateValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                item.v = item.n + ' ' + item.v;
                item.n = 'text';
                loaded = this.loadChild(item);
                if (!loaded) {
                    throw new _md.labModelException("Tag not recognized: " + item.n, item, this);
                }
            }
        }
        )
    }
    pathTemplateValue.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.labBase.prototype.wzVerify.call(this, ctx);
    }
    pathTemplateValue.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.labBase.prototype.wzInitialize.call(this, ctx);
    }
    return pathTemplateValue;
})(labBase);

_md.pathTemplateValue = pathTemplateValue;
_md.__tagElementMapping = { '::md': 'mdInclude', 'path-template-value': 'pathTemplateValue', 'pathtemplatevalue': 'pathTemplateValue' };
// model/replaceUnknownElement( )
var labModelException = (function () {
    function labModelException(message, node, instance) {
        _classCallCheck(this, labModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    labModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: labModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return labModelException;
})();

_md.labModelException = labModelException;
var labContext = (function () {
    function labContext() {
        _classCallCheck(this, labContext);
        this.validationErrors = [];
    }
    labContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    labContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    return labContext;
})();

_md.labContext = labContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}