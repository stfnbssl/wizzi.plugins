$group 

    $*
        This file contains 
        the data structures
        of the sample winsock/accept/server.
        see https://github.com/microsoft/Windows-classic-samples/tree/main/Samples/Win7Samples/netds/winsock/accept/server/common.h
    *$
    /*
        This structure defines the contents of the data buffer 
        that'll be used to store the messages that are received from and sent to the client.
    typedef struct _DATA_BUFFER
    {
        char buf[RECV_DATA_SIZE];  // the data buffer
        int  dataSize;             // length of the actual data present
        int  sendOffset;           // position of the next byte in buf to be sent
        BOOL bufNotFullySent;      // TRUE if buf has been fully sent
    } DATA_BUFFER;
    +
    /*
        This structure holds the information for each socket the server creates.
        The server maintains a list of these structures and operates on them.
    typedef struct _SOCK_INFO
    {
        SOCKET sock;                // socket handle
        BOOL   isSocketListening;   // TRUE if the socket is listening
        struct _SOCK_INFO *prev,    // previous structure in the list
                          *next;    // next structure in the list
        DATA_BUFFER recdData;       // details of data buffer that's recd/sent
        int     nTotalRecd;         // total number of bytes recd so far
        int     nTotalSent;         // total number of bytes sent so far
        BOOL    isFdCloseRecd;      // TRUE if FD_CLOSE event was received
    } SOCK_INFO, *PSOCK_INFO;
    +
    /*
        This structure bundles all the global variables needed between different functions into a global context.
    typedef struct _AcceptContext
    {
        BYTE    addressFamily;      // Address Family requested
        char    *szInterface;       // Interface to listen on
        char    *szPort;            // Port to listen on
        BYTE    typeOfAccept;       // Which type of accept should be done
        SOCK_INFO *pSockList;       // List of the listening/accepted sockets
        HWND    hAcceptWindow;      // Handle to the hidden accept window
    } AcceptContext;
    +

    $*
    // This is the only global variable that'll be used throughout the server module.
    extern AcceptContext g_AcceptContext;
    +
    // functions defined in SockInfo.cpp
    PSOCK_INFO AllocAndInitSockInfo();
    void FreeSockInfo(PSOCK_INFO pSockInfo);
    void AddSockInfoToList(PSOCK_INFO *ppHead, PSOCK_INFO pNewSockInfo);
    void DeleteSockInfoFromList(PSOCK_INFO *ppHead, PSOCK_INFO pDelSockInfo);
    +
    // functions exported from Common.cpp
    void PrintAddressString(LPSOCKADDR pSockAddr, DWORD dwSockAddrLen);
    void CreateListeningSockets();
    void DestroyListeningSockets();
    PSOCK_INFO ProcessAcceptEvent(PSOCK_INFO pSockInfo);
    BOOL ProcessReadEvent(PSOCK_INFO pSockInfo);
    BOOL SendData(PSOCK_INFO pSockInfo);
    +
    // functions exported from NBAccept.cpp
    void NonBlockingAcceptMain();
    +
    // functions exported from ASAccept.cpp
    void AsyncSelectAcceptMain();
    +
    *$