module wizzi.plugins.c.lib.artifacts.module.gen.writers.index
	kind es6
	+
	var myname = 'wizzi.plugins.c.lib.artifacts.module.gen.writers.index'
	+
    var verify = require('wizzi-utils').verify
	+
	var xfunction = require('./function')
    var set = require('./set')
    var control = require('./control')
    var debug = require('./debug')
	+
	var md = module.exports = {}
	set md.statementsContainer = {}
    
    set md.statementsContainer.codeline
        function
            param model
            param ctx
            param callback
            _ ctx.w(model.wzTag + ' ' + model.wzName)
            _ md.genItems(model.statements, ctx, callback)    
    
    set md.statementsContainer.statement
        function
            param model
            param ctx
            param callback
            _ ctx.w('// ' + model.wzName)
            _ md.genItems(model.statements, ctx, callback)    
    
    set md.statementsContainer.plusline
        function
            param model
            param ctx
            param callback
            _ ctx.w(model.wzName)
            _ md.genItems(model.statements, ctx, callback)    
    
    set md.statementsContainer.multilinecomment
        function
            param model
            param ctx
            param callback
            _ ctx.w(model.wzTag + ' ' + model.wzName)
            _ ctx.indent
            _ md.writeLinesTreeAsIs
                @ model
                @ ctx
            _ ctx.deindent
            _ ctx.w('*/')
            r_cb()
	
    set md.writeLinesTreeAsIs
		function
			param model
			param ctx
            foreach item in model.statements
                _ ctx.w(item.wzTag + ' ' + item.wzName)
                _ ctx.indent
                _ md.writeLinesTreeAsIs
                    @ item
                    @ ctx
                _ ctx.deindent

    set md.gen
		function
			param model
			param ctx
			param callback
			_ md.genItem(model, ctx, callback)

	set md.genMany
		function
			param models
			param ctx
			param callback

            var item_count = 0
            iife next
                var item = models[item_count++]
                if !item
                    r_cb()
				_ md.genItem
					@ item
					@ ctx
					a_cb()
						_ next

	set md.genItem
		function
			param model
			param ctx
			param callback
			
            var stm = md.statementsContainer[model.wzElement]
            if stm
                _ stm(model, ctx, callback)
            else 
                error myname + '. Unknown statement tag/element: ' + model.wzTag + '/' + model.wzElement, model
                return
                    _ callback
                        _ ctx.error(myname + '. Unknown statement tag/element: ' + model.wzTag + '/' + model.wzElement, model)
	
	set md.genItemAs
		function
			param model
			param asWzElement
			param ctx
			param callback

			var save = model.wzElement
			set model.wzElement = asWzElement
			_ md.genItem
				@ model
				@ ctx
				a_cb()
					set model.wzElement = save
					r_cb()

	set md.genItems
		function
			param statements
			param ctx
			param options
			param callback

			if typeof callback === 'undefined'
				set callback = options
				set options = {}

			var
				decl opt = options || {}
				decl from = opt.from || 0
                decl sep = opt.sep
				decl indent = typeof opt.indent === 'undefined' ? true : opt.indent
				decl first = true

			if indent
				_ ctx.indent()

            var item_count = 0
            iife next
                var item = statements[item_count++]
                if !item
					if indent
						_ ctx.deindent()
                    r_cb()
				if sep && !first
					_ ctx.write(sep)
				_ md.genItem
					@ item
					@ ctx
					a_cb()
                        set first = false
						_ next
    set md.isTopStatement
        function
            param model
            if !model.wzParent
                return true
            var prnElement = model.wzParent.wzElement
            return notTopElement.indexOf(prnElement) < 0
    set md.withSemicolon
        function
            param text
            return text.endsWith(';') ? text : text + ';'                        
    set md.getFirstChildren
        function
            param model
            param elements
            set elements = elements || []
            if model.statements && model.statements.length > 0
                foreach stm in model.statements
                    if elements.indexOf(stm.wzElement) > -1
                        return stm
            return null
    +
    var notTopElement
        [
            @ 'set'
            @ 'call'
            @ 'object'
            @ 'array'
	+
	_ xfunction.loadStatementWriters(md)
    _ set.loadStatementWriters(md)
    _ control.loadStatementWriters(md)
    _ debug.loadStatementWriters(md)
	+
