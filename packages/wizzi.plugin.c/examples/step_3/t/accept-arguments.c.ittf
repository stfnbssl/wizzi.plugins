$group
    $*
        This file contains 
        the functions for parsing the command-line arguments 
        of the sample winsock/accept/server.
        see https://github.com/microsoft/Windows-classic-samples/tree/main/Samples/Win7Samples/netds/winsock/accept/server/main.cpp
    *$

    /*
        Converts a given address family into its corresponding string representation for display purposes.
    function *__AFImage
        param BYTE addressFamily
        rtype const char
        char *szRetVal;
        // return the printable string equivalent of the corresponding address family.
        switch addressFamily
            case AF_UNSPEC
                szRetVal = "AF_UNSPEC";
                break;
            case AF_INET
                szRetVal = "AF_INET";
                break;
            case AF_INET6
                szRetVal = "AF_INET6";
                break;
            default
                szRetVal = "Unrecognized";
                break;
        return szRetVal;
    +
    /*
        This function converts a given type of accept into its corresponding string representation for display purposes.
    function *__AcceptTypeImage
        param BYTE typeOfAccept
        rtype const char
        char *szRetVal;
        // return a string equivalent of the accept type for displaying to the user of his choices.
        switch typeOfAccept
            case NON_BLOCKING_ACCEPT
                szRetVal = "NON_BLOCKING_ACCEPT";
                break;
            case ASYNC_SELECT_ACCEPT
                szRetVal = "ASYNC_SELECT_ACCEPT";
                break;
            default
                szRetVal = "Unrecognized";
                break;
        return szRetVal;
    +
    /*
        This function prints the available command-line options, 
        the arguments expected by each of them 
        and the valid input values 
        and the default values for each them.
    function PrintUsage
        param char *szProgramName
        printf ("\n\n"
            "Usage:\n"
            "------\n"
            "   %s <options> \n\n"
            "where <options> is one or more of the following: \n\n"
            "   -a <0|4|6>      Address Family: 0 for Either\n"
            "                                   4 for IPv4\n"
            "                                   6 for IPv6\n"
            "                   Default: %d\n\n"
            "   -i <interface>  Interface address\n"
            "                   Default: %s\n\n"
            "   -e <endpoint>   Port number\n"
            "                   Default: %s\n\n"
            "   -t <1|2>        Type of Accept: 1 for Non-blocking accept\n"
            "                                   2 for Accept with WSAAsyncSelect\n"
            "                   Default: %d\n\n"
            "\n",
            szProgramName,
            DEFAULT_ADDRESS_FAMILY,
            ( DEFAULT_INTERFACE == NULL ? "NULL" : DEFAULT_INTERFACE),
            DEFAULT_PORT,
            DEFAULT_TYPE_OF_ACCEPT
        );
        return;
    +
    /*
        Parses the given input arguments 
        and fills up the corresponding fields in the g_AcceptContext structure.
    function ParseArguments
        param int argc
        param char *argv[]
        rtype BOOL
        /*
            holds the return value from this function.
            TRUE indicates that all the supplied arguments are valid. 
            FALSE indicates incorrect or insufficient number of arguments.
        BOOL retVal = FALSE;
        +
        // loop index to go over the command-line arguments one by one.
        int i;
        +
        info "Entering ParseArguments()\n"
        +
        // fill up the default arguments and let the user options override these.
        g_AcceptContext.addressFamily = DEFAULT_ADDRESS_FAMILY;
        g_AcceptContext.szInterface = DEFAULT_INTERFACE;
        g_AcceptContext.szPort = DEFAULT_PORT;
        g_AcceptContext.typeOfAccept = DEFAULT_TYPE_OF_ACCEPT;
        +        
        // process each argument in the argv list.
        for i = 1; i < argc ; i++
            char firstChar = argv[i][0];
            // make sure the option begins with a hyphen or a forward slash.
            if !(firstChar == '-' || firstChar == '/')
                error "ERROR: Option has to begin with - or / : %s\n", argv[i]
                PrintUsage (argv[0]);
                goto CLEANUP;
            // process the option.
            switch argv[i][1]
                case 'a'
                    // Address Family. 
                    // should be -a 0 or -a 4 or -a 6
                    // first check if there's one more argument.
                    if i + 1 >= argc
                        error "ERROR: Argument 0/4/6 needed for -a option\n"
                        PrintUsage (argv[0]);
                        goto CLEANUP;
                    // extract and validate the AF number.
                    switch atoi(argv[i+1])
                        // Unspecified. 
                        case 0
                            g_AcceptContext.addressFamily = AF_UNSPEC;
                            break;
                        // IPv4.
                        case 4
                            g_AcceptContext.addressFamily = AF_INET;
                            break;                      
                        // IPv6.
                        case 6
                            g_AcceptContext.addressFamily = AF_INET6;
                            break;                      
                        // Invalid value.
                        default
                            error "ERROR: Invalid address family. Must be 0/4/6\n"
                            PrintUsage (argv[0]);
                            goto CLEANUP;
                    // indicate that we have processed the next argument as well.
                    i++; 
                    // AF was fine. continue.
                    break;
                case 'i'
                    // Interface to listen on.
                    // should be -i <interface>
                    // first check if there's one more argument.
                    if i + 1 >= argc
                        error "ERROR: Interface needed for -i option\n"
                        PrintUsage (argv[0]);
                        goto CLEANUP;
                    // make sure the input string length is less than
                    // the INET6_ADDRSTRLEN, the maximum valid IP address length.
                    if FAILED(StringCchLength(argv[i+1],INET6_ADDRSTRLEN, NULL))
                        error "ERROR: Interface string too long. can't exceed %d characters\n", INET6_ADDRSTRLEN
                        PrintUsage (argv[0]);
                        goto CLEANUP;
                    +
                    // remember the interface string.
                    g_AcceptContext.szInterface = argv[i+1];
                    // indicate that we have processed the next argument as well.
                    i++; 
                    // continue.            
                    break;
                case 'e'
                    // Endpoint or Port.
                    // should be -e <port number>
                    // first check if there's one more argument.
                    if i + 1 >= argc
                        error "ERROR: Port number needed for -e option\n"
                        PrintUsage (argv[0]);
                        goto CLEANUP;
                    // make sure the input string length is less than the maximum length for a service name.
                    if FAILED(StringCchLength(argv[i+1], NI_MAXSERV, NULL))
                        error "ERROR: Port number too long. can't exceed %d characters\n", NI_MAXSERV
                        PrintUsage (argv[0]);
                        goto CLEANUP;
                    +
                    // remember the port number string.
                    g_AcceptContext.szPort = argv[i+1];
                    // indicate that we have processed the next argument as well.
                    i++; 
                    // continue.            
                    break;
                case 't' 
                    // Type of Accept.
                    // should be -t 1 or -t 2
                    // first check if there's one more argument.
                    if i + 1 >= argc
                        error "ERROR: Argument 1 or 2 needed for -t option\n"
                        PrintUsage (argv[0]);
                        goto CLEANUP;
                    // extract the type value
                    g_AcceptContext.typeOfAccept = (BYTE) atoi(argv[i+1]);
                    // indicate that we have processed the next argument as well.
                    i++; 
                    // validate the accept type.
                    if !(g_AcceptContext.typeOfAccept == 1 || g_AcceptContext.typeOfAccept == 2)
                        error "ERROR: Invalid accept type: %d. Must be 1 or 2\n", g_AcceptContext.typeOfAccept
                        PrintUsage (argv[0]);
                        goto CLEANUP;
                    // Accept type was fine. continue.
                    break;

                // help
                case 'h' 
                case '?'
                    PrintUsage (argv[0]);
                    goto CLEANUP;                        
                default 
                    error "ERROR: Unrecognized option: %s\n", argv[i]
                    PrintUsage (argv[0]);
                    goto CLEANUP;                        

        /*
            echo the final list of values that'll be used.
            remember, these need not be the same as the input arguments.
            rather, this is what we'll use inside our program.
        
        info "Parsed input arguments. The following values will be used : \n"
        info "\tAddress Family = %s\n", __AFImage(g_AcceptContext.addressFamily)
        info "\tInterface = %s\n",g_AcceptContext.szInterface
        info "\tPort = %s\n", g_AcceptContext.szPort
        info "\tType of Accept = %s\n", __AcceptTypeImage(g_AcceptContext.typeOfAccept)  
        // all went well, signal that we can proceed.
        retVal = TRUE;
        +
        label CLEANUP
            info "Exiting ParseArguments()\n"
            return retVal;
    +
