/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    package: wizzi-js@0.7.13
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var cBase = (function () {
    function cBase(name, sourceLineInfo) {
        _classCallCheck(this, cBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    cBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    cBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    cBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    cBase.prototype.wzVerify = function() {
    }
    cBase.prototype.wzInitialize = function() {
    }
    cBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    cBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    cBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    cBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    cBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    cBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    cBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    cBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    cBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    cBase.prototype.error = function(message, node) {
        throw new _md.cModelException(message, node, this);
    }
    return cBase;
})();

_md.cBase = cBase;

// element statement
var statement = (function (cBase) {
    _inherits(statement, cBase);
    function statement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(statement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, statement);
        this.wzElement = "statement";
        // relation statement
        this.statements = [];
    }
    statement.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    statement.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    statement.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.plusline, this.statements);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.argProp, this.statements);
        }
        if (name === '_') {
            return this.wzLoadToChildColl(child, _md.call, this.statements);
        }
        if (name === '//') {
            return this.wzLoadToChildColl(child, _md.statement, this.statements);
        }
        else if (name === '/*') {
            return this.wzLoadToChildColl(child, _md.multilinecomment, this.statements);
        }
        if (name === 'do') {
            return this.wzLoadToChildColl(child, _md.xdo, this.statements);
        }
        if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.xif, this.statements);
        }
        if (name === 'for') {
            return this.wzLoadToChildColl(child, _md.xfor, this.statements);
        }
        if (name === 'log') {
            return this.wzLoadToChildColl(child, _md.log, this.statements);
        }
        if (name === 'set') {
            return this.wzLoadToChildColl(child, _md.set, this.statements);
        }
        if (name === 'case') {
            return this.wzLoadToChildColl(child, _md.xcase, this.statements);
        }
        if (name === 'elif') {
            return this.wzLoadToChildColl(child, _md.elif, this.statements);
        }
        else if (name === 'else') {
            return this.wzLoadToChildColl(child, _md.xelse, this.statements);
        }
        if (name === 'info') {
            return this.wzLoadToChildColl(child, _md.info, this.statements);
        }
        if (name === 'warn') {
            return this.wzLoadToChildColl(child, _md.warn, this.statements);
        }
        if (name === 'error') {
            return this.wzLoadToChildColl(child, _md.error, this.statements);
        }
        if (name === 'label') {
            return this.wzLoadToChildColl(child, _md.label, this.statements);
        }
        if (name === 'while') {
            return this.wzLoadToChildColl(child, _md.xwhile, this.statements);
        }
        if (name === 'return') {
            return this.wzLoadToChildColl(child, _md.xreturn, this.statements);
        }
        if (name === 'switch') {
            return this.wzLoadToChildColl(child, _md.xswitch, this.statements);
        }
        if (name === 'default') {
            return this.wzLoadToChildColl(child, _md.xdefault, this.statements);
        }
        if (name === 'success') {
            return this.wzLoadToChildColl(child, _md.success, this.statements);
        }
        if (name === 'codeline') {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        if (name === 'function') {
            return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
        }
        if (!ok) {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        return ok;
    }
    statement.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.cModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    statement.prototype.wzVerify = function(ctx) {
        this.statements.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.cBase.prototype.wzVerify.call(this, ctx);
    }
    statement.prototype.wzInitialize = function(ctx) {
        this.statements.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.cBase.prototype.wzInitialize.call(this, ctx);
    }
    return statement;
})(cBase);

_md.statement = statement;
// element codeline
var codeline = (function (statement) {
    _inherits(codeline, statement);
    function codeline(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(codeline.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, codeline);
        this.wzElement = "codeline";
    }
    return codeline;
})(statement);

_md.codeline = codeline;
// element c
var c = (function (cBase) {
    _inherits(c, cBase);
    function c(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(c.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, c);
        this.wzElement = "c";
        // relation statement
        this.statements = [];
    }
    c.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    c.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    c.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.plusline, this.statements);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.argProp, this.statements);
        }
        if (name === '_') {
            return this.wzLoadToChildColl(child, _md.call, this.statements);
        }
        if (name === '//') {
            return this.wzLoadToChildColl(child, _md.statement, this.statements);
        }
        else if (name === '/*') {
            return this.wzLoadToChildColl(child, _md.multilinecomment, this.statements);
        }
        if (name === 'do') {
            return this.wzLoadToChildColl(child, _md.xdo, this.statements);
        }
        if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.xif, this.statements);
        }
        if (name === 'for') {
            return this.wzLoadToChildColl(child, _md.xfor, this.statements);
        }
        if (name === 'log') {
            return this.wzLoadToChildColl(child, _md.log, this.statements);
        }
        if (name === 'set') {
            return this.wzLoadToChildColl(child, _md.set, this.statements);
        }
        if (name === 'case') {
            return this.wzLoadToChildColl(child, _md.xcase, this.statements);
        }
        if (name === 'elif') {
            return this.wzLoadToChildColl(child, _md.elif, this.statements);
        }
        else if (name === 'else') {
            return this.wzLoadToChildColl(child, _md.xelse, this.statements);
        }
        if (name === 'info') {
            return this.wzLoadToChildColl(child, _md.info, this.statements);
        }
        if (name === 'warn') {
            return this.wzLoadToChildColl(child, _md.warn, this.statements);
        }
        if (name === 'error') {
            return this.wzLoadToChildColl(child, _md.error, this.statements);
        }
        if (name === 'label') {
            return this.wzLoadToChildColl(child, _md.label, this.statements);
        }
        if (name === 'while') {
            return this.wzLoadToChildColl(child, _md.xwhile, this.statements);
        }
        if (name === 'return') {
            return this.wzLoadToChildColl(child, _md.xreturn, this.statements);
        }
        if (name === 'switch') {
            return this.wzLoadToChildColl(child, _md.xswitch, this.statements);
        }
        if (name === 'default') {
            return this.wzLoadToChildColl(child, _md.xdefault, this.statements);
        }
        if (name === 'success') {
            return this.wzLoadToChildColl(child, _md.success, this.statements);
        }
        if (name === 'codeline') {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        if (name === 'function') {
            return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
        }
        if (!ok) {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        return ok;
    }
    c.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.cModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    c.prototype.wzVerify = function(ctx) {
        this.statements.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.cBase.prototype.wzVerify.call(this, ctx);
    }
    c.prototype.wzInitialize = function(ctx) {
        this.statements.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.cBase.prototype.wzInitialize.call(this, ctx);
    }
    return c;
})(cBase);

_md.c = c;
// element multilinecomment
var multilinecomment = (function (statement) {
    _inherits(multilinecomment, statement);
    function multilinecomment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(multilinecomment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, multilinecomment);
        this.wzElement = "multilinecomment";
    }
    return multilinecomment;
})(statement);

_md.multilinecomment = multilinecomment;
// element plusline
var plusline = (function (statement) {
    _inherits(plusline, statement);
    function plusline(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(plusline.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, plusline);
        this.wzElement = "plusline";
    }
    return plusline;
})(statement);

_md.plusline = plusline;
// element param
var param = (function (cBase) {
    _inherits(param, cBase);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
    }
    return param;
})(cBase);

_md.param = param;
// element xfunction
var xfunction = (function (statement) {
    _inherits(xfunction, statement);
    function xfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfunction);
        this.wzElement = "xfunction";
        // return type
        // relation param
        this.params = [];
    }
    xfunction.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    xfunction.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    xfunction.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'param') {
            return this.wzLoadToChildColl(child, _md.param, this.params);
        }
        if (name === 'rtype') {
            this.rtype = child.v; return true;
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    xfunction.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.cModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    xfunction.prototype.wzVerify = function(ctx) {
        this.params.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    xfunction.prototype.wzInitialize = function(ctx) {
        this.params.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return xfunction;
})(statement);

_md.xfunction = xfunction;
// element xreturn
var xreturn = (function (statement) {
    _inherits(xreturn, statement);
    function xreturn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xreturn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xreturn);
        this.wzElement = "xreturn";
    }
    return xreturn;
})(statement);

_md.xreturn = xreturn;
// element set
var set = (function (statement) {
    _inherits(set, statement);
    function set(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(set.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, set);
        this.wzElement = "set";
    }
    return set;
})(statement);

_md.set = set;
// element call
var call = (function (statement) {
    _inherits(call, statement);
    function call(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(call.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, call);
        this.wzElement = "call";
    }
    return call;
})(statement);

_md.call = call;
// element argProp
var argProp = (function (statement) {
    _inherits(argProp, statement);
    function argProp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(argProp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, argProp);
        this.wzElement = "argProp";
    }
    return argProp;
})(statement);

_md.argProp = argProp;
// element xif
var xif = (function (statement) {
    _inherits(xif, statement);
    function xif(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xif);
        this.wzElement = "xif";
    }
    return xif;
})(statement);

_md.xif = xif;
// element elif
var elif = (function (statement) {
    _inherits(elif, statement);
    function elif(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(elif.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, elif);
        this.wzElement = "elif";
    }
    return elif;
})(statement);

_md.elif = elif;
// element xelse
var xelse = (function (statement) {
    _inherits(xelse, statement);
    function xelse(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xelse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xelse);
        this.wzElement = "xelse";
    }
    return xelse;
})(statement);

_md.xelse = xelse;
// element xfor
var xfor = (function (statement) {
    _inherits(xfor, statement);
    function xfor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfor);
        this.wzElement = "xfor";
    }
    return xfor;
})(statement);

_md.xfor = xfor;
// element xwhile
var xwhile = (function (statement) {
    _inherits(xwhile, statement);
    function xwhile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xwhile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xwhile);
        this.wzElement = "xwhile";
    }
    return xwhile;
})(statement);

_md.xwhile = xwhile;
// element xdo
var xdo = (function (statement) {
    _inherits(xdo, statement);
    function xdo(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xdo.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xdo);
        this.wzElement = "xdo";
    }
    return xdo;
})(statement);

_md.xdo = xdo;
// element xswitch
var xswitch = (function (statement) {
    _inherits(xswitch, statement);
    function xswitch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xswitch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xswitch);
        this.wzElement = "xswitch";
    }
    return xswitch;
})(statement);

_md.xswitch = xswitch;
// element xcase
var xcase = (function (statement) {
    _inherits(xcase, statement);
    function xcase(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xcase.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xcase);
        this.wzElement = "xcase";
    }
    return xcase;
})(statement);

_md.xcase = xcase;
// element xdefault
var xdefault = (function (statement) {
    _inherits(xdefault, statement);
    function xdefault(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xdefault.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xdefault);
        this.wzElement = "xdefault";
    }
    return xdefault;
})(statement);

_md.xdefault = xdefault;
// element label
var label = (function (statement) {
    _inherits(label, statement);
    function label(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(label.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, label);
        this.wzElement = "label";
    }
    return label;
})(statement);

_md.label = label;
// element log
var log = (function (statement) {
    _inherits(log, statement);
    function log(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(log.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, log);
        this.wzElement = "log";
    }
    return log;
})(statement);

_md.log = log;
// element info
var info = (function (statement) {
    _inherits(info, statement);
    function info(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(info.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, info);
        this.wzElement = "info";
    }
    return info;
})(statement);

_md.info = info;
// element success
var success = (function (statement) {
    _inherits(success, statement);
    function success(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(success.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, success);
        this.wzElement = "success";
    }
    return success;
})(statement);

_md.success = success;
// element warn
var warn = (function (statement) {
    _inherits(warn, statement);
    function warn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(warn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, warn);
        this.wzElement = "warn";
    }
    return warn;
})(statement);

_md.warn = warn;
// element error
var error = (function (statement) {
    _inherits(error, statement);
    function error(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(error.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, error);
        this.wzElement = "error";
    }
    return error;
})(statement);

_md.error = error;
_md.__tagElementMapping = { '//': 'statement', '/*': 'multilinecomment', '+': 'plusline', 'function': 'xfunction', 'return': 'xreturn', '_': 'call', '@': 'argProp', 'if': 'xif', 'else': 'xelse', 'for': 'xfor', 'while': 'xwhile', 'do': 'xdo', 'switch': 'xswitch', 'case': 'xcase', 'default': 'xdefault' };
// model/replaceUnknownElement( )
var cModelException = (function () {
    function cModelException(message, node, instance) {
        _classCallCheck(this, cModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    cModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: cModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return cModelException;
})();

_md.cModelException = cModelException;
var cContext = (function () {
    function cContext() {
        _classCallCheck(this, cContext);
        this.validationErrors = [];
    }
    cContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    cContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    return cContext;
})();

_md.cContext = cContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

