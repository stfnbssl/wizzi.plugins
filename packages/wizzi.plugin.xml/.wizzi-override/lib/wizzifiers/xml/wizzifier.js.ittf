module
    $
        var schemaName = 'xml';
    kind es6
    basewizzifier()
        $append imports
            var xml2js = require('xml2js')
            var xml_parser = new xml2js.Parser()
            var cleanAST = require('./cleanAST')
            +
            function parseInternal
                param tobeWizzified
                param options
                param callback
                var syntax
                try
                    _ xml_parser.parseString
                        @ tobeWizzified
                        a_cb(syntax)
                            r_cb(syntax)
                catch ex
                    return
                        _ callback
                            @ ex
        +
        function wizzify
            param tobeWizzified
            param options
            param callback
            set options = options || {};
            set options.input = tobeWizzified
            set options.stack = []
            set options.formatTextNodes = []
            set options.verbose = true
            _ parseInternal
                @ tobeWizzified
                @ options
                a_cb( syntax )
                    # log stringify(syntax, null, 2)
                    r_cb( syntax )
        
        function wizzify
            param tobeWizzified
            param options
            param callback
            var wizziTree
                { 
                    @ children
                        [ 
            _ parseInternal
                @ tobeWizzified
                @ options
                a_cb( syntax )
                    log 'syntax', Object.keys(syntax)
                    if options.dumpfile
                        _ file.write
                            @ options.dumpfile
                            _ JSON.stringify(syntax, null, 2)
                        
                    for var prop in syntax
                        if syntax.hasOwnProperty(prop)
                            var root = syntax[prop]
                            if verify.isObject(root) === false
                                return
                                    _ callback
                                        new Error("Root is not an object. Prop: " + prop + ', root: ' + root)
                            var ac = getAttribsAndChilds(root)
                            set wizziTree =
                                { 
                                    @ tag prop
                                    @ attribs
                                        [ 
                                    @ children
                                        [ 
                            var aObj = ac.a
                            for var aName in aObj
                                _ wizziTree.children.push
                                    { 
                                        @ tag '@'
                                        @ name (((aName + ' ')) + aObj[aName])
                                        @ children
                                            [ 
                            for var j = 0; j < ac.c.length; j++
                                var childnode = ac.c[j]
                                if verify.isArray(childnode.value) === false
                                    log "Error: value is not an array: " + childnode.name + ',' + childnode.value
                                else 
                                    _ appendChilds
                                        @ childnode.name
                                        @ childnode.value
                                        @ wizziTree
                    # log "wizziTree", wizziTree
                    r_cb(wizziTree)
        
        function appendChilds
            param name
            param nodeArray
            param parent
            # loog 'appendChilds.name', name
            foreach node in nodeArray
                if verify.isString(node)
                    set parent.name = node
                else 
                    var ac = getAttribsAndChilds(node)
                    var tag
                        { 
                            @ tag name
                            @ children
                                [ 
                    _ parent.children.push(tag)
                    var aObj = ac.a
                    for var aName in aObj
                        _ tag.children.push
                            { 
                                @ tag '@'
                                @ name (((aName + ' ')) + aObj[aName])
                                @ children
                                    [ 
                    foreach childnode in ac.c
                        if verify.isArray(childnode.value) === false
                            log "Error: value is not an array: " + childnode.name + ',' + childnode.value
                        else 
                            _ appendChilds
                                @ childnode.name
                                @ childnode.value
                                @ tag
        
        function getAttribsAndChilds
            param node
            var attribs
                { 
            var children
                [ 
            for var prop in node
                if node.hasOwnProperty(prop)
                    if prop === '$'
                        var attribsObj = node[prop]
                        # log('getAttribsAndChilds.$', attribsObj, true)
                        for var k in attribsObj
                            set attribs[k] = attribsObj[k]
                    else 
                        var value = node[prop]
                        var isArray = verify.isArray(value)
                        _ children.push
                            { 
                                @ name prop
                                @ value node[prop]
            return 
                { 
                    @ a attribs
                    @ c children