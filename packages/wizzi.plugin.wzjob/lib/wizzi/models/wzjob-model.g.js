/*
    artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.wzschema\lib\artifacts\wzschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Fri, 30 Aug 2024 20:19:22 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('@wizzi/utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var wzjobBase = (function () {
    function wzjobBase(name, sourceLineInfo) {
        _classCallCheck(this, wzjobBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    wzjobBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    wzjobBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    wzjobBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    wzjobBase.prototype.wzVerify = function() {
    }
    wzjobBase.prototype.wzInitialize = function() {
    }
    wzjobBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    wzjobBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    wzjobBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    wzjobBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    wzjobBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wzjobBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    wzjobBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wzjobBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wzjobBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    wzjobBase.prototype.error = function(message, node) {
        throw new _md.wzjobModelException(message, node, this);
    }
    wzjobBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    wzjobBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach(item => 
                children.push(item.toJson())
            )
            result.wzChildren = children;
        }
    }
    return wzjobBase;
})();

_md.wzjobBase = wzjobBase;

/**
    element wzjob
     The root element of the wzjob schema.
     The base path for the source models used by this "wzjob".
     The base folder path for the generated artifacts.
*/
var wzjob = (function (wzjobBase) {
    _inherits(wzjob, wzjobBase);
    function wzjob(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(wzjob.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wzjob);
        this.wzElement = "wzjob";
        // A short description of the job.
        // relation comment
        this.comments = [];
        // relation xrequire
        this.requires = [];
        // relation model
        this.models = [];
        // relation line
        this.lines = [];
        // relation production
        this.productions = [];
        // relation execFile
        this.execFiles = [];
    }
    wzjob.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    wzjob.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wzjob.prototype.addXrequire = function(name, sourceLineInfo) {
        var retval = new _md.xrequire(name, sourceLineInfo);
        retval.wzParent = this;
        this.requires.push(retval);
        return retval;
    }
    wzjob.prototype.getXrequire = function(name) {
        var found = null;
        this.requires.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wzjob.prototype.addModel = function(name, sourceLineInfo) {
        var retval = new _md.model(name, sourceLineInfo);
        retval.wzParent = this;
        this.models.push(retval);
        return retval;
    }
    wzjob.prototype.getModel = function(name) {
        var found = null;
        this.models.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wzjob.prototype.addLine = function(name, sourceLineInfo) {
        var retval = new _md.line(name, sourceLineInfo);
        retval.wzParent = this;
        this.lines.push(retval);
        return retval;
    }
    wzjob.prototype.getLine = function(name) {
        var found = null;
        this.lines.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wzjob.prototype.addProduction = function(name, sourceLineInfo) {
        var retval = new _md.production(name, sourceLineInfo);
        retval.wzParent = this;
        this.productions.push(retval);
        return retval;
    }
    wzjob.prototype.getProduction = function(name) {
        var found = null;
        this.productions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wzjob.prototype.addExecFile = function(name, sourceLineInfo) {
        var retval = new _md.execFile(name, sourceLineInfo);
        retval.wzParent = this;
        this.execFiles.push(retval);
        return retval;
    }
    wzjob.prototype.getExecFile = function(name) {
        var found = null;
        this.execFiles.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wzjob.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    wzjob.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.modelsBaseFolder)) {
            result["modelsBaseFolder"] = this.modelsBaseFolder;
        }
        if (!isEmpty(this.destBaseFolder)) {
            result["destBaseFolder"] = this.destBaseFolder;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    wzjob.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
        items = [];
        this.requires.forEach(item => 
            items.push(item.toJson())
        )
        result['requires'] = items;
        items = [];
        this.models.forEach(item => 
            items.push(item.toJson())
        )
        result['models'] = items;
        items = [];
        this.lines.forEach(item => 
            items.push(item.toJson())
        )
        result['lines'] = items;
        items = [];
        this.productions.forEach(item => 
            items.push(item.toJson())
        )
        result['productions'] = items;
        items = [];
        this.execFiles.forEach(item => 
            items.push(item.toJson())
        )
        result['execFiles'] = items;
    }
    wzjob.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'line') {
            return this.wzLoadToChildColl(child, _md.line, this.lines);
        }
        if (name === 'model') {
            return this.wzLoadToChildColl(child, _md.model, this.models);
        }
        if (name === 'title') {
            this.title = child.v; return true;
        }
        if (name === 'require') {
            return this.wzLoadToChildColl(child, _md.xrequire, this.requires);
        }
        if (name === 'execfile') {
            return this.wzLoadToChildColl(child, _md.execFile, this.execFiles);
        }
        if (name === 'exec-file') {
            return this.wzLoadToChildColl(child, _md.execFile, this.execFiles);
        }
        if (name === 'production') {
            return this.wzLoadToChildColl(child, _md.production, this.productions);
        }
        if (name === 'dest-base-folder') {
            this.destBaseFolder = child.v; return true;
        }
        else if (name === 'dest_base_folder') {
            this.destBaseFolder = child.v; return true;
        }
        if (name === 'models-base-folder') {
            this.modelsBaseFolder = child.v; return true;
        }
        else if (name === 'models_base_folder') {
            this.modelsBaseFolder = child.v; return true;
        }
        return false;
    }
    wzjob.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    wzjob.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        this.requires.forEach(item => 
            item.wzVerify(ctx)
        )
        this.models.forEach(item => 
            item.wzVerify(ctx)
        )
        this.lines.forEach(item => 
            item.wzVerify(ctx)
        )
        this.productions.forEach(item => 
            item.wzVerify(ctx)
        )
        this.execFiles.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    wzjob.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.requires.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.models.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.lines.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.productions.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.execFiles.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return wzjob;
})(wzjobBase);

_md.wzjob = wzjob;
/**
    element comment
     A comment line for describing job items.
*/
var comment = (function (wzjobBase) {
    _inherits(comment, wzjobBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
    }
    return comment;
})(wzjobBase);

_md.comment = comment;
/**
    element xrequire
     Requires a WizziFactoryPackage.
     The IttfNodeValue is the package name.
     If the package is not globally installed must be a fully qualified path.
*/
var xrequire = (function (wzjobBase) {
    _inherits(xrequire, wzjobBase);
    function xrequire(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xrequire.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xrequire);
        this.wzElement = "xrequire";
    }
    xrequire.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xrequire.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xrequire.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
    }
    return xrequire;
})(wzjobBase);

_md.xrequire = xrequire;
/**
    element model
     A wizzi model instance or a POJO acting as a context during an mTree loading.
     The ittf node value (wzName) is the name of the model that must be unique
     in a "wzjob"; it will become the default export name of the context
     property that exposes the model.
     A "model" will be loaded once, and will be reused if
     referenced in many evaluations.
     A filepath where the loaded model must be dumped for test.
     The model must implement the toJson method. See the "exportTo" attribute in wizzischema root nodes.
     When declared the loaded model is JSON.stringyfied and written
     to the "dumpFile" filepath.
     The name of the context property that will expose the loaded model.
     When declared on the "model" element means that the model will be globally available
     for all the transformations of the job.
*/
var model = (function (wzjobBase) {
    _inherits(model, wzjobBase);
    function model(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(model.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, model);
        this.allowedFORMATS = [ "json", "xml", "js"];
        this.FORMAT_JSON = "json";
        this.FORMAT_XML = "xml";
        this.FORMAT_JS = "js";
        this.wzElement = "model";
        /**
             The path to the primary ittf document of the "model" or to the the POJO source.
             When relative, the base path is the "modelsBaseFolder"
             declared on the "wzjob" element.
        */
        /**
             In case of a wizzi model is the name of its wizzi schema.
             Is alternative to the attribute 'format'.
        */
        /**
             In case of a POJO model is the native format of the source file.
             Is alternative to the attribute 'schema'.
        */
        // relation modelRef
        // References to "model" instances acting as data context during this "model" evaluation.
        // A "model" is referenced by its name.
        this.modelRefs = [];
        // relation comment
        this.comments = [];
    }
    model.FORMAT_JSON = "json";
    
    model.FORMAT_XML = "xml";
    
    model.FORMAT_JS = "js";
    
    model.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    model.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    model.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    model.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    model.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    model.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
        if (!isEmpty(this.exportName)) {
            result["exportName"] = this.exportName;
        }
    }
    model.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.modelRefs.forEach(item => 
            items.push(item.toJson())
        )
        result['modelRefs'] = items;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    model.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'src') {
            this.src = child.v; return true;
        }
        if (name === 'format') {
            this.format = child.v; return true;
        }
        if (name === 'schema') {
            this.schema = child.v; return true;
        }
        if (name === 'modelref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'dump-file') {
            this.dumpFile = child.v; return true;
        }
        else if (name === 'dump_file') {
            this.dumpFile = child.v; return true;
        }
        if (name === 'model-ref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'export-name') {
            this.exportName = child.v; return true;
        }
        else if (name === 'export_name') {
            this.exportName = child.v; return true;
        }
        return false;
    }
    model.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    model.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("model", "format", this.format, this.allowedFORMATS, this);
        this.modelRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    model.prototype.wzInitialize = function(ctx) {
        this.modelRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return model;
})(wzjobBase);

_md.model = model;
/**
    element modelRef
     Can be a child element of a "model" element, an "artifact" element and a "transformer" element.
     The name of the context property that will expose the loaded model during
     an evaluation. Overrides the name of the "model" that is the default export name.
*/
var modelRef = (function (wzjobBase) {
    _inherits(modelRef, wzjobBase);
    function modelRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelRef);
        this.wzElement = "modelRef";
        // relation transformer
        // A model may have one or more transformers.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelCollection
        // TODO This is a one-to-one relation, not yet implemented.
        // Single items of a collection contained in the "model" may act as a context property
        // for artifacts where each collection item generates a separate artifact.
        this.modelCollections = [];
        // relation comment
        this.comments = [];
    }
    modelRef.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    modelRef.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelRef.prototype.addModelCollection = function(name, sourceLineInfo) {
        var retval = new _md.modelCollection(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelCollections.push(retval);
        return retval;
    }
    modelRef.prototype.getModelCollection = function(name) {
        var found = null;
        this.modelCollections.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelRef.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    modelRef.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelRef.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.exportName)) {
            result["exportName"] = this.exportName;
        }
    }
    modelRef.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.transformers.forEach(item => 
            items.push(item.toJson())
        )
        result['transformers'] = items;
        items = [];
        this.modelCollections.forEach(item => 
            items.push(item.toJson())
        )
        result['modelCollections'] = items;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    modelRef.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'modelcoll') {
            return this.wzLoadToChildColl(child, _md.modelCollection, this.modelCollections);
        }
        if (name === 'model-coll') {
            return this.wzLoadToChildColl(child, _md.modelCollection, this.modelCollections);
        }
        if (name === 'export-name') {
            this.exportName = child.v; return true;
        }
        else if (name === 'export_name') {
            this.exportName = child.v; return true;
        }
        if (name === 'transformer') {
            return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
        }
        return false;
    }
    modelRef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    modelRef.prototype.wzVerify = function(ctx) {
        this.transformers.forEach(item => 
            item.wzVerify(ctx)
        )
        this.modelCollections.forEach(item => 
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    modelRef.prototype.wzInitialize = function(ctx) {
        this.transformers.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.modelCollections.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzjob\.wizzi-override\lib\wizzi\schemas\wzjob.wzschema.ittf
            utc time: Fri, 30 Aug 2024 20:19:22 GMT
        */
        
        // loog 'this.modelCollection.wzName', this.modelCollection.wzName
        
        // loog 'this.collName', this.collName
        
        // loog 'this.collItemName', this.collItemName
        if (this.modelCollections.length > 0) {
            this.modelCollection = this.modelCollections[0];
            this.collName = this.modelCollection.wzName;
            this.collItemName = this.modelCollection.itemName;
            this.collPathTemplateValues = [];
            var i, i_items=this.modelCollection.pathTemplateValues, i_len=this.modelCollection.pathTemplateValues.length, item;
            for (i=0; i<i_len; i++) {
                item = this.modelCollection.pathTemplateValues[i];
                this.collPathTemplateValues.push({
                    token: item.token, 
                    attribute: item.attribute, 
                    function: item.function
                 })
            }
        }
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelRef;
})(wzjobBase);

_md.modelRef = modelRef;
// element modelCollection
var modelCollection = (function (wzjobBase) {
    _inherits(modelCollection, wzjobBase);
    function modelCollection(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelCollection.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelCollection);
        this.wzElement = "modelCollection";
    }
    modelCollection.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelCollection.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    modelCollection.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
    }
    return modelCollection;
})(wzjobBase);

_md.modelCollection = modelCollection;
// element pathTemplateValue
var pathTemplateValue = (function (wzjobBase) {
    _inherits(pathTemplateValue, wzjobBase);
    function pathTemplateValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pathTemplateValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pathTemplateValue);
        this.wzElement = "pathTemplateValue";
    }
    pathTemplateValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pathTemplateValue.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    pathTemplateValue.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
    }
    return pathTemplateValue;
})(wzjobBase);

_md.pathTemplateValue = pathTemplateValue;
/**
    element transformer
     A model transformer.
     The ittf node value is the transformer name {wizzischema}/{transformer}
     to be found in {wizziPackage}/artifacts/{wizzischema}/{transformer}/trans/main.js
     A filepath where the transformed model must be dumped for test.
     When declared the transformed model is JSON.stringified and written
     to the "dumpFile" filepath.
*/
var transformer = (function (wzjobBase) {
    _inherits(transformer, wzjobBase);
    function transformer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(transformer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, transformer);
        this.wzElement = "transformer";
        // relation comment
        this.comments = [];
    }
    transformer.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    transformer.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    transformer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    transformer.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
    }
    transformer.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    transformer.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'dump-file') {
            this.dumpFile = child.v; return true;
        }
        else if (name === 'dump_file') {
            this.dumpFile = child.v; return true;
        }
        return false;
    }
    transformer.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    transformer.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    transformer.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return transformer;
})(wzjobBase);

_md.transformer = transformer;
/**
    element artifact
     Describe an artifact, or a group of artifacts, to be generated.
     It is a child element of a "line" element.
    
     Each artifact item can be one of:
     . A Wizzi model instance, acting as a template, which WizziSchema targets a code language technology.
     . A swig template.
     . A code write generation that takes in input a context of one or more WizziModels.
     . A final artifact to be copied to a destination folder without transformations.
     . A reference to another WzJob, to be executed before the current WzJob where the artifact is declared.
    
     Context value objects for template transformations are declared in the "model" element, child of the "wzjob" root element
     and may be referenced in the elements "modelRef", children of the "artifact" element.
    
     The "src" attribute can be a glob pattern.
     The "src" or "destPath" attributes of an "artifact" element may contain tokens enclosed in graph parens.
     When one of the "modelRef@" is a collection model, the artifact generation is repeated
     for each item of the collection and the "src" or "destPath" attributes become the template of the destination path.
     See the "pathTemplateValues" child elements of the "modelRef" for the values that will replace the tokens.
    
     Example
    
     artifact
     dest-path app/db/{table}Datalayer.js.ittf
     ...
     model-ref rdbms
     model-coll tables
     item-name table
     path-template-value
     attribute tableName
     token table
    
     model rdbms
     ...
    
     the Wizzi model instance after loading rdbms: {
     ....
     tables: [{
     tableName: 'user',
     ...
     },{
     ...
     }]
     }
    
     will produce an artifact of path .../app/db/userDatalayer.js, and as many as the items in the tables collection.
    
     Indicator that the mTree buildup script must be 'compiled' for javascript
     and loaded with a 'require-from-string' function instead of
     being submitted to js-wizzi.
     Indicator that the artifact source is a wizzi factory job, alias a wizzi model of schema 'wzjob'.
     The job will be executed before any other artifact production of the current wzjob.
     This could be autodected from the schema, but autodetection would forbid other uses or transformations
     of a "wzjob" model, so the indicator is required.
     Indicator that the artifact source is a wizzi schema, alias a wizzi model of schema 'wzschema'
     and that the generation of the artifacts for the wizzi model described by the wzschema is requested.
     This could be autodected from the schema, but autodetection would forbid other uses or transformations
     of a "wzschema" model, so the indicator is required.
     Indicator that the artifact source is a Ittf Document of schema `ittf` that declares a
     folder structure and the Ittf content of its files.
     Generates a folder of Ittf document ready for artifact generation or model transformation.
     The same as isWzModelToFolder but when the root of the generated folder
     contains a "wzjob" Ittf Document. The job is executed.
     The artifact source file path, 'src', is the default relative destination path
     of the generated artifact. When set, this attribute overrides the default.
     It can be an absolute or relative path.
     If the artifact is a code write generation the 'destPath' attribute is required.
     No artifact should be emitted. Front matter properties are collected.
*/
var artifact = (function (wzjobBase) {
    _inherits(artifact, wzjobBase);
    function artifact(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(artifact.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifact);
        this.allowedFORMATS = [ "json", "xml", "js"];
        this.FORMAT_JSON = "json";
        this.FORMAT_XML = "xml";
        this.FORMAT_JS = "js";
        this.wzElement = "artifact";
        /**
             The path to the primary ittf source document of the artifact, in case of a wizzi model, or
             to a native source in case of a POJO.
             Can be a glob pattern referencing many ittf source documents of artifacts of the same kind.
             FIXME explain why this:
             Or it may contain the literal 'context' if the artifact generator require a context object only
             and not a primary model.
             If relative, the base path is the cwdFolder of the parent line.
             If the artifact is a code write artifact the 'src' attribute must be omitted.
        */
        /**
             File returned by the src pattern that must be ignored.
             Can be a glob pattern.
        */
        /**
             When the artifact source is a schemed ittf document, is the schema that will load and
             validate the wizzi model instance.
             May be null (absent) if the artifact is a final artifact or the artifact source is a POJO;
             in this case the 'format' attribute must be declared.
        */
        /**
             When the artifact source is a POJO model is the native format of the source file.
             Is alternative to the attribute 'schema'.
        */
        this.isCompile = false;
        this.isWzJob = false;
        this.isWzModelType = false;
        this.isWzModelToFolder = false;
        this.isWzModelToFolderAutoJob = false;
        /**
             When the artifact source is a wizzi model instance or a POJO, acting as a context, is the name of
             the artifact generator that will transform the context into a software artifact.
             When the artifact is a code write generation or a final artifact must be omitted.
        */
        /**
             The document path extension of the generated artifact. Optional. The default is the 'src' extension
             without the ending '.ittf' string, if present.
        */
        /**
             The name of the data collection to which the front matter properties of the source ittf documents
             must be appendend. They will be available in the context property 'job.{collection}'
        */
        this.noOutput = false;
        // relation transformer
        // When the artifact source is an Ittf document, the loaded WizziModel may need
        // one or more transformations before being passed to the artifact generator.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelRef
        // References to 'model/s' acting as context objects.
        // In case of a final artifact must not be declared.
        this.modelRefs = [];
        // relation comment
        this.comments = [];
    }
    artifact.FORMAT_JSON = "json";
    
    artifact.FORMAT_XML = "xml";
    
    artifact.FORMAT_JS = "js";
    
    artifact.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    artifact.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    artifact.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    artifact.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    artifact.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    artifact.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    artifact.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifact.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.ignore)) {
            result["ignore"] = this.ignore;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        result["isCompile"] = this.isCompile;
        result["isWzJob"] = this.isWzJob;
        result["isWzModelType"] = this.isWzModelType;
        result["isWzModelToFolder"] = this.isWzModelToFolder;
        result["isWzModelToFolderAutoJob"] = this.isWzModelToFolderAutoJob;
        if (!isEmpty(this.generator)) {
            result["generator"] = this.generator;
        }
        if (!isEmpty(this.destPath)) {
            result["destPath"] = this.destPath;
        }
        if (!isEmpty(this.extension)) {
            result["extension"] = this.extension;
        }
        if (!isEmpty(this.collection)) {
            result["collection"] = this.collection;
        }
        result["noOutput"] = this.noOutput;
    }
    artifact.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.transformers.forEach(item => 
            items.push(item.toJson())
        )
        result['transformers'] = items;
        items = [];
        this.modelRefs.forEach(item => 
            items.push(item.toJson())
        )
        result['modelRefs'] = items;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    artifact.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'src') {
            this.src = child.v; return true;
        }
        if (name === 'format') {
            this.format = child.v; return true;
        }
        if (name === 'ignore') {
            this.ignore = child.v; return true;
        }
        if (name === 'schema') {
            this.schema = child.v; return true;
        }
        if (name === 'modelref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'dest-path') {
            this.destPath = child.v; return true;
        }
        else if (name === 'dest_path') {
            this.destPath = child.v; return true;
        }
        if (name === 'extension') {
            this.extension = child.v; return true;
        }
        if (name === 'generator') {
            this.generator = child.v; return true;
        }
        if (name === 'is-wz-job') {
            this.isWzJob = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_wz_job') {
            this.isWzJob = parseboolean(child.v, true, child); return true;
        }
        if (name === 'model-ref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'no-output') {
            this.noOutput = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'no_output') {
            this.noOutput = parseboolean(child.v, true, child); return true;
        }
        if (name === 'collection') {
            this.collection = child.v; return true;
        }
        if (name === 'is-compile') {
            this.isCompile = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_compile') {
            this.isCompile = parseboolean(child.v, true, child); return true;
        }
        if (name === 'transformer') {
            return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
        }
        if (name === 'is-wz-model-type') {
            this.isWzModelType = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_wz_model_type') {
            this.isWzModelType = parseboolean(child.v, true, child); return true;
        }
        if (name === 'is-wz-model-to-folder') {
            this.isWzModelToFolder = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_wz_model_to_folder') {
            this.isWzModelToFolder = parseboolean(child.v, true, child); return true;
        }
        if (name === 'is-wz-model-to-folder-auto-job') {
            this.isWzModelToFolderAutoJob = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_wz_model_to_folder_auto_job') {
            this.isWzModelToFolderAutoJob = parseboolean(child.v, true, child); return true;
        }
        return false;
    }
    artifact.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    artifact.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("artifact", "format", this.format, this.allowedFORMATS, this);
        this.transformers.forEach(item => 
            item.wzVerify(ctx)
        )
        this.modelRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    artifact.prototype.wzInitialize = function(ctx) {
        this.transformers.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.modelRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return artifact;
})(wzjobBase);

_md.artifact = artifact;
/**
    element line
     A line is a group of artifacts having the same source "cwdFolder".
     The source folder of the artifact templates of this line.
     The destination folder of the generated artifacts of this line.
     Overrides the attribute "destFolder" of the "production" element.
*/
var line = (function (wzjobBase) {
    _inherits(line, wzjobBase);
    function line(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(line.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, line);
        this.wzElement = "line";
        // relation artifact
        // The artifacts of the "line"
        this.artifacts = [];
        // relation comment
        this.comments = [];
    }
    line.prototype.addArtifact = function(name, sourceLineInfo) {
        var retval = new _md.artifact(name, sourceLineInfo);
        retval.wzParent = this;
        this.artifacts.push(retval);
        return retval;
    }
    line.prototype.getArtifact = function(name) {
        var found = null;
        this.artifacts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    line.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    line.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    line.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    line.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.cwdFolder)) {
            result["cwdFolder"] = this.cwdFolder;
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    line.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.artifacts.forEach(item => 
            items.push(item.toJson())
        )
        result['artifacts'] = items;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    line.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'artifact') {
            return this.wzLoadToChildColl(child, _md.artifact, this.artifacts);
        }
        if (name === 'cwd-folder') {
            this.cwdFolder = child.v; return true;
        }
        else if (name === 'cwd_folder') {
            this.cwdFolder = child.v; return true;
        }
        if (name === 'dest-folder') {
            this.destFolder = child.v; return true;
        }
        else if (name === 'dest_folder') {
            this.destFolder = child.v; return true;
        }
        return false;
    }
    line.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    line.prototype.wzVerify = function(ctx) {
        this.artifacts.forEach(item => 
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    line.prototype.wzInitialize = function(ctx) {
        this.artifacts.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return line;
})(wzjobBase);

_md.line = line;
/**
    element lineRef
     A reference to a line.
*/
var lineRef = (function (wzjobBase) {
    _inherits(lineRef, wzjobBase);
    function lineRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(lineRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, lineRef);
        this.wzElement = "lineRef";
        // relation comment
        this.comments = [];
    }
    lineRef.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    lineRef.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    lineRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    lineRef.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.dummy)) {
            result["dummy"] = this.dummy;
        }
    }
    lineRef.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    lineRef.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'dummy') {
            this.dummy = child.v; return true;
        }
        return false;
    }
    lineRef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    lineRef.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    lineRef.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return lineRef;
})(wzjobBase);

_md.lineRef = lineRef;
/**
    element production
     A job execution unit that generates a set of Software artifacts
     into one destination folder.
     The destination folder of the generated artifacts.
*/
var production = (function (wzjobBase) {
    _inherits(production, wzjobBase);
    function production(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(production.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, production);
        this.wzElement = "production";
        // relation modelRef
        // References to the context WizziWodels used by this "production".
        this.modelRefs = [];
        // relation lineRef
        // References to the "line(s)" to be generated.
        this.lineRefs = [];
        // relation comment
        this.comments = [];
    }
    production.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    production.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    production.prototype.addLineRef = function(name, sourceLineInfo) {
        var retval = new _md.lineRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.lineRefs.push(retval);
        return retval;
    }
    production.prototype.getLineRef = function(name) {
        var found = null;
        this.lineRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    production.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    production.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    production.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    production.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    production.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.modelRefs.forEach(item => 
            items.push(item.toJson())
        )
        result['modelRefs'] = items;
        items = [];
        this.lineRefs.forEach(item => 
            items.push(item.toJson())
        )
        result['lineRefs'] = items;
        items = [];
        this.comments.forEach(item => 
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    production.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'lineref') {
            return this.wzLoadToChildColl(child, _md.lineRef, this.lineRefs);
        }
        if (name === 'line-ref') {
            return this.wzLoadToChildColl(child, _md.lineRef, this.lineRefs);
        }
        if (name === 'modelref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'model-ref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'dest-folder') {
            this.destFolder = child.v; return true;
        }
        else if (name === 'dest_folder') {
            this.destFolder = child.v; return true;
        }
        return false;
    }
    production.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    production.prototype.wzVerify = function(ctx) {
        this.modelRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        this.lineRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    production.prototype.wzInitialize = function(ctx) {
        this.modelRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.lineRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzjob\.wizzi-override\lib\wizzi\schemas\wzjob.wzschema.ittf
            utc time: Fri, 30 Aug 2024 20:19:22 GMT
        */
        this.wzjob = this.wzParent;
        var i, i_items=this.modelRefs, i_len=this.modelRefs.length, modelRef;
        for (i=0; i<i_len; i++) {
            modelRef = this.modelRefs[i];
            // loog 'production.wzinitialize.modelRef', modelRef.wzName
            var model = this.wzjob.getModel(modelRef.wzName);
            if (model == null) {
                this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
            }
            modelRef.___model = model;
        }
        this.lines = [];
        var i, i_items=this.lineRefs, i_len=this.lineRefs.length, lineRef;
        for (i=0; i<i_len; i++) {
            lineRef = this.lineRefs[i];
            // loog 'production.wzinitialize.lineRef', lineRef.wzName
            var line = this.wzjob.getLine(lineRef.wzName);
            if (line == null) {
                this.error('line ' + lineRef.wzName + ' not found.', lineRef);
            }
            this.lines.push(line);
            var j, j_items=line.artifacts, j_len=line.artifacts.length, artifact;
            for (j=0; j<j_len; j++) {
                artifact = line.artifacts[j];
                // loog 'production.wzinitialize.artifact', artifact.wzName
                var k, k_items=artifact.modelRefs, k_len=artifact.modelRefs.length, modelRef;
                for (k=0; k<k_len; k++) {
                    modelRef = artifact.modelRefs[k];
                    // loog 'production.wzinitialize.artifact.modelRef', modelRef.wzName
                    var model = this.wzjob.getModel(modelRef.wzName);
                    if (model == null) {
                        this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
                    }
                    modelRef.___model = model;
                }
            }
        }
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return production;
})(wzjobBase);

_md.production = production;
// element env
var env = (function (wzjobBase) {
    _inherits(env, wzjobBase);
    function env(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(env.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, env);
        this.allowedTYPES = [ "string", "boolean", "number"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_NUMBER = "number";
        this.wzElement = "env";
        this.type = "string";
    }
    env.TYPE_STRING = "string";
    
    env.TYPE_XBOOLEAN = "boolean";
    
    env.TYPE_NUMBER = "number";
    
    env.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    env.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.__name)) {
            result["__name"] = this.__name;
        }
        if (!isEmpty(this.__value)) {
            result["__value"] = this.__value;
        }
    }
    env.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
    }
    env.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === '__name') {
            this.__name = child.v; return true;
        }
        if (name === '__value') {
            this.__value = child.v; return true;
        }
        return false;
    }
    env.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    env.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("env", "type", this.type, this.allowedTYPES, this);
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    env.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzjob\.wizzi-override\lib\wizzi\schemas\wzjob.wzschema.ittf
            utc time: Fri, 30 Aug 2024 20:19:22 GMT
        */
        var nv = verify.parseNameValue(this.wzName);
        this.__name = nv.name;
        this.__value = verify.convert(nv.value, this.type);
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return env;
})(wzjobBase);

_md.env = env;
// element arg
var arg = (function (wzjobBase) {
    _inherits(arg, wzjobBase);
    function arg(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(arg.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, arg);
        this.allowedTYPES = [ "string", "boolean", "number"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_NUMBER = "number";
        this.wzElement = "arg";
        this.type = "string";
    }
    arg.TYPE_STRING = "string";
    
    arg.TYPE_XBOOLEAN = "boolean";
    
    arg.TYPE_NUMBER = "number";
    
    arg.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    arg.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.__name)) {
            result["__name"] = this.__name;
        }
        if (!isEmpty(this.__value)) {
            result["__value"] = this.__value;
        }
    }
    arg.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
    }
    arg.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === '__name') {
            this.__name = child.v; return true;
        }
        if (name === '__value') {
            this.__value = child.v; return true;
        }
        return false;
    }
    arg.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wzjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    arg.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("arg", "type", this.type, this.allowedTYPES, this);
        _md.wzjobBase.prototype.wzVerify.call(this, ctx);
    }
    arg.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzjob\.wizzi-override\lib\wizzi\schemas\wzjob.wzschema.ittf
            utc time: Fri, 30 Aug 2024 20:19:22 GMT
        */
        var nv = verify.parseNameValue(this.wzName);
        if (nv.value && nv.value.length > 0) {
            this.__name = nv.name;
            this.__value = verify.convert(nv.value, this.type);
        }
        else {
            this.__value = verify.convert(nv.name, this.type);
        }
        _md.wzjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return arg;
})(wzjobBase);

_md.arg = arg;
// element execFile
var execFile = (function (wzjobBase) {
    _inherits(execFile, wzjobBase);
    function execFile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(execFile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, execFile);
        this.wzElement = "execFile";
    }
    execFile.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    execFile.prototype.toJsonProperties = function(result) {
        _md.wzjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    execFile.prototype.toJsonChildren = function(result) {
        _md.wzjobBase.prototype.toJsonChildren.call(this, result);
    }
    return execFile;
})(wzjobBase);

_md.execFile = execFile;
_md.__tagElementMapping = { '#': 'comment', 'require': 'xrequire', 'exec-file': 'execFile', 'execfile': 'execFile', 'model-ref': 'modelRef', 'modelref': 'modelRef', 'model-coll': 'modelCollection', 'modelcoll': 'modelCollection', 'line-ref': 'lineRef', 'lineref': 'lineRef' };
// model/replaceUnknownElement( )
var wzjobModelException = (function () {
    function wzjobModelException(message, node, instance) {
        _classCallCheck(this, wzjobModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    wzjobModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: wzjobModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return wzjobModelException;
})();

_md.wzjobModelException = wzjobModelException;
var wzjobContext = (function () {
    function wzjobContext() {
        _classCallCheck(this, wzjobContext);
        this.validationErrors = [];
    }
    wzjobContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    wzjobContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    wzjobContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'))
        }
    }
    return wzjobContext;
})();

_md.wzjobContext = wzjobContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new wzjobModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function wzinitialize() {
    
    /*
        artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
        package: @wizzi/plugin.js@0.8.9
        primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzjob\.wizzi-override\lib\wizzi\schemas\wzjob.wzschema.ittf
        utc time: Fri, 30 Aug 2024 20:19:22 GMT
    */
    var options = {};
    if (this.cwd && this.cwd.length > 0) {
        options.cwd = this.cwd;
    }
    if (this.encoding && this.encoding.length > 0) {
        options.encoding = this.encoding;
    }
    if (this.timeout > 0) {
        options.timeout = this.timeout;
    }
    if (this.envs.length > 0) {
        var envObj = {};
        var i, i_items=this.envs, i_len=this.envs.length, env;
        for (i=0; i<i_len; i++) {
            env = this.envs[i];
            envObj[env.__name] = env.__value;
        }
        options.env = envObj;
    }
    this.__options = options;
    this.__args = [];
    var i, i_items=this.args, i_len=this.args.length, arg;
    for (i=0; i<i_len; i++) {
        arg = this.args[i];
        this.__args.push(arg.__value);
    }
}