module
    kind react
    iife 
        param c
        iif typeof exports == "object" && typeof module != "undefined"
            then
                set module.exports = c()
            else
                iif typeof define == "function" && define.amd
                    then define([], c)
                    else
                        set =
                            @expr 
                                ( 
                                    iif typeof window != "undefined"
                                        then window
                                        else
                                            iif typeof global != "undefined"
                                                then global
                                                else
                                                    iif typeof self != "undefined"
                                                        then self
                                                        else this
                                . jsyaml
                            _ c()
        (
            function 
                return 
                    _ c
                        param p
                        param T
                        param l
                        function e
                            param r
                            param o
                            if !T[r]
                                if !p[r]
                                    var u = typeof require == "function" && require
                                    if !o && u
                                        return u(r, !0)
                                    if a
                                        return a(r, !0)
                                    var h = new Error("Cannot find module '" + r + "'")
                                    throw 
                                        sequence 
                                            set h.code = "MODULE_NOT_FOUND"
                                            set h
                                var x
                                    set T[r] =
                                        { 
                                            { exports
                                _ p[r][0].call
                                    @expr x.exports
                                    function 
                                        param v
                                        return e(p[r][1][v] || v)
                                    @ x
                                    @expr x.exports
                                    @ c
                                    @ p
                                    @ T
                                    @ l
                            return T[r].exports
                        for var a = typeof require == "function" && require, s = 0; s < l.length; s++
                            _ e(l[s])
                        return e
                        (
                            { 
                                [ 1
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("./js-yaml/loader")
                                            decl e = c("./js-yaml/dumper")
                                        function a
                                            param s
                                            return 
                                                function 
                                                    throw new Error("Function " + s + " is deprecated and cannot be used.")
                                        sequence 
                                            set p.exports.Type = c("./js-yaml/type")
                                            set p.exports.Schema = c("./js-yaml/schema")
                                            set p.exports.FAILSAFE_SCHEMA = c("./js-yaml/schema/failsafe")
                                            set p.exports.JSON_SCHEMA = c("./js-yaml/schema/json")
                                            set p.exports.CORE_SCHEMA = c("./js-yaml/schema/core")
                                            set p.exports.DEFAULT_SAFE_SCHEMA = c("./js-yaml/schema/default_safe")
                                            set p.exports.DEFAULT_FULL_SCHEMA = c("./js-yaml/schema/default_full")
                                            set p.exports.load = l.load
                                            set p.exports.loadAll = l.loadAll
                                            set p.exports.safeLoad = l.safeLoad
                                            set p.exports.safeLoadAll = l.safeLoadAll
                                            set p.exports.dump = e.dump
                                            set p.exports.safeDump = e.safeDump
                                            set p.exports.YAMLException = c("./js-yaml/exception")
                                            set p.exports.MINIMAL_SCHEMA = c("./js-yaml/schema/failsafe")
                                            set p.exports.SAFE_SCHEMA = c("./js-yaml/schema/default_safe")
                                            set p.exports.DEFAULT_SCHEMA = c("./js-yaml/schema/default_full")
                                            set p.exports.scan = a("scan")
                                            set p.exports.parse = a("parse")
                                            set p.exports.compose = a("compose")
                                            set p.exports.addConstructor = a("addConstructor")
                                    { 
                                        @ "./js-yaml/dumper" 3
                                        @ "./js-yaml/exception" 4
                                        @ "./js-yaml/loader" 5
                                        @ "./js-yaml/schema" 7
                                        @ "./js-yaml/schema/core" 8
                                        @ "./js-yaml/schema/default_full" 9
                                        @ "./js-yaml/schema/default_safe" 10
                                        @ "./js-yaml/schema/failsafe" 11
                                        @ "./js-yaml/schema/json" 12
                                        @ "./js-yaml/type" 13
                                [ 2
                                    function 
                                        param c
                                        param p
                                        param T
                                        function l
                                            param e
                                            return e == null
                                        sequence 
                                            set p.exports.isNothing = l
                                            set p.exports.isObject =
                                                function 
                                                    param e
                                                    return typeof e == "object" && e !== null
                                            set p.exports.toArray =
                                                function 
                                                    param e
                                                    return 
                                                        iif Array.isArray(e)
                                                            then e
                                                            else
                                                                iif l(e)
                                                                    then []
                                                                    else
                                                                        [ 
                                                                            @ e
                                            set p.exports.repeat =
                                                function 
                                                    param e
                                                    param a
                                                    var 
                                                        decl s
                                                        decl r = ""
                                                    for ; s < a;
                                                        set r += e
                                                    return r
                                            set p.exports.isNegativeZero =
                                                function 
                                                    param e
                                                    return e === 0 && Number.NEGATIVE_INFINITY === 1 / e
                                            set p.exports.extend =
                                                function 
                                                    param e
                                                    param a
                                                    var 
                                                        decl s
                                                        decl r
                                                        decl o
                                                        decl u
                                                    if a
                                                        for ; s < r;
                                                            set =
                                                                @expr e
                                                                    .[
                                                                        set o = u[s]
                                                                @expr a[o]
                                                    return e
                                    { 
                                [ 3
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("./common")
                                            decl e = c("./exception")
                                            decl a = c("./schema/default_full")
                                            decl s = c("./schema/default_safe")
                                            decl r = Object.prototype.toString
                                            decl o = Object.prototype.hasOwnProperty
                                            decl u = 9
                                            decl h = 10
                                            decl x = 32
                                            decl v = 33
                                            decl D = 34
                                            decl V = 35
                                            decl Z = 37
                                            decl X = 38
                                            decl St = 39
                                            decl It = 42
                                            decl ft = 44
                                            decl xt = 45
                                            decl dt = 58
                                            decl $ = 62
                                            decl tt = 63
                                            decl P = 64
                                            decl nt = 91
                                            decl ht = 93
                                            decl At = 96
                                            decl mt = 123
                                            decl ot = 124
                                            decl vt = 125
                                            decl bt
                                                { 
                                                    @ 0 "\\0"
                                                    @ 7 "\\a"
                                                    @ 8 "\\b"
                                                    @ 9 "\\t"
                                                    @ 10 "\\n"
                                                    @ 11 "\\v"
                                                    @ 12 "\\f"
                                                    @ 13 "\\r"
                                                    @ 27 "\\e"
                                                    @ 34 '\\"'
                                                    @ 92 "\\\\"
                                                    @ 133 "\\N"
                                                    @ 160 "\\_"
                                                    @ 8232 "\\L"
                                                    @ 8233 "\\P"
                                            decl E
                                                [ 
                                                    @ "y"
                                                    @ "Y"
                                                    @ "yes"
                                                    @ "Yes"
                                                    @ "YES"
                                                    @ "on"
                                                    @ "On"
                                                    @ "ON"
                                                    @ "n"
                                                    @ "N"
                                                    @ "no"
                                                    @ "No"
                                                    @ "NO"
                                                    @ "off"
                                                    @ "Off"
                                                    @ "OFF"
                                        function et
                                            param i
                                            var 
                                                decl g
                                                decl b
                                                decl j
                                            if 
                                                test
                                                    sequence 
                                                        set g = i.toString(16).toUpperCase()
                                                        set i <= 255
                                                sequence 
                                                    set b = "x"
                                                    set j = 2
                                            else
                                                if i <= 65535
                                                    sequence 
                                                        set b = "u"
                                                        set j = 4
                                                else
                                                    if !(i <= 4294967295)
                                                        throw new e("code point within a string may not be greater than 0xFFFFFFFF")
                                                    sequence 
                                                        set b = "U"
                                                        set j = 8
                                            return "\\" + b + l.repeat("0", j - g.length) + g
                                        function wt
                                            param i
                                            sequence 
                                                set this.schema = i.schema || a
                                                set this.indent = Math.max(1, i.indent || 2)
                                                set this.noArrayIndent = i.noArrayIndent || !1
                                                set this.skipInvalid = i.skipInvalid || !1
                                                set this.flowLevel =
                                                    iif l.isNothing(i.flowLevel)
                                                        then -1
                                                        else i.flowLevel
                                                iife 
                                                    param g
                                                    param b
                                                    var 
                                                        decl j
                                                        decl U
                                                        decl S
                                                        decl N
                                                        decl A
                                                        decl w
                                                        decl B
                                                    if b === null
                                                        return 
                                                            { 
                                                    for ; S < N;
                                                        sequence 
                                                            set A = U[S]
                                                            set w = String(b[A])
                                                            && 
                                                                + A.slice(0, 2) === "!!"
                                                                + A = "tag:yaml.org,2002:" + A.slice(2)
                                                            && 
                                                                && 
                                                                    + B = g.compiledTypeMap.fallback[A]
                                                                    + o.call(B.styleAliases, w)
                                                                + w = B.styleAliases[w]
                                                            set j[A] = w
                                                    return j
                                                    (
                                                        @expr this.schema
                                                        @expr i.styles || null
                                                set this.sortKeys = i.sortKeys || !1
                                                set this.lineWidth = i.lineWidth || 80
                                                set this.noRefs = i.noRefs || !1
                                                set this.noCompatMode = i.noCompatMode || !1
                                                set this.condenseFlow = i.condenseFlow || !1
                                                set this.implicitTypes = this.schema.compiledImplicit
                                                set this.explicitTypes = this.schema.compiledExplicit
                                                set this.tag = null
                                                set this.result = ""
                                                set this.duplicates = []
                                                set this.usedDuplicates = null
                                        function z
                                            param i
                                            param g
                                            for ; U < A;
                                                sequence 
                                                    set U =
                                                        iif 
                                                            test
                                                                === 
                                                                    set S = i.indexOf("\n", U)
                                                                    + -1
                                                            then
                                                                sequence 
                                                                    set b = i.slice(U)
                                                                    set A
                                                            else
                                                                sequence 
                                                                    set b = i.slice(U, S + 1)
                                                                    set S + 1
                                                    && 
                                                        + b.length && b !== "\n"
                                                        + N += j
                                                    set N += b
                                            return N
                                        function ct
                                            param i
                                            param g
                                            return "\n" + l.repeat(" ", i.indent * g)
                                        function it
                                            param i
                                            return i === x || i === u
                                        function rt
                                            param i
                                            return 32 <= i && i <= 126 || 161 <= i && i <= 55295 && i !== 8232 && i !== 8233 || 57344 <= i && i <= 65533 && i !== 65279 || 65536 <= i && i <= 1114111
                                        function H
                                            param i
                                            return rt(i) && i !== 65279 && i !== ft && i !== nt && i !== ht && i !== mt && i !== vt && i !== dt && i !== V
                                        function at
                                            param i
                                            return /^\n* /.test(i)
                                        var 
                                            decl ut = 1
                                            decl gt = 2
                                            decl Ct = 3
                                            decl kt = 4
                                            decl J = 5
                                        function Et
                                            param i
                                            param g
                                            param b
                                            param j
                                            param U
                                            var 
                                                decl S
                                                decl N
                                                decl A = !1
                                                decl w = !1
                                                decl B = j !== -1
                                                decl R = -1
                                                decl n
                                                    && 
                                                        iife 
                                                            param y
                                                            return rt(y) && y !== 65279 && !it(y) && y !== xt && y !== tt && y !== dt && y !== ft && y !== nt && y !== ht && y !== mt && y !== vt && y !== V && y !== X && y !== It && y !== v && y !== ot && y !== $ && y !== St && y !== D && y !== Z && y !== P && y !== At
                                                            (
                                                                _ i.charCodeAt(0)
                                                        + !it(i.charCodeAt(i.length - 1))
                                            if g
                                                for ; S < i.length; S++
                                                    if 
                                                        test
                                                            op! 
                                                                _ rt
                                                                    set N = i.charCodeAt(S)
                                                        return J
                                                    set n = n && H(N)
                                            else
                                                for ; S < i.length; S++
                                                    if 
                                                        test
                                                            === 
                                                                set N = i.charCodeAt(S)
                                                                + h
                                                        sequence 
                                                            set A = !0
                                                            && 
                                                                + B
                                                                sequence 
                                                                    set w = w || j < S - R - 1 && i[R + 1] !== " "
                                                                    set R = S
                                                    else
                                                        if !rt(N)
                                                            return J
                                                    set n = n && H(N)
                                                set w = w || B && j < S - R - 1 && i[R + 1] !== " "
                                            return 
                                                iif A || w
                                                    then
                                                        iif 9 < b && at(i)
                                                            then J
                                                            else
                                                                iif w
                                                                    then kt
                                                                    else Ct
                                                    else
                                                        iif n && !U(i)
                                                            then ut
                                                            else gt
                                        function jt
                                            param i
                                            param g
                                            param b
                                            param j
                                            iife 
                                                if g.length === 0
                                                    return "''"
                                                if !i.noCompatMode && E.indexOf(g) !== -1
                                                    return "'" + g + "'"
                                                var 
                                                    decl U = i.indent * Math.max(1, b)
                                                    decl S
                                                        iif i.lineWidth === -1
                                                            then -1
                                                            else Math.max(Math.min(i.lineWidth, 40), i.lineWidth - U)
                                                    decl N = j || -1 < i.flowLevel && b >= i.flowLevel
                                                switch 
                                                    _ Et
                                                        @ g
                                                        @ N
                                                        @expr i.indent
                                                        @ S
                                                        function 
                                                            param A
                                                            iife 
                                                                param w
                                                                param B
                                                                var 
                                                                    decl R
                                                                    decl n
                                                                for ; R < n;
                                                                    if w.implicitTypes[R].resolve(B)
                                                                        return !0
                                                                return !1
                                                                (
                                                                    @ i
                                                                    @ A
                                                    case ut
                                                        return g
                                                    case gt
                                                        return "'" + g.replace(/'/g, "''") + "'"
                                                    case Ct
                                                        return "|" + lt(g, i.indent) + yt(z(g, U))
                                                    case kt
                                                        return 
                                                            op+ 
                                                                + ">" + lt(g, i.indent)
                                                                _ yt
                                                                    _ z
                                                                        iife 
                                                                            param A
                                                                            param w
                                                                            for ; ;
                                                                                var 
                                                                                    decl k = R[1]
                                                                                    decl _ = R[2]
                                                                                sequence 
                                                                                    set B = _[0] === " "
                                                                                    set y +=
                                                                                        op+ 
                                                                                            op+ 
                                                                                                + k
                                                                                                ( 
                                                                                                    iif M || B || _ === ""
                                                                                                        then ""
                                                                                                        else "\n"
                                                                                            + t(_, w)
                                                                                    set M = B
                                                                            return y
                                                                            (
                                                                                @ g
                                                                                @ S
                                                                        @ U
                                                    case J
                                                        return 
                                                            op+ 
                                                                op+ 
                                                                    + '"'
                                                                    iife 
                                                                        param A
                                                                        for ; y < A.length; y++
                                                                            iif 
                                                                                test
                                                                                    && 
                                                                                        && 
                                                                                            && 
                                                                                                <= 
                                                                                                    + 55296
                                                                                                    set w = A.charCodeAt(y)
                                                                                                + w <= 56319
                                                                                            <= 
                                                                                                + 56320
                                                                                                set B = A.charCodeAt(y + 1)
                                                                                        + B <= 57343
                                                                                then
                                                                                    sequence 
                                                                                        set n += et(1024 * (w - 55296) + B - 56320 + 65536)
                                                                                        set y++
                                                                                else
                                                                                    sequence 
                                                                                        set R = bt[w]
                                                                                        set n +=
                                                                                            iif !R && rt(w)
                                                                                                then A[y]
                                                                                                else R || et(w)
                                                                        return n
                                                                        (
                                                                            @ g
                                                                + '"'
                                                    default 
                                                        throw new e("impossible error: invalid scalar style")
                                        function lt
                                            param i
                                            param g
                                            var 
                                                decl b
                                                    iif at(i)
                                                        then String(g)
                                                        else ""
                                                decl j = i[i.length - 1] === "\n"
                                            return 
                                                op+ 
                                                    op+ 
                                                        + b
                                                        ( 
                                                            iif j && (i[i.length - 2] === "\n" || i === "\n")
                                                                then "+"
                                                                else
                                                                    iif j
                                                                        then ""
                                                                        else "-"
                                                    + "\n"
                                        function yt
                                            param i
                                            return 
                                                iif i[i.length - 1] === "\n"
                                                    then i.slice(0, -1)
                                                    else i
                                        function t
                                            param i
                                            param g
                                            if i === "" || i[0] === " "
                                                return i
                                            for ; ;
                                                sequence 
                                                    && 
                                                        op< 
                                                            + g
                                                            op- 
                                                                set A = b.index
                                                                + S
                                                        sequence 
                                                            set j =
                                                                iif S < N
                                                                    then N
                                                                    else A
                                                            set w += "\n" + i.slice(S, j)
                                                            set S = j + 1
                                                    set N = A
                                            return 
                                                sequence 
                                                    set w += "\n"
                                                    iif i.length - S > g && S < N
                                                        then
                                                            set w += i.slice(S, N) + "\n" + i.slice(N + 1)
                                                        else
                                                            set w += i.slice(S)
                                                    _ w.slice(1)
                                        function f
                                            param i
                                            param g
                                            param b
                                            var 
                                                decl j
                                                decl U
                                                decl S
                                                decl N
                                                decl A
                                                decl w
                                            for ; S < N;
                                                if 
                                                    test
                                                        && 
                                                            && 
                                                                (
                                                                    || 
                                                                        + A = U[S]
                                                                            . instanceOf
                                                                        + A.predicate
                                                                + (!A.instanceOf || typeof g == "object" && g instanceof A.instanceOf)
                                                            + (!A.predicate || A.predicate(g))
                                                    if 
                                                        test
                                                            sequence 
                                                                set i.tag =
                                                                    iif b
                                                                        then A.tag
                                                                        else "?"
                                                                @expr A.represent
                                                        if 
                                                            test
                                                                sequence 
                                                                    set w = i.styleMap[A.tag] || A.defaultStyle
                                                                    set r.call(A.represent) === "[object Function]"
                                                            set j = A.represent(g, w)
                                                        else
                                                            if !o.call(A.represent, w)
                                                                throw new e("!<" + A.tag + '> tag resolver accepts not "' + w + '" style')
                                                            set j = A.represent[w](g, w)
                                                        set i.dump = j
                                                    return !0
                                            return !1
                                        function d
                                            param i
                                            param g
                                            param b
                                            param j
                                            param U
                                            param S
                                            sequence 
                                                set i.tag = null
                                                set i.dump = b
                                                @expr f(i, b, !1) || f(i, b, !0)
                                            var N = r.call(i.dump)
                                            && 
                                                + j
                                                + j = i.flowLevel < 0 || i.flowLevel > g
                                            var 
                                                decl A
                                                decl w
                                                decl B = N === "[object Object]" || N === "[object Array]"
                                            if 
                                                test
                                                    sequence 
                                                        && 
                                                            + B
                                                            + w =
                                                                !== 
                                                                    set A = i.duplicates.indexOf(b)
                                                                    + -1
                                                        && 
                                                            + (i.tag !== null && i.tag !== "?" || w || i.indent !== 2 && 0 < g)
                                                            + U = !1
                                                        @expr w && i.usedDuplicates[A]
                                                set i.dump = "*ref_" + A
                                            else
                                                if 
                                                    test
                                                        sequence 
                                                            && 
                                                                + B && w && !i.usedDuplicates[A]
                                                                + i.usedDuplicates[A] = !0
                                                            set N === "[object Object]"
                                                    iif j && Object.keys(i.dump).length !== 0
                                                        then
                                                            sequence 
                                                                iife 
                                                                    param n
                                                                    param y
                                                                    param M
                                                                    param k
                                                                    var 
                                                                        decl _
                                                                        decl C
                                                                        decl q
                                                                        decl O
                                                                        decl W
                                                                        decl Y
                                                                        decl I = ""
                                                                        decl L = n.tag
                                                                        decl K = Object.keys(M)
                                                                    if n.sortKeys === !0
                                                                        _ K.sort()
                                                                    else
                                                                        if typeof n.sortKeys == "function"
                                                                            _ K.sort(n.sortKeys)
                                                                        else
                                                                            if n.sortKeys
                                                                                throw new e("sortKeys must be a boolean or a function")
                                                                    for ; _ < C;
                                                                        sequence 
                                                                            set Y = ""
                                                                            || 
                                                                                + k && _ === 0
                                                                                + Y += ct(n, y)
                                                                            set O =
                                                                                @expr M
                                                                                    .[
                                                                                        set q = K[_]
                                                                            && 
                                                                                + d(n, y + 1, q, !0, !0, !0)
                                                                                sequence 
                                                                                    && 
                                                                                        + W = n.tag !== null && n.tag !== "?" || n.dump && 1024 < n.dump.length
                                                                                        ( 
                                                                                            iif n.dump && h === n.dump.charCodeAt(0)
                                                                                                then
                                                                                                    set Y += "?"
                                                                                                else
                                                                                                    set Y += "? "
                                                                                    set Y += n.dump
                                                                                    && 
                                                                                        + W
                                                                                        + Y += ct(n, y)
                                                                                    && 
                                                                                        + d(n, y + 1, O, !0, W)
                                                                                        sequence 
                                                                                            iif n.dump && h === n.dump.charCodeAt(0)
                                                                                                then
                                                                                                    set Y += ":"
                                                                                                else
                                                                                                    set Y += ": "
                                                                                            set Y += n.dump
                                                                    sequence 
                                                                        set n.tag = L
                                                                        set n.dump = I || "{}"
                                                                    (
                                                                        @ i
                                                                        @ g
                                                                        @expr i.dump
                                                                        @ U
                                                                && 
                                                                    + w
                                                                    + i.dump = "&ref_" + A + i.dump
                                                        else
                                                            sequence 
                                                                iife 
                                                                    param n
                                                                    param y
                                                                    param M
                                                                    var 
                                                                        decl k
                                                                        decl _
                                                                        decl C
                                                                        decl q
                                                                        decl O
                                                                        decl W = ""
                                                                        decl Y = n.tag
                                                                        decl I = Object.keys(M)
                                                                    for ; k < _;
                                                                        sequence 
                                                                            set O =
                                                                                iif n.condenseFlow
                                                                                    then '"'
                                                                                    else ""
                                                                            && 
                                                                                + k !== 0
                                                                                + O += ", "
                                                                            set q =
                                                                                @expr M
                                                                                    .[
                                                                                        set C = I[k]
                                                                            && 
                                                                                + d(n, y, C, !1, !1)
                                                                                sequence 
                                                                                    && 
                                                                                        + 1024 < n.dump.length
                                                                                        + O += "? "
                                                                                    set O +=
                                                                                        op+ 
                                                                                            op+ 
                                                                                                op+ 
                                                                                                    + n.dump
                                                                                                    ( 
                                                                                                        iif n.condenseFlow
                                                                                                            then '"'
                                                                                                            else ""
                                                                                                + ":"
                                                                                            ( 
                                                                                                iif n.condenseFlow
                                                                                                    then ""
                                                                                                    else " "
                                                                                    && 
                                                                                        + d(n, y, q, !1, !1)
                                                                                        + W +=
                                                                                            set O += n.dump
                                                                    sequence 
                                                                        set n.tag = Y
                                                                        set n.dump = "{" + W + "}"
                                                                    (
                                                                        @ i
                                                                        @ g
                                                                        @expr i.dump
                                                                && 
                                                                    + w
                                                                    + i.dump = "&ref_" + A + " " + i.dump
                                                else
                                                    if N === "[object Array]"
                                                        var R
                                                            iif i.noArrayIndent && 0 < g
                                                                then g - 1
                                                                else g
                                                        iif j && i.dump.length !== 0
                                                            then
                                                                sequence 
                                                                    iife 
                                                                        param n
                                                                        param y
                                                                        param M
                                                                        param k
                                                                        var 
                                                                            decl _
                                                                            decl C
                                                                            decl q = ""
                                                                            decl O = n.tag
                                                                        for ; _ < C;
                                                                            && 
                                                                                + d(n, y + 1, M[_], !0, !0)
                                                                                sequence 
                                                                                    || 
                                                                                        + k && _ === 0
                                                                                        + q += ct(n, y)
                                                                                    iif n.dump && h === n.dump.charCodeAt(0)
                                                                                        then
                                                                                            set q += "-"
                                                                                        else
                                                                                            set q += "- "
                                                                                    set q += n.dump
                                                                        sequence 
                                                                            set n.tag = O
                                                                            set n.dump = q || "[]"
                                                                        (
                                                                            @ i
                                                                            @ R
                                                                            @expr i.dump
                                                                            @ U
                                                                    && 
                                                                        + w
                                                                        + i.dump = "&ref_" + A + i.dump
                                                            else
                                                                sequence 
                                                                    iife 
                                                                        param n
                                                                        param y
                                                                        param M
                                                                        var 
                                                                            decl k
                                                                            decl _
                                                                            decl C = ""
                                                                            decl q = n.tag
                                                                        for ; k < _;
                                                                            && 
                                                                                + d(n, y, M[k], !1, !1)
                                                                                sequence 
                                                                                    && 
                                                                                        + k !== 0
                                                                                        + C +=
                                                                                            op+ 
                                                                                                + ","
                                                                                                ( 
                                                                                                    iif n.condenseFlow
                                                                                                        then ""
                                                                                                        else " "
                                                                                    set C += n.dump
                                                                        sequence 
                                                                            set n.tag = q
                                                                            set n.dump = "[" + C + "]"
                                                                        (
                                                                            @ i
                                                                            @ R
                                                                            @expr i.dump
                                                                    && 
                                                                        + w
                                                                        + i.dump = "&ref_" + A + " " + i.dump
                                                    else
                                                        if N !== "[object String]"
                                                            if i.skipInvalid
                                                                return !1
                                                            throw new e("unacceptable kind of an object to dump " + N)
                                                        @expr i.tag !== "?" && jt(i, i.dump, g, S)
                                                && 
                                                    + i.tag !== null && i.tag !== "?"
                                                    + i.dump = "!<" + i.tag + "> " + i.dump
                                            return !0
                                        function F
                                            param i
                                            param g
                                            var 
                                                decl b
                                                decl j
                                                decl U = []
                                                decl S = []
                                            for ; b < j;
                                                _ g.duplicates.push(U[S[b]])
                                            set g.usedDuplicates = new Array(j)
                                        function m
                                            param i
                                            param g
                                            var b
                                                new wt
                                                    set g =
                                                        || 
                                                            + g
                                                            { 
                                            return 
                                                sequence 
                                                    @expr b.noRefs || F(i, b)
                                                    iif d(b, 0, i, !0, !0)
                                                        then b.dump + "\n"
                                                        else ""
                                        sequence 
                                            set p.exports.dump = m
                                            set p.exports.safeDump =
                                                function 
                                                    param i
                                                    param g
                                                    return 
                                                        _ m
                                                            @ i
                                                            _ l.extend
                                                                { 
                                                                    @ schema s
                                                                @ g
                                    { 
                                        @ "./common" 2
                                        @ "./exception" 4
                                        @ "./schema/default_full" 9
                                        @ "./schema/default_safe" 10
                                [ 4
                                    function 
                                        param c
                                        param p
                                        param T
                                        function l
                                            param e
                                            param a
                                            sequence 
                                                _ Error.call(this)
                                                set this.name = "YAMLException"
                                                set this.reason = e
                                                set this.mark = a
                                                set this.message =
                                                    op+ 
                                                        + (this.reason || "(unknown reason)")
                                                        ( 
                                                            iif this.mark
                                                                then " " + this.mark.toString()
                                                                else ""
                                                iif Error.captureStackTrace
                                                    then Error.captureStackTrace(this, this.constructor)
                                                    else
                                                        set this.stack = new Error().stack || ""
                                        sequence 
                                            set =
                                                set =
                                                    set l.prototype = Object.create(Error.prototype)
                                                        . constructor
                                                    @id l
                                                    . prototype
                                                    . toString
                                                function 
                                                    param e
                                                    var a = this.name + ": "
                                                    return 
                                                        sequence 
                                                            set a += this.reason || "(unknown reason)"
                                                            && 
                                                                + !e && this.mark
                                                                + a += " " + this.mark.toString()
                                                            set a
                                            set p.exports = l
                                    { 
                                [ 5
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("./common")
                                            decl e = c("./exception")
                                            decl a = c("./mark")
                                            decl s = c("./schema/default_safe")
                                            decl r = c("./schema/default_full")
                                            decl o = Object.prototype.hasOwnProperty
                                            decl u = 1
                                            decl h = 2
                                            decl x = 3
                                            decl v = 4
                                            decl D = 1
                                            decl V = 2
                                            decl Z = 3
                                            decl X = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/
                                            decl St = /[\x85\u2028\u2029]/
                                            decl It = /[,\[\]\{\}]/
                                            decl ft = /^(?:!|!!|![a-z\-]+!)$/i
                                            decl xt = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i
                                        function dt
                                            param t
                                            return Object.prototype.toString.call(t)
                                        function $
                                            param t
                                            return t === 10 || t === 13
                                        function tt
                                            param t
                                            return t === 9 || t === 32
                                        function P
                                            param t
                                            return t === 9 || t === 32 || t === 10 || t === 13
                                        function nt
                                            param t
                                            return t === 44 || t === 91 || t === 93 || t === 123 || t === 125
                                        function ht
                                            param t
                                            return 
                                                iif t === 48
                                                    then "\0"
                                                    else
                                                        iif t === 97
                                                            then "\x07"
                                                            else
                                                                iif t === 98
                                                                    then "\b"
                                                                    else
                                                                        iif t === 116 || t === 9
                                                                            then "	"
                                                                            else
                                                                                iif t === 110
                                                                                    then "\n"
                                                                                    else
                                                                                        iif t === 118
                                                                                            then "\v"
                                                                                            else
                                                                                                iif t === 102
                                                                                                    then "\f"
                                                                                                    else
                                                                                                        iif t === 114
                                                                                                            then "\r"
                                                                                                            else
                                                                                                                iif t === 101
                                                                                                                    then ""
                                                                                                                    else
                                                                                                                        iif t === 32
                                                                                                                            then " "
                                                                                                                            else
                                                                                                                                iif t === 34
                                                                                                                                    then '"'
                                                                                                                                    else
                                                                                                                                        iif t === 47
                                                                                                                                            then "/"
                                                                                                                                            else
                                                                                                                                                iif t === 92
                                                                                                                                                    then "\\"
                                                                                                                                                    else
                                                                                                                                                        iif t === 78
                                                                                                                                                            then "\x85"
                                                                                                                                                            else
                                                                                                                                                                iif t === 95
                                                                                                                                                                    then " "
                                                                                                                                                                    else
                                                                                                                                                                        iif t === 76
                                                                                                                                                                            then "\u2028"
                                                                                                                                                                            else
                                                                                                                                                                                iif t === 80
                                                                                                                                                                                    then "\u2029"
                                                                                                                                                                                    else ""
                                        for var At = new Array(256), mt = new Array(256), ot = 0; ot < 256; ot++
                                            sequence 
                                                set At[ot] =
                                                    iif ht(ot)
                                                        then 1
                                                        else 0
                                                set mt[ot] = ht(ot)
                                        function vt
                                            param t
                                            param f
                                            sequence 
                                                set this.input = t
                                                set this.filename = f.filename || null
                                                set this.schema = f.schema || r
                                                set this.onWarning = f.onWarning || null
                                                set this.legacy = f.legacy || !1
                                                set this.json = f.json || !1
                                                set this.listener = f.listener || null
                                                set this.implicitTypes = this.schema.compiledImplicit
                                                set this.typeMap = this.schema.compiledTypeMap
                                                set this.length = t.length
                                                set this.position = 0
                                                set this.line = 0
                                                set this.lineStart = 0
                                                set this.lineIndent = 0
                                                set this.documents = []
                                        function bt
                                            param t
                                            param f
                                            return new e(f, a(t.filename, t.input, t.position, t.line, t.position - t.lineStart))
                                        function E
                                            param t
                                            param f
                                            throw bt(t, f)
                                        function et
                                            param t
                                            param f
                                            @expr t.onWarning && t.onWarning.call(null, bt(t, f))
                                        var wt
                                            { 
                                                @ YAML
                                                    function 
                                                        param t
                                                        param f
                                                        param d
                                                        var 
                                                            decl F
                                                            decl m
                                                            decl i
                                                        sequence 
                                                            @expr t.version !== null && E(t, "duplication of %YAML directive")
                                                            @expr d.length !== 1 && E(t, "YAML directive accepts exactly one argument")
                                                            && 
                                                                === 
                                                                    set F = /^([0-9]+)\.([0-9]+)$/.exec(d[0])
                                                                    + null
                                                                + E(t, "ill-formed argument of the YAML directive")
                                                            set m = parseInt(F[1], 10)
                                                            set i = parseInt(F[2], 10)
                                                            @expr m !== 1 && E(t, "unacceptable YAML version of the document")
                                                            set t.version = d[0]
                                                            set t.checkLineBreaks = i < 2
                                                            @expr i !== 1 && i !== 2 && et(t, "unsupported YAML version of the document")
                                                @ TAG
                                                    function 
                                                        param t
                                                        param f
                                                        param d
                                                        var 
                                                            decl F
                                                            decl m
                                                        sequence 
                                                            @expr d.length !== 2 && E(t, "TAG directive accepts exactly two arguments")
                                                            set F = d[0]
                                                            set m = d[1]
                                                            @expr ft.test(F) || E(t, "ill-formed tag handle (first argument) of the TAG directive")
                                                            @expr o.call(t.tagMap, F) && E(t, 'there is a previously declared suffix for "' + F + '" tag handle')
                                                            @expr xt.test(m) || E(t, "ill-formed tag prefix (second argument) of the TAG directive")
                                                            set t.tagMap[F] = m
                                        function z
                                            param t
                                            param f
                                            param d
                                            param F
                                            var 
                                                decl m
                                                decl i
                                                decl g
                                                decl b
                                            if f < d
                                                if 
                                                    test
                                                        sequence 
                                                            set b = t.input.slice(f, d)
                                                            set F
                                                    for ; m < i;
                                                        || 
                                                            || 
                                                                === 
                                                                    set g = b.charCodeAt(m)
                                                                    + 9
                                                                + 32 <= g && g <= 1114111
                                                            + E(t, "expected valid JSON character")
                                                else
                                                    @expr X.test(b) && E(t, "the stream contains non-printable characters")
                                                set t.result += b
                                        function ct
                                            param t
                                            param f
                                            param d
                                            param F
                                            var 
                                                decl m
                                                decl i
                                                decl g
                                                decl b
                                            for ; g < b;
                                                sequence 
                                                    set i = m[g]
                                                    || 
                                                        + o.call(f, i)
                                                        sequence 
                                                            set f[i] = d[i]
                                                            set F[i] = !0
                                        function it
                                            param t
                                            param f
                                            param d
                                            param F
                                            param m
                                            param i
                                            param g
                                            param b
                                            var 
                                                decl j
                                                decl U
                                            if Array.isArray(m)
                                                for ; j < U;
                                                    sequence 
                                                        @expr Array.isArray(m[j]) && E(t, "nested arrays are not supported inside keys")
                                                        && 
                                                            + typeof m == "object" && dt(m[j]) === "[object Object]"
                                                            + m[j] = "[object Object]"
                                            if 
                                                test
                                                    sequence 
                                                        && 
                                                            + typeof m == "object" && dt(m) === "[object Object]"
                                                            + m = "[object Object]"
                                                        set m = String(m)
                                                        && 
                                                            + f === null
                                                            + f =
                                                                { 
                                                        set F === "tag:yaml.org,2002:merge"
                                                if Array.isArray(i)
                                                    for ; j < U;
                                                        _ ct(t, f, i[j], d)
                                                else
                                                    _ ct(t, f, i, d)
                                            else
                                                sequence 
                                                    || 
                                                        + t.json || o.call(d, m) || !o.call(f, m)
                                                        sequence 
                                                            set t.line = g || t.line
                                                            set t.position = b || t.position
                                                            _ E(t, "duplicated mapping key")
                                                    set f[m] = i
                                                    delete d[m]
                                            return f
                                        function rt
                                            param t
                                            var f
                                            sequence 
                                                iif 
                                                    test
                                                        === 
                                                            set f = t.input.charCodeAt(t.position)
                                                            + 10
                                                    then t.position++
                                                    else
                                                        iif f === 13
                                                            then
                                                                sequence 
                                                                    set t.position++
                                                                    @expr t.input.charCodeAt(t.position) === 10 && t.position++
                                                            else E(t, "a line break is expected")
                                                set t.line += 1
                                                set t.lineStart = t.position
                                        function H
                                            param t
                                            param f
                                            param d
                                            for var F = 0, m = t.input.charCodeAt(t.position); m !== 0;
                                                for ; tt(m);
                                                    set m = t.input.charCodeAt(++t.position)
                                                if f && m === 35
                                                    for ; ;
                                                if !$(m)
                                                    break 
                                                for ; m === 32;
                                                    sequence 
                                                        set t.lineIndent++
                                                        set m = t.input.charCodeAt(++t.position)
                                            return 
                                                sequence 
                                                    @expr d !== -1 && F !== 0 && t.lineIndent < d && et(t, "deficient indentation")
                                                    set F
                                        function at
                                            param t
                                            var 
                                                decl f
                                                decl d = t.position
                                            return 
                                                op! 
                                                    (
                                                        || 
                                                            || 
                                                                || 
                                                                    && 
                                                                        !== 
                                                                            set f = t.input.charCodeAt(d)
                                                                            + 45
                                                                        + f !== 46
                                                                    + f !== t.input.charCodeAt(d + 1)
                                                                + f !== t.input.charCodeAt(d + 2)
                                                            sequence 
                                                                set d += 3
                                                                && 
                                                                    !== 
                                                                        set f = t.input.charCodeAt(d)
                                                                        + 0
                                                                    + !P(f)
                                        function ut
                                            param t
                                            param f
                                            iif f === 1
                                                then
                                                    set t.result += " "
                                                else
                                                    && 
                                                        + 1 < f
                                                        + t.result += l.repeat("\n", f - 1)
                                        function gt
                                            param t
                                            param f
                                            var 
                                                decl d
                                                decl F
                                                decl m = t.tag
                                                decl i = t.anchor
                                                decl g = []
                                                decl b = !1
                                            for ; F !== 0 && F === 45 && P(t.input.charCodeAt(t.position + 1));
                                                if 
                                                    test
                                                        sequence 
                                                            set b = !0
                                                            set t.position++
                                                            @expr H(t, !0, -1) && t.lineIndent <= f
                                                    sequence 
                                                        _ g.push(null)
                                                        set F = t.input.charCodeAt(t.position)
                                                else
                                                    if 
                                                        test
                                                            sequence 
                                                                set d = t.line
                                                                _ J(t, f, x, !1, !0)
                                                                _ g.push(t.result)
                                                                _ H(t, !0, -1)
                                                                set F = t.input.charCodeAt(t.position)
                                                                @expr (t.line === d || t.lineIndent > f) && F !== 0
                                                        _ E(t, "bad indentation of a sequence entry")
                                                    else
                                                        if t.lineIndent < f
                                                            break 
                                            return 
                                                && 
                                                    + !!b
                                                    sequence 
                                                        set t.tag = m
                                                        set t.anchor = i
                                                        set t.kind = "sequence"
                                                        set t.result = g
                                                        op! 0
                                        function Ct
                                            param t
                                            var 
                                                decl f
                                                decl d
                                                decl F
                                                decl m
                                                decl i = !1
                                                decl g = !1
                                            if 
                                                test
                                                    !== 
                                                        set m = t.input.charCodeAt(t.position)
                                                        + 33
                                                return !1
                                            if 
                                                test
                                                    sequence 
                                                        @expr t.tag !== null && E(t, "duplication of a tag property")
                                                        iif 
                                                            test
                                                                === 
                                                                    set m = t.input.charCodeAt(++t.position)
                                                                    + 60
                                                            then
                                                                sequence 
                                                                    set i = !0
                                                                    set m = t.input.charCodeAt(++t.position)
                                                            else
                                                                iif m === 33
                                                                    then
                                                                        sequence 
                                                                            set g = !0
                                                                            set d = "!!"
                                                                            set m = t.input.charCodeAt(++t.position)
                                                                    else
                                                                        set d = "!"
                                                        set f = t.position
                                                        set i
                                                for ; ;
                                                iif t.position < t.length
                                                    then
                                                        sequence 
                                                            set F = t.input.slice(f, t.position)
                                                            set m = t.input.charCodeAt(++t.position)
                                                    else E(t, "unexpected end of the stream within a verbatim tag")
                                            else
                                                for ; m !== 0 && !P(m);
                                                    sequence 
                                                        && 
                                                            + m === 33
                                                            ( 
                                                                iif g
                                                                    then E(t, "tag suffix cannot contain exclamation marks")
                                                                    else
                                                                        sequence 
                                                                            set d = t.input.slice(f - 1, t.position + 1)
                                                                            @expr ft.test(d) || E(t, "named tag handle cannot contain such characters")
                                                                            set g = !0
                                                                            set f = t.position + 1
                                                        set m = t.input.charCodeAt(++t.position)
                                                sequence 
                                                    set F = t.input.slice(f, t.position)
                                                    @expr It.test(F) && E(t, "tag suffix cannot contain flow indicator characters")
                                            return 
                                                sequence 
                                                    @expr F && !xt.test(F) && E(t, "tag name cannot contain such characters: " + F)
                                                    iif i
                                                        then
                                                            set t.tag = F
                                                        else
                                                            iif o.call(t.tagMap, d)
                                                                then
                                                                    set t.tag = t.tagMap[d] + F
                                                                else
                                                                    iif d === "!"
                                                                        then
                                                                            set t.tag = "!" + F
                                                                        else
                                                                            iif d === "!!"
                                                                                then
                                                                                    set t.tag = "tag:yaml.org,2002:" + F
                                                                                else E(t, 'undeclared tag handle "' + d + '"')
                                                    op! 0
                                        function kt
                                            param t
                                            var 
                                                decl f
                                                decl d
                                            if 
                                                test
                                                    !== 
                                                        set d = t.input.charCodeAt(t.position)
                                                        + 38
                                                return !1
                                            for ; d !== 0 && !P(d) && !nt(d);
                                                set d = t.input.charCodeAt(++t.position)
                                            return 
                                                sequence 
                                                    @expr t.position === f && E(t, "name of an anchor node must contain at least one character")
                                                    set t.anchor = t.input.slice(f, t.position)
                                                    op! 0
                                        function J
                                            param t
                                            param f
                                            param d
                                            param F
                                            param m
                                            var 
                                                decl i
                                                decl g
                                                decl b
                                                decl j
                                                decl U
                                                decl S
                                                decl N
                                                decl A
                                                decl w = 1
                                                decl B = !1
                                                decl R = !1
                                            if 
                                                test
                                                    sequence 
                                                        @expr t.listener !== null && t.listener("open", t)
                                                        set t.tag = null
                                                        set t.anchor = null
                                                        set t.kind = null
                                                        set t.result = null
                                                        set b = v === d || x === d
                                                        && 
                                                            + F && H(t, !0, -1)
                                                            sequence 
                                                                set B = !0
                                                                iif t.lineIndent > f
                                                                    then
                                                                        set w = 1
                                                                    else
                                                                        iif t.lineIndent === f
                                                                            then
                                                                                set w = 0
                                                                            else
                                                                                && 
                                                                                    + t.lineIndent < f
                                                                                    + w = -1
                                                        set w === 1
                                                for ; Ct(t) || kt(t);
                                                    iif H(t, !0, -1)
                                                        then
                                                            sequence 
                                                                set B = !0
                                                                set b = i
                                                                iif t.lineIndent > f
                                                                    then
                                                                        set w = 1
                                                                    else
                                                                        iif t.lineIndent === f
                                                                            then
                                                                                set w = 0
                                                                            else
                                                                                && 
                                                                                    + t.lineIndent < f
                                                                                    + w = -1
                                                        else
                                                            set b = !1
                                            if 
                                                test
                                                    sequence 
                                                        && 
                                                            + b
                                                            + b = B || m
                                                        || 
                                                            + w !== 1 && v !== d
                                                            sequence 
                                                                set N =
                                                                    iif u === d || h === d
                                                                        then f
                                                                        else f + 1
                                                                set A = t.position - t.lineStart
                                                                iif w === 1
                                                                    then
                                                                        iif 
                                                                            test
                                                                                || 
                                                                                    && 
                                                                                        + b
                                                                                        (
                                                                                            || 
                                                                                                + gt(t, A)
                                                                                                iife 
                                                                                                    param n
                                                                                                    param y
                                                                                                    param M
                                                                                                    var 
                                                                                                        decl k
                                                                                                        decl _
                                                                                                        decl C
                                                                                                        decl q
                                                                                                        decl O
                                                                                                        decl W = n.tag
                                                                                                        decl Y = n.anchor
                                                                                                        decl I
                                                                                                            { 
                                                                                                        decl L
                                                                                                            { 
                                                                                                        decl K = null
                                                                                                        decl Q = null
                                                                                                        decl st = null
                                                                                                        decl G = !1
                                                                                                        decl pt = !1
                                                                                                    for ; O !== 0;
                                                                                                        if 
                                                                                                            test
                                                                                                                sequence 
                                                                                                                    set k = n.input.charCodeAt(n.position + 1)
                                                                                                                    set C = n.line
                                                                                                                    set q = n.position
                                                                                                                    @expr O !== 63 && O !== 58 || !P(k)
                                                                                                            if !J(n, M, h, !1, !0)
                                                                                                                break 
                                                                                                            if n.line === C
                                                                                                                for ; tt(O);
                                                                                                                    set O = n.input.charCodeAt(++n.position)
                                                                                                                if O === 58
                                                                                                                    sequence 
                                                                                                                        || 
                                                                                                                            _ P
                                                                                                                                set O = n.input.charCodeAt(++n.position)
                                                                                                                            + E(n, "a whitespace character is expected after the key-value separator within a block mapping")
                                                                                                                        && 
                                                                                                                            + G
                                                                                                                            sequence 
                                                                                                                                _ it(n, I, L, K, Q, null)
                                                                                                                                set st = null
                                                                                                                        set G =
                                                                                                                            op! 
                                                                                                                                set pt = !0
                                                                                                                        set K = n.tag
                                                                                                                        set Q = n.result
                                                                                                                else
                                                                                                                    if !pt
                                                                                                                        return 
                                                                                                                            sequence 
                                                                                                                                set n.tag = W
                                                                                                                                set n.anchor = Y
                                                                                                                                op! 0
                                                                                                                    _ E(n, "can not read an implicit mapping pair; a colon is missed")
                                                                                                            else
                                                                                                                if !pt
                                                                                                                    return 
                                                                                                                        sequence 
                                                                                                                            set n.tag = W
                                                                                                                            set n.anchor = Y
                                                                                                                            op! 0
                                                                                                                _ E(n, "can not read a block mapping entry; a multiline key may not be an implicit key")
                                                                                                        else
                                                                                                            sequence 
                                                                                                                iif O === 63
                                                                                                                    then
                                                                                                                        sequence 
                                                                                                                            && 
                                                                                                                                + G
                                                                                                                                sequence 
                                                                                                                                    _ it(n, I, L, K, Q, null)
                                                                                                                                    set st = null
                                                                                                                            set pt = !0
                                                                                                                    else
                                                                                                                        iif G
                                                                                                                            then
                                                                                                                                set _ =
                                                                                                                                    op! 
                                                                                                                                        set G = !1
                                                                                                                            else E(n, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line")
                                                                                                                set n.position += 1
                                                                                                                set O = k
                                                                                                        if 
                                                                                                            test
                                                                                                                sequence 
                                                                                                                    && 
                                                                                                                        + (n.line === C || n.lineIndent > y)
                                                                                                                        sequence 
                                                                                                                            && 
                                                                                                                                + J(n, y, v, !0, _)
                                                                                                                                ( 
                                                                                                                                    iif G
                                                                                                                                        then
                                                                                                                                            set Q = n.result
                                                                                                                                        else
                                                                                                                                            set st = n.result
                                                                                                                            || 
                                                                                                                                + G
                                                                                                                                sequence 
                                                                                                                                    _ it(n, I, L, K, Q, st, C, q)
                                                                                                                                    set st = null
                                                                                                                            _ H(n, !0, -1)
                                                                                                                            set O = n.input.charCodeAt(n.position)
                                                                                                                    @expr n.lineIndent > y && O !== 0
                                                                                                            _ E(n, "bad indentation of a mapping entry")
                                                                                                        else
                                                                                                            if n.lineIndent < y
                                                                                                                break 
                                                                                                    return 
                                                                                                        sequence 
                                                                                                            @expr G && it(n, I, L, K, Q, null)
                                                                                                            && 
                                                                                                                + pt
                                                                                                                sequence 
                                                                                                                    set n.tag = W
                                                                                                                    set n.anchor = Y
                                                                                                                    set n.kind = "mapping"
                                                                                                                    set n.result = I
                                                                                                            set pt
                                                                                                    (
                                                                                                        @ t
                                                                                                        @ A
                                                                                                        @ N
                                                                                    iife 
                                                                                        param n
                                                                                        param y
                                                                                        var 
                                                                                            decl M
                                                                                            decl k
                                                                                            decl _
                                                                                            decl C
                                                                                            decl q
                                                                                            decl O
                                                                                            decl W
                                                                                            decl Y
                                                                                            decl I
                                                                                            decl L
                                                                                            decl K = !0
                                                                                            decl Q = n.tag
                                                                                            decl st = n.anchor
                                                                                            decl G
                                                                                                { 
                                                                                        if 
                                                                                            test
                                                                                                === 
                                                                                                    set L = n.input.charCodeAt(n.position)
                                                                                                    + 91
                                                                                            sequence 
                                                                                                set O =
                                                                                                    op! 
                                                                                                        set _ = 93
                                                                                                set k = []
                                                                                        else
                                                                                            if L !== 123
                                                                                                return !1
                                                                                            sequence 
                                                                                                set _ = 125
                                                                                                set O = !0
                                                                                                set k =
                                                                                                    { 
                                                                                        for ; L !== 0;
                                                                                            if 
                                                                                                test
                                                                                                    sequence 
                                                                                                        _ H(n, !0, y)
                                                                                                        === 
                                                                                                            set L = n.input.charCodeAt(n.position)
                                                                                                            + _
                                                                                                return 
                                                                                                    sequence 
                                                                                                        set n.position++
                                                                                                        set n.tag = Q
                                                                                                        set n.anchor = st
                                                                                                        set n.kind =
                                                                                                            iif O
                                                                                                                then "mapping"
                                                                                                                else "sequence"
                                                                                                        set n.result = k
                                                                                                        op! 0
                                                                                            sequence 
                                                                                                @expr K || E(n, "missed comma between flow collection entries")
                                                                                                set I = null
                                                                                                set q = !1
                                                                                                && 
                                                                                                    + L === 63 && P(n.input.charCodeAt(n.position + 1))
                                                                                                    sequence 
                                                                                                        set q = !0
                                                                                                        set n.position++
                                                                                                        _ H(n, !0, y)
                                                                                                set M = n.line
                                                                                                _ J(n, y, u, !1, !0)
                                                                                                set Y = n.tag
                                                                                                set W = n.result
                                                                                                _ H(n, !0, y)
                                                                                                set L = n.input.charCodeAt(n.position)
                                                                                                || 
                                                                                                    + !q && n.line !== M || L !== 58
                                                                                                    sequence 
                                                                                                        set C = !0
                                                                                                        set L = n.input.charCodeAt(++n.position)
                                                                                                        _ H(n, !0, y)
                                                                                                        _ J(n, y, u, !1, !0)
                                                                                                        set I = n.result
                                                                                                iif O
                                                                                                    then it(n, k, G, Y, W, I)
                                                                                                    else
                                                                                                        iif C
                                                                                                            then k.push(it(n, null, G, Y, W, I))
                                                                                                            else k.push(W)
                                                                                                _ H(n, !0, y)
                                                                                                iif 
                                                                                                    test
                                                                                                        === 
                                                                                                            set L = n.input.charCodeAt(n.position)
                                                                                                            + 44
                                                                                                    then
                                                                                                        sequence 
                                                                                                            set K = !0
                                                                                                            set L = n.input.charCodeAt(++n.position)
                                                                                                    else
                                                                                                        set K = !1
                                                                                        _ E(n, "unexpected end of the stream within a flow collection")
                                                                                        (
                                                                                            @ t
                                                                                            @ N
                                                                            then
                                                                                set R = !0
                                                                            else
                                                                                sequence 
                                                                                    iif 
                                                                                        test
                                                                                            || 
                                                                                                || 
                                                                                                    && 
                                                                                                        + g
                                                                                                        iife 
                                                                                                            param n
                                                                                                            param y
                                                                                                            var 
                                                                                                                decl M
                                                                                                                decl k
                                                                                                                decl _
                                                                                                                decl C
                                                                                                                decl q
                                                                                                                decl O = D
                                                                                                                decl W = !1
                                                                                                                decl Y = !1
                                                                                                                decl I = y
                                                                                                                decl L = 0
                                                                                                                decl K = !1
                                                                                                            if 
                                                                                                                test
                                                                                                                    === 
                                                                                                                        set C = n.input.charCodeAt(n.position)
                                                                                                                        + 124
                                                                                                                set k = !1
                                                                                                            else
                                                                                                                if C !== 62
                                                                                                                    return !1
                                                                                                                set k = !0
                                                                                                            for ; C !== 0;
                                                                                                                if 
                                                                                                                    test
                                                                                                                        || 
                                                                                                                            === 
                                                                                                                                set C = n.input.charCodeAt(++n.position)
                                                                                                                                + 43
                                                                                                                            + C === 45
                                                                                                                    iif D === O
                                                                                                                        then
                                                                                                                            set O =
                                                                                                                                iif C === 43
                                                                                                                                    then Z
                                                                                                                                    else V
                                                                                                                        else E(n, "repeat of a chomping mode identifier")
                                                                                                                else
                                                                                                                    if 
                                                                                                                        test
                                                                                                                            op! 
                                                                                                                                <= 
                                                                                                                                    + 0
                                                                                                                                    set _ =
                                                                                                                                        iif 
                                                                                                                                            test
                                                                                                                                                && 
                                                                                                                                                    <= 
                                                                                                                                                        + 48
                                                                                                                                                        set q = C
                                                                                                                                                    + q <= 57
                                                                                                                                            then q - 48
                                                                                                                                            else -1
                                                                                                                        break 
                                                                                                                    iif _ == 0
                                                                                                                        then E(n, "bad explicit indentation width of a block scalar; it cannot be less than one")
                                                                                                                        else
                                                                                                                            iif Y
                                                                                                                                then E(n, "repeat of an indentation width identifier")
                                                                                                                                else
                                                                                                                                    sequence 
                                                                                                                                        set I = y + _ - 1
                                                                                                                                        set Y = !0
                                                                                                            if tt(C)
                                                                                                                for ; ;
                                                                                                                if C === 35
                                                                                                                    for ; ;
                                                                                                            for ; C !== 0;
                                                                                                                for ; (!Y || n.lineIndent < I) && C === 32;
                                                                                                                    sequence 
                                                                                                                        set n.lineIndent++
                                                                                                                        set C = n.input.charCodeAt(++n.position)
                                                                                                                if 
                                                                                                                    test
                                                                                                                        sequence 
                                                                                                                            && 
                                                                                                                                + !Y && n.lineIndent > I
                                                                                                                                + I = n.lineIndent
                                                                                                                            _ $(C)
                                                                                                                    set L++
                                                                                                                else
                                                                                                                    if n.lineIndent < I
                                                                                                                        iif O === Z
                                                                                                                            then
                                                                                                                                set n.result +=
                                                                                                                                    _ l.repeat
                                                                                                                                        @ "\n"
                                                                                                                                        iif W
                                                                                                                                            then 1 + L
                                                                                                                                            else L
                                                                                                                            else
                                                                                                                                && 
                                                                                                                                    + O === D && W
                                                                                                                                    + n.result += "\n"
                                                                                                                        break 
                                                                                                                    for ; !$(C) && C !== 0;
                                                                                                                        set C = n.input.charCodeAt(++n.position)
                                                                                                                    _ z(n, M, n.position, !1)
                                                                                                            return !0
                                                                                                            (
                                                                                                                @ t
                                                                                                                @ N
                                                                                                    iife 
                                                                                                        param n
                                                                                                        param y
                                                                                                        var 
                                                                                                            decl M
                                                                                                            decl k
                                                                                                            decl _
                                                                                                        if 
                                                                                                            test
                                                                                                                !== 
                                                                                                                    set M = n.input.charCodeAt(n.position)
                                                                                                                    + 39
                                                                                                            return !1
                                                                                                        for ; ;
                                                                                                            if M === 39
                                                                                                                if 
                                                                                                                    test
                                                                                                                        sequence 
                                                                                                                            _ z(n, k, n.position, !0)
                                                                                                                            !== 
                                                                                                                                set M = n.input.charCodeAt(++n.position)
                                                                                                                                + 39
                                                                                                                    return !0
                                                                                                                sequence 
                                                                                                                    set k = n.position
                                                                                                                    set n.position++
                                                                                                                    set _ = n.position
                                                                                                            else
                                                                                                                iif $(M)
                                                                                                                    then
                                                                                                                        sequence 
                                                                                                                            _ z(n, k, _, !0)
                                                                                                                            _ ut(n, H(n, !1, y))
                                                                                                                            set _ = n.position
                                                                                                                    else
                                                                                                                        iif n.position === n.lineStart && at(n)
                                                                                                                            then E(n, "unexpected end of the document within a single quoted scalar")
                                                                                                                            else
                                                                                                                                sequence 
                                                                                                                                    set n.position++
                                                                                                                                    set _ = n.position
                                                                                                        _ E(n, "unexpected end of the stream within a single quoted scalar")
                                                                                                        (
                                                                                                            @ t
                                                                                                            @ N
                                                                                                iife 
                                                                                                    param n
                                                                                                    param y
                                                                                                    var 
                                                                                                        decl M
                                                                                                        decl k
                                                                                                        decl _
                                                                                                        decl C
                                                                                                        decl q
                                                                                                        decl O
                                                                                                        decl W
                                                                                                        decl Y
                                                                                                        decl I
                                                                                                        decl L
                                                                                                    if 
                                                                                                        test
                                                                                                            !== 
                                                                                                                set O = n.input.charCodeAt(n.position)
                                                                                                                + 34
                                                                                                        return !1
                                                                                                    for ; ;
                                                                                                        if O === 34
                                                                                                            return 
                                                                                                                sequence 
                                                                                                                    _ z(n, M, n.position, !0)
                                                                                                                    set n.position++
                                                                                                                    op! 0
                                                                                                        if O === 92
                                                                                                            if 
                                                                                                                test
                                                                                                                    sequence 
                                                                                                                        _ z(n, M, n.position, !0)
                                                                                                                        _ $
                                                                                                                            set O = n.input.charCodeAt(++n.position)
                                                                                                                _ H(n, !1, y)
                                                                                                            else
                                                                                                                if O < 256 && At[O]
                                                                                                                    sequence 
                                                                                                                        set n.result += mt[O]
                                                                                                                        set n.position++
                                                                                                                else
                                                                                                                    if 
                                                                                                                        test
                                                                                                                            op< 
                                                                                                                                + 0
                                                                                                                                set q =
                                                                                                                                    iif 
                                                                                                                                        test
                                                                                                                                            === 
                                                                                                                                                set L = O
                                                                                                                                                + 120
                                                                                                                                        then 2
                                                                                                                                        else
                                                                                                                                            iif L === 117
                                                                                                                                                then 4
                                                                                                                                                else
                                                                                                                                                    iif L === 85
                                                                                                                                                        then 8
                                                                                                                                                        else 0
                                                                                                                        for ; 0 < _; _--
                                                                                                                            sequence 
                                                                                                                                set O = n.input.charCodeAt(++n.position)
                                                                                                                                set I = void 0
                                                                                                                                iif 
                                                                                                                                    test
                                                                                                                                        <= 
                                                                                                                                            + 0
                                                                                                                                            set q =
                                                                                                                                                iif 
                                                                                                                                                    test
                                                                                                                                                        && 
                                                                                                                                                            <= 
                                                                                                                                                                + 48
                                                                                                                                                                set Y = O
                                                                                                                                                            + Y <= 57
                                                                                                                                                    then Y - 48
                                                                                                                                                    else
                                                                                                                                                        iif 
                                                                                                                                                            test
                                                                                                                                                                && 
                                                                                                                                                                    <= 
                                                                                                                                                                        + 97
                                                                                                                                                                        set I = 32 | Y
                                                                                                                                                                    + I <= 102
                                                                                                                                                            then I - 97 + 10
                                                                                                                                                            else -1
                                                                                                                                    then
                                                                                                                                        set C = (C << 4) + q
                                                                                                                                    else E(n, "expected hexadecimal character")
                                                                                                                        sequence 
                                                                                                                            set n.result +=
                                                                                                                                iif 
                                                                                                                                    test
                                                                                                                                        <= 
                                                                                                                                            set W = C
                                                                                                                                            + 65535
                                                                                                                                    then String.fromCharCode(W)
                                                                                                                                    else String.fromCharCode(55296 + (W - 65536 >> 10), 56320 + (W - 65536 & 1023))
                                                                                                                            set n.position++
                                                                                                                    else
                                                                                                                        _ E(n, "unknown escape sequence")
                                                                                                            set k = n.position
                                                                                                        else
                                                                                                            iif $(O)
                                                                                                                then
                                                                                                                    sequence 
                                                                                                                        _ z(n, M, k, !0)
                                                                                                                        _ ut(n, H(n, !1, y))
                                                                                                                        set k = n.position
                                                                                                                else
                                                                                                                    iif n.position === n.lineStart && at(n)
                                                                                                                        then E(n, "unexpected end of the document within a double quoted scalar")
                                                                                                                        else
                                                                                                                            sequence 
                                                                                                                                set n.position++
                                                                                                                                set k = n.position
                                                                                                    _ E(n, "unexpected end of the stream within a double quoted scalar")
                                                                                                    (
                                                                                                        @ t
                                                                                                        @ N
                                                                                        then
                                                                                            set R = !0
                                                                                        else
                                                                                            iif 
                                                                                                iife 
                                                                                                    param n
                                                                                                    var 
                                                                                                        decl y
                                                                                                        decl M
                                                                                                        decl k
                                                                                                    if 
                                                                                                        test
                                                                                                            !== 
                                                                                                                set k = n.input.charCodeAt(n.position)
                                                                                                                + 42
                                                                                                        return !1
                                                                                                    for ; k !== 0 && !P(k) && !nt(k);
                                                                                                        set k = n.input.charCodeAt(++n.position)
                                                                                                    return 
                                                                                                        sequence 
                                                                                                            @expr n.position === y && E(n, "name of an alias node must contain at least one character")
                                                                                                            set M = n.input.slice(y, n.position)
                                                                                                            @expr n.anchorMap.hasOwnProperty(M) || E(n, 'unidentified alias "' + M + '"')
                                                                                                            set n.result = n.anchorMap[M]
                                                                                                            _ H(n, !0, -1)
                                                                                                            op! 0
                                                                                                    (
                                                                                                        @ t
                                                                                                then
                                                                                                    sequence 
                                                                                                        set R = !0
                                                                                                        @expr t.tag === null && t.anchor === null || E(t, "alias node should not have any properties")
                                                                                                else
                                                                                                    && 
                                                                                                        iife 
                                                                                                            param n
                                                                                                            param y
                                                                                                            param M
                                                                                                            var 
                                                                                                                decl k
                                                                                                                decl _
                                                                                                                decl C
                                                                                                                decl q
                                                                                                                decl O
                                                                                                                decl W
                                                                                                                decl Y
                                                                                                                decl I
                                                                                                                decl L = n.kind
                                                                                                                decl K = n.result
                                                                                                            if 
                                                                                                                test
                                                                                                                    || 
                                                                                                                        || 
                                                                                                                            || 
                                                                                                                                || 
                                                                                                                                    || 
                                                                                                                                        || 
                                                                                                                                            || 
                                                                                                                                                || 
                                                                                                                                                    || 
                                                                                                                                                        || 
                                                                                                                                                            || 
                                                                                                                                                                || 
                                                                                                                                                                    || 
                                                                                                                                                                        _ P
                                                                                                                                                                            set I = n.input.charCodeAt(n.position)
                                                                                                                                                                        + nt(I)
                                                                                                                                                                    + I === 35
                                                                                                                                                                + I === 38
                                                                                                                                                            + I === 42
                                                                                                                                                        + I === 33
                                                                                                                                                    + I === 124
                                                                                                                                                + I === 62
                                                                                                                                            + I === 39
                                                                                                                                        + I === 34
                                                                                                                                    + I === 37
                                                                                                                                + I === 64
                                                                                                                            + I === 96
                                                                                                                        && 
                                                                                                                            + (I === 63 || I === 45)
                                                                                                                            (
                                                                                                                                || 
                                                                                                                                    _ P
                                                                                                                                        set k = n.input.charCodeAt(n.position + 1)
                                                                                                                                    + M && nt(k)
                                                                                                                return !1
                                                                                                            for ; I !== 0;
                                                                                                                if I === 58
                                                                                                                    if 
                                                                                                                        test
                                                                                                                            || 
                                                                                                                                _ P
                                                                                                                                    set k = n.input.charCodeAt(n.position + 1)
                                                                                                                                + M && nt(k)
                                                                                                                        break 
                                                                                                                else
                                                                                                                    if I === 35
                                                                                                                        if P(n.input.charCodeAt(n.position - 1))
                                                                                                                            break 
                                                                                                                    else
                                                                                                                        if n.position === n.lineStart && at(n) || M && nt(I)
                                                                                                                            break 
                                                                                                                        if $(I)
                                                                                                                            if 
                                                                                                                                test
                                                                                                                                    sequence 
                                                                                                                                        set O = n.line
                                                                                                                                        set W = n.lineStart
                                                                                                                                        set Y = n.lineIndent
                                                                                                                                        _ H(n, !1, -1)
                                                                                                                                        set n.lineIndent >= y
                                                                                                                                sequence 
                                                                                                                                    set q = !0
                                                                                                                                    set I = n.input.charCodeAt(n.position)
                                                                                                                                continue 
                                                                                                                            sequence 
                                                                                                                                set n.position = C
                                                                                                                                set n.line = O
                                                                                                                                set n.lineStart = W
                                                                                                                                set n.lineIndent = Y
                                                                                                                            break 
                                                                                                                sequence 
                                                                                                                    && 
                                                                                                                        + q
                                                                                                                        sequence 
                                                                                                                            _ z(n, _, C, !1)
                                                                                                                            _ ut(n, n.line - O)
                                                                                                                            set C = n.position
                                                                                                                            set q = !1
                                                                                                                    || 
                                                                                                                        + tt(I)
                                                                                                                        + C = n.position + 1
                                                                                                                    set I = n.input.charCodeAt(++n.position)
                                                                                                            return 
                                                                                                                sequence 
                                                                                                                    _ z(n, _, C, !1)
                                                                                                                    || 
                                                                                                                        + !!n.result
                                                                                                                        sequence 
                                                                                                                            set n.kind = L
                                                                                                                            set n.result = K
                                                                                                                            op! 1
                                                                                                            (
                                                                                                                @ t
                                                                                                                @ N
                                                                                                                set u === d
                                                                                                        sequence 
                                                                                                            set R = !0
                                                                                                            && 
                                                                                                                + t.tag === null
                                                                                                                + t.tag = "?"
                                                                                    && 
                                                                                        + t.anchor !== null
                                                                                        + t.anchorMap[t.anchor] = t.result
                                                                    else
                                                                        && 
                                                                            + w === 0
                                                                            + R = b && gt(t, A)
                                                        @expr t.tag !== null && t.tag !== "!"
                                                if t.tag === "?"
                                                    for ; j < U;
                                                        if 
                                                            test
                                                                _ S = t.implicitTypes[j]
                                                                    ._ resolve
                                                                        @expr t.result
                                                            sequence 
                                                                set t.result = S.construct(t.result)
                                                                set t.tag = S.tag
                                                                && 
                                                                    + t.anchor !== null
                                                                    + t.anchorMap[t.anchor] = t.result
                                                            break 
                                                else
                                                    iif o.call(t.typeMap[t.kind || "fallback"], t.tag)
                                                        then
                                                            sequence 
                                                                set S = t.typeMap[t.kind || "fallback"][t.tag]
                                                                @expr t.result !== null && S.kind !== t.kind && E(t, "unacceptable node kind for !<" + t.tag + '> tag; it should be "' + S.kind + '", not "' + t.kind + '"')
                                                                iif S.resolve(t.result)
                                                                    then
                                                                        sequence 
                                                                            set t.result = S.construct(t.result)
                                                                            && 
                                                                                + t.anchor !== null
                                                                                + t.anchorMap[t.anchor] = t.result
                                                                    else E(t, "cannot resolve a node with !<" + t.tag + "> explicit tag")
                                                        else E(t, "unknown tag !<" + t.tag + ">")
                                            return 
                                                sequence 
                                                    @expr t.listener !== null && t.listener("close", t)
                                                    @expr t.tag !== null || t.anchor !== null || R
                                        function Et
                                            param t
                                            var 
                                                decl f
                                                decl d
                                                decl F
                                                decl m
                                                decl i = t.position
                                                decl g = !1
                                            for ; ;
                                                for ; m !== 0 && !P(m);
                                                    set m = t.input.charCodeAt(++t.position)
                                                for ; m !== 0;
                                                    for ; tt(m);
                                                        set m = t.input.charCodeAt(++t.position)
                                                    if m === 35
                                                        for ; ;
                                                        break 
                                                    if $(m)
                                                        break 
                                                    for ; m !== 0 && !P(m);
                                                        set m = t.input.charCodeAt(++t.position)
                                                    _ F.push(t.input.slice(f, t.position))
                                                sequence 
                                                    @expr m !== 0 && rt(t)
                                                    iif o.call(wt, d)
                                                        then wt[d](t, d, F)
                                                        else et(t, 'unknown document directive "' + d + '"')
                                            sequence 
                                                _ H(t, !0, -1)
                                                iif t.lineIndent === 0 && t.input.charCodeAt(t.position) === 45 && t.input.charCodeAt(t.position + 1) === 45 && t.input.charCodeAt(t.position + 2) === 45
                                                    then
                                                        sequence 
                                                            set t.position += 3
                                                            _ H(t, !0, -1)
                                                    else g && E(t, "directives end mark is expected")
                                                _ J(t, t.lineIndent - 1, v, !1, !0)
                                                _ H(t, !0, -1)
                                                @expr t.checkLineBreaks && St.test(t.input.slice(i, t.position)) && et(t, "non-ASCII line breaks are interpreted as content")
                                                _ t.documents.push(t.result)
                                                iif t.position === t.lineStart && at(t)
                                                    then
                                                        && 
                                                            + t.input.charCodeAt(t.position) === 46
                                                            sequence 
                                                                set t.position += 3
                                                                _ H(t, !0, -1)
                                                    else t.position < t.length - 1 && E(t, "end of the stream or a document separator is expected")
                                        function jt
                                            param t
                                            param f
                                            sequence 
                                                set f =
                                                    || 
                                                        + f
                                                        { 
                                                && 
                                                    !== 
                                                        set t = String(t)
                                                            . length
                                                        + 0
                                                    sequence 
                                                        && 
                                                            + t.charCodeAt(t.length - 1) !== 10 && t.charCodeAt(t.length - 1) !== 13
                                                            + t += "\n"
                                                        && 
                                                            + t.charCodeAt(0) === 65279
                                                            + t = t.slice(1)
                                            var d = new vt(t, f)
                                            for ; d.input.charCodeAt(d.position) === 32;
                                                sequence 
                                                    set d.lineIndent += 1
                                                    set d.position += 1
                                            for ; d.position < d.length - 1;
                                                _ Et(d)
                                            return d.documents
                                        function lt
                                            param t
                                            param f
                                            param d
                                            var 
                                                decl F
                                                decl m
                                                decl i = jt(t, d)
                                            if typeof f != "function"
                                                return i
                                            for ; F < m;
                                                _ f(i[F])
                                        function yt
                                            param t
                                            param f
                                            var d = jt(t, f)
                                            if d.length !== 0
                                                if d.length === 1
                                                    return d[0]
                                                throw new e("expected a single document in the stream, but found more")
                                        sequence 
                                            set p.exports.loadAll = lt
                                            set p.exports.load = yt
                                            set p.exports.safeLoadAll =
                                                function 
                                                    param t
                                                    param f
                                                    param d
                                                    if typeof f != "function"
                                                        return 
                                                            _ lt
                                                                @ t
                                                                _ l.extend
                                                                    { 
                                                                        @ schema s
                                                                    @ d
                                                    _ lt
                                                        @ t
                                                        @ f
                                                        _ l.extend
                                                            { 
                                                                @ schema s
                                                            @ d
                                            set p.exports.safeLoad =
                                                function 
                                                    param t
                                                    param f
                                                    return 
                                                        _ yt
                                                            @ t
                                                            _ l.extend
                                                                { 
                                                                    @ schema s
                                                                @ f
                                    { 
                                        @ "./common" 2
                                        @ "./exception" 4
                                        @ "./mark" 6
                                        @ "./schema/default_full" 9
                                        @ "./schema/default_safe" 10
                                [ 6
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("./common")
                                        function e
                                            param a
                                            param s
                                            param r
                                            param o
                                            param u
                                            sequence 
                                                set this.name = a
                                                set this.buffer = s
                                                set this.position = r
                                                set this.line = o
                                                set this.column = u
                                        sequence 
                                            set e.prototype.getSnippet =
                                                function 
                                                    param a
                                                    param s
                                                    var 
                                                        decl r
                                                        decl o
                                                        decl u
                                                        decl h
                                                        decl x
                                                    if !this.buffer
                                                        return null
                                                    for ; 0 < o && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(o - 1)) === -1;
                                                        if 
                                                            test
                                                                sequence 
                                                                    set o -= 1
                                                                    set this.position - o > s / 2 - 1
                                                            sequence 
                                                                set r = " ... "
                                                                set o += 5
                                                            break 
                                                    for ; h < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(h)) === -1;
                                                        if 
                                                            test
                                                                op> 
                                                                    op- 
                                                                        set h += 1
                                                                        + this.position
                                                                    + s / 2 - 1
                                                            sequence 
                                                                set u = " ... "
                                                                set h -= 5
                                                            break 
                                                    return 
                                                        sequence 
                                                            set x = this.buffer.slice(o, h)
                                                            set l.repeat(" ", a) + r + x + u + "\n" + l.repeat(" ", a + this.position - o + r.length) + "^"
                                            set e.prototype.toString =
                                                function 
                                                    param a
                                                    var 
                                                        decl s
                                                        decl r = ""
                                                    return 
                                                        sequence 
                                                            && 
                                                                + this.name
                                                                + r += 'in "' + this.name + '" '
                                                            set r += "at line " + (this.line + 1) + ", column " + (this.column + 1)
                                                            || 
                                                                + a
                                                                && 
                                                                    + s = this.getSnippet()
                                                                    + r += ":\n" + s
                                                            set r
                                            set p.exports = e
                                    { 
                                        @ "./common" 2
                                [ 7
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("./common")
                                            decl e = c("./exception")
                                            decl a = c("./type")
                                        function s
                                            param o
                                            param u
                                            param h
                                            var x = []
                                            return 
                                                sequence 
                                                    _ o.include.forEach
                                                        function 
                                                            param v
                                                            set h = s(v, u, h)
                                                    _ o[u].forEach
                                                        function 
                                                            param v
                                                            sequence 
                                                                _ h.forEach
                                                                    function 
                                                                        param D
                                                                        param V
                                                                        @expr D.tag === v.tag && D.kind === v.kind && x.push(V)
                                                                _ h.push(v)
                                                    _ h.filter
                                                        function 
                                                            param v
                                                            param D
                                                            return x.indexOf(D) === -1
                                        function r
                                            param o
                                            sequence 
                                                set this.include = o.include || []
                                                set this.implicit = o.implicit || []
                                                set this.explicit = o.explicit || []
                                                _ this.implicit.forEach
                                                    function 
                                                        param u
                                                        if u.loadKind && u.loadKind !== "scalar"
                                                            throw new e("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")
                                                set this.compiledImplicit = s(this, "implicit", [])
                                                set this.compiledExplicit = s(this, "explicit", [])
                                                iife 
                                                    var 
                                                        decl u
                                                        decl h
                                                        decl x
                                                            { 
                                                                { scalar
                                                                { sequence
                                                                { mapping
                                                                { fallback
                                                    function v
                                                        param D
                                                        set x.fallback[D.tag] = D
                                                    for ; u < h;
                                                        _ arguments[u].forEach(v)
                                                    return x
                                                    (
                                                        @expr this.compiledImplicit
                                                        @expr this.compiledExplicit
                                        sequence 
                                            set r.DEFAULT = null
                                            set r.create =
                                                function 
                                                    var 
                                                        decl o
                                                        decl u
                                                    switch arguments.length
                                                        case 1
                                                            sequence 
                                                                set o = r.DEFAULT
                                                                set u = arguments[0]
                                                            break 
                                                        case 2
                                                            sequence 
                                                                set o = arguments[0]
                                                                set u = arguments[1]
                                                            break 
                                                        default 
                                                            throw new e("Wrong number of arguments for Schema.create function")
                                                    if 
                                                        test
                                                            sequence 
                                                                set o = l.toArray(o)
                                                                set u = l.toArray(u)
                                                                op! 
                                                                    _ o.every
                                                                        function 
                                                                            param h
                                                                            return h instanceof r
                                                        throw new e("Specified list of super schemas (or a single Schema object) contains a non-Schema object.")
                                                    if 
                                                        test
                                                            op! 
                                                                _ u.every
                                                                    function 
                                                                        param h
                                                                        return h instanceof a
                                                        throw new e("Specified list of YAML types (or a single Type object) contains a non-Type object.")
                                                    return 
                                                        new r
                                                            { 
                                                                @ include o
                                                                @ explicit u
                                            set p.exports = r
                                    { 
                                        @ "./common" 2
                                        @ "./exception" 4
                                        @ "./type" 13
                                [ 8
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../schema")
                                        set p.exports =
                                            new l
                                                { 
                                                    @ include [null]
                                    { 
                                        @ "../schema" 7
                                        @ "./json" 12
                                [ 9
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../schema")
                                        set l.DEFAULT =
                                            new l
                                                { 
                                                    [ include
                                                        @ c("./default_safe")
                                                    [ explicit
                                                        @ c("../type/js/undefined")
                                                        @ c("../type/js/regexp")
                                                        @ c("../type/js/function")
                                    { 
                                        @ "../schema" 7
                                        @ "../type/js/function" 18
                                        @ "../type/js/regexp" 19
                                        @ "../type/js/undefined" 20
                                        @ "./default_safe" 10
                                [ 10
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../schema")
                                        set p.exports =
                                            new l
                                                { 
                                                    @ include [null]
                                                    [ implicit
                                                        @ c("../type/timestamp")
                                                        @ c("../type/merge")
                                                    [ explicit
                                                        @ c("../type/binary")
                                                        @ c("../type/omap")
                                                        @ c("../type/pairs")
                                                        @ c("../type/set")
                                    { 
                                        @ "../schema" 7
                                        @ "../type/binary" 14
                                        @ "../type/merge" 22
                                        @ "../type/omap" 24
                                        @ "../type/pairs" 25
                                        @ "../type/set" 27
                                        @ "../type/timestamp" 29
                                        @ "./core" 8
                                [ 11
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../schema")
                                        set p.exports =
                                            new l
                                                { 
                                                    [ explicit
                                                        @ c("../type/str")
                                                        @ c("../type/seq")
                                                        @ c("../type/map")
                                    { 
                                        @ "../schema" 7
                                        @ "../type/map" 21
                                        @ "../type/seq" 26
                                        @ "../type/str" 28
                                [ 12
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../schema")
                                        set p.exports =
                                            new l
                                                { 
                                                    [ include
                                                        @ c("./failsafe")
                                                    [ implicit
                                                        @ c("../type/null")
                                                        @ c("../type/bool")
                                                        @ c("../type/int")
                                                        @ c("../type/float")
                                    { 
                                        @ "../schema" 7
                                        @ "../type/bool" 15
                                        @ "../type/float" 16
                                        @ "../type/int" 17
                                        @ "../type/null" 23
                                        @ "./failsafe" 11
                                [ 13
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("./exception")
                                            decl e
                                                [ 
                                                    @ "kind"
                                                    @ "resolve"
                                                    @ "construct"
                                                    @ "instanceOf"
                                                    @ "predicate"
                                                    @ "represent"
                                                    @ "defaultStyle"
                                                    @ "styleAliases"
                                            decl a
                                                [ 
                                                    @ "scalar"
                                                    @ "sequence"
                                                    @ "mapping"
                                        set p.exports =
                                            function 
                                                param s
                                                param r
                                                if 
                                                    test
                                                        sequence 
                                                            set r =
                                                                || 
                                                                    + r
                                                                    { 
                                                            _ Object.keys(r).forEach
                                                                function 
                                                                    param o
                                                                    if e.indexOf(o) === -1
                                                                        throw new l('Unknown option "' + o + '" is met in definition of "' + s + '" YAML type.')
                                                            set this.tag = s
                                                            set this.kind = r.kind || null
                                                            set this.resolve =
                                                                || 
                                                                    + r.resolve
                                                                    function 
                                                                        return !0
                                                            set this.construct =
                                                                || 
                                                                    + r.construct
                                                                    function 
                                                                        param o
                                                                        return o
                                                            set this.instanceOf = r.instanceOf || null
                                                            set this.predicate = r.predicate || null
                                                            set this.represent = r.represent || null
                                                            set this.defaultStyle = r.defaultStyle || null
                                                            iife 
                                                                param o
                                                                var u
                                                                    { 
                                                                return 
                                                                    sequence 
                                                                        && 
                                                                            + o !== null
                                                                            _ Object.keys(o).forEach
                                                                                function 
                                                                                    param h
                                                                                    _ o[h].forEach
                                                                                        function 
                                                                                            param x
                                                                                            set u[String(x)] = h
                                                                        set u
                                                                (
                                                                    @expr r.styleAliases || null
                                                            set a.indexOf(this.kind) === -1
                                                    throw new l('Unknown kind "' + this.kind + '" is specified for "' + s + '" YAML type.')
                                    { 
                                        @ "./exception" 4
                                [ 14
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l
                                        try 
                                            set l = c("buffer").Buffer
                                        catch s
                                        var 
                                            decl e = c("../type")
                                            decl a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r"
                                        set p.exports =
                                            new e
                                                @ "tag:yaml.org,2002:binary"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param s
                                                            if s === null
                                                                return !1
                                                            var 
                                                                decl r
                                                                decl o
                                                                decl u = 0
                                                                decl h = s.length
                                                                decl x = a
                                                            for ; o < h; o++
                                                                if 
                                                                    test
                                                                        op! 
                                                                            op< 
                                                                                + 64
                                                                                set r = x.indexOf(s.charAt(o))
                                                                    if r < 0
                                                                        return !1
                                                                    set u += 6
                                                            return u % 8 == 0
                                                    @ construct
                                                        function 
                                                            param s
                                                            var 
                                                                decl r
                                                                decl o
                                                                decl u = s.replace(/[\r\n=]/g, "")
                                                                decl h = u.length
                                                                decl x = a
                                                                decl v = 0
                                                                decl D = []
                                                            for ; r < h; r++
                                                                sequence 
                                                                    && 
                                                                        + r % 4 == 0 && r
                                                                        sequence 
                                                                            _ D.push(v >> 16 & 255)
                                                                            _ D.push(v >> 8 & 255)
                                                                            _ D.push(255 & v)
                                                                    set v = v << 6 | x.indexOf(u.charAt(r))
                                                            return 
                                                                sequence 
                                                                    iif 
                                                                        test
                                                                            == 
                                                                                set o = h % 4 * 6
                                                                                + 0
                                                                        then
                                                                            sequence 
                                                                                _ D.push(v >> 16 & 255)
                                                                                _ D.push(v >> 8 & 255)
                                                                                _ D.push(255 & v)
                                                                        else
                                                                            iif o == 18
                                                                                then
                                                                                    sequence 
                                                                                        _ D.push(v >> 10 & 255)
                                                                                        _ D.push(v >> 2 & 255)
                                                                                else o == 12 && D.push(v >> 4 & 255)
                                                                    iif l
                                                                        then
                                                                            iif l.from
                                                                                then l.from(D)
                                                                                else new l(D)
                                                                        else D
                                                    @ predicate
                                                        function 
                                                            param s
                                                            return l && l.isBuffer(s)
                                                    @ represent
                                                        function 
                                                            param s
                                                            var 
                                                                decl r
                                                                decl o
                                                                decl u = ""
                                                                decl h = 0
                                                                decl x = s.length
                                                                decl v = a
                                                            for ; r < x; r++
                                                                sequence 
                                                                    && 
                                                                        + r % 3 == 0 && r
                                                                        sequence 
                                                                            set u += v[h >> 18 & 63]
                                                                            set u += v[h >> 12 & 63]
                                                                            set u += v[h >> 6 & 63]
                                                                            set u += v[63 & h]
                                                                    set h = (h << 8) + s[r]
                                                            return 
                                                                sequence 
                                                                    iif 
                                                                        test
                                                                            == 
                                                                                set o = x % 3
                                                                                + 0
                                                                        then
                                                                            sequence 
                                                                                set u += v[h >> 18 & 63]
                                                                                set u += v[h >> 12 & 63]
                                                                                set u += v[h >> 6 & 63]
                                                                                set u += v[63 & h]
                                                                        else
                                                                            iif o == 2
                                                                                then
                                                                                    sequence 
                                                                                        set u += v[h >> 10 & 63]
                                                                                        set u += v[h >> 4 & 63]
                                                                                        set u += v[h << 2 & 63]
                                                                                        set u += v[64]
                                                                                else
                                                                                    && 
                                                                                        + o == 1
                                                                                        sequence 
                                                                                            set u += v[h >> 2 & 63]
                                                                                            set u += v[h << 4 & 63]
                                                                                            set u += v[64]
                                                                                            set u += v[64]
                                                                    set u
                                    { 
                                        @ "../type" 13
                                [ 15
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:bool"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param e
                                                            if e === null
                                                                return !1
                                                            var a = e.length
                                                            return a === 4 && (e === "true" || e === "True" || e === "TRUE") || a === 5 && (e === "false" || e === "False" || e === "FALSE")
                                                    @ construct
                                                        function 
                                                            param e
                                                            return e === "true" || e === "True" || e === "TRUE"
                                                    @ predicate
                                                        function 
                                                            param e
                                                            return Object.prototype.toString.call(e) === "[object Boolean]"
                                                    { represent
                                                        @ lowercase
                                                            function 
                                                                param e
                                                                return 
                                                                    iif e
                                                                        then "true"
                                                                        else "false"
                                                        @ uppercase
                                                            function 
                                                                param e
                                                                return 
                                                                    iif e
                                                                        then "TRUE"
                                                                        else "FALSE"
                                                        @ camelcase
                                                            function 
                                                                param e
                                                                return 
                                                                    iif e
                                                                        then "True"
                                                                        else "False"
                                                    @ defaultStyle "lowercase"
                                    { 
                                        @ "../type" 13
                                [ 16
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("../common")
                                            decl e = c("../type")
                                            decl a = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$")
                                            decl s = /^[-+]?[0-9]+e/
                                        set p.exports =
                                            new e
                                                @ "tag:yaml.org,2002:float"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param r
                                                            return r !== null && !(!a.test(r) || r[r.length - 1] === "_")
                                                    @ construct
                                                        function 
                                                            param r
                                                            var 
                                                                decl o
                                                                decl u
                                                                decl h
                                                                decl x
                                                            return 
                                                                sequence 
                                                                    set u =
                                                                        iif 
                                                                            test
                                                                                === 
                                                                                    set o = r.replace(/_/g, "").toLowerCase()
                                                                                        .[ 0
                                                                                    + "-"
                                                                            then -1
                                                                            else 1
                                                                    set x = []
                                                                    && 
                                                                        + 0 <= "+-".indexOf(o[0])
                                                                        + o = o.slice(1)
                                                                    iif o === ".inf"
                                                                        then
                                                                            iif u == 1
                                                                                then Number.POSITIVE_INFINITY
                                                                                else Number.NEGATIVE_INFINITY
                                                                        else
                                                                            iif o === ".nan"
                                                                                then NaN
                                                                                else
                                                                                    iif 0 <= o.indexOf(":")
                                                                                        then
                                                                                            sequence 
                                                                                                _ o.split(":").forEach
                                                                                                    function 
                                                                                                        param v
                                                                                                        _ x.unshift(parseFloat(v, 10))
                                                                                                set o = 0
                                                                                                set h = 1
                                                                                                _ x.forEach
                                                                                                    function 
                                                                                                        param v
                                                                                                        sequence 
                                                                                                            set o += v * h
                                                                                                            set h *= 60
                                                                                                set u * o
                                                                                        else u * parseFloat(o, 10)
                                                    @ predicate
                                                        function 
                                                            param r
                                                            return Object.prototype.toString.call(r) === "[object Number]" && (r % 1 != 0 || l.isNegativeZero(r))
                                                    @ represent
                                                        function 
                                                            param r
                                                            param o
                                                            var u
                                                            if isNaN(r)
                                                                switch o
                                                            else
                                                                if Number.POSITIVE_INFINITY === r
                                                                    switch o
                                                                else
                                                                    if Number.NEGATIVE_INFINITY === r
                                                                        switch o
                                                                    else
                                                                        if l.isNegativeZero(r)
                                                                            return "-0.0"
                                                            return 
                                                                sequence 
                                                                    set u = r.toString(10)
                                                                    iif s.test(u)
                                                                        then u.replace("e", ".e")
                                                                        else u
                                                    @ defaultStyle "lowercase"
                                    { 
                                        @ "../common" 2
                                        @ "../type" 13
                                [ 17
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("../common")
                                            decl e = c("../type")
                                        set p.exports =
                                            new e
                                                @ "tag:yaml.org,2002:int"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param a
                                                            if a === null
                                                                return !1
                                                            var 
                                                                decl s
                                                                decl r
                                                                decl o
                                                                decl u
                                                                decl h = a.length
                                                                decl x = 0
                                                                decl v = !1
                                                            if !h
                                                                return !1
                                                            if 
                                                                test
                                                                    sequence 
                                                                        || 
                                                                            && 
                                                                                !== 
                                                                                    set s = a[x]
                                                                                    + "-"
                                                                                + s !== "+"
                                                                            + s = a[++x]
                                                                        set s === "0"
                                                                if x + 1 === h
                                                                    return !0
                                                                if 
                                                                    test
                                                                        === 
                                                                            set s = a[++x]
                                                                            + "b"
                                                                    for x++; x < h; x++
                                                                        if 
                                                                            test
                                                                                !== 
                                                                                    set s = a[x]
                                                                                    + "_"
                                                                            if s !== "0" && s !== "1"
                                                                                return !1
                                                                            set v = !0
                                                                    return v && s !== "_"
                                                                if s === "x"
                                                                    for x++; x < h; x++
                                                                        if 
                                                                            test
                                                                                !== 
                                                                                    set s = a[x]
                                                                                    + "_"
                                                                            if 
                                                                                test
                                                                                    op! 
                                                                                        (
                                                                                            || 
                                                                                                || 
                                                                                                    && 
                                                                                                        <= 
                                                                                                            + 48
                                                                                                            set o = a.charCodeAt(x)
                                                                                                        + o <= 57
                                                                                                    + 65 <= o && o <= 70
                                                                                                + 97 <= o && o <= 102
                                                                                return !1
                                                                            set v = !0
                                                                    return v && s !== "_"
                                                                for ; x < h; x++
                                                                    if 
                                                                        test
                                                                            !== 
                                                                                set s = a[x]
                                                                                + "_"
                                                                        if 
                                                                            test
                                                                                op! 
                                                                                    (
                                                                                        && 
                                                                                            <= 
                                                                                                + 48
                                                                                                set r = a.charCodeAt(x)
                                                                                            + r <= 55
                                                                            return !1
                                                                        set v = !0
                                                                return v && s !== "_"
                                                            if s === "_"
                                                                return !1
                                                            for ; x < h; x++
                                                                if 
                                                                    test
                                                                        !== 
                                                                            set s = a[x]
                                                                            + "_"
                                                                    if s === ":"
                                                                        break 
                                                                    if 
                                                                        test
                                                                            op! 
                                                                                (
                                                                                    && 
                                                                                        <= 
                                                                                            + 48
                                                                                            set u = a.charCodeAt(x)
                                                                                        + u <= 57
                                                                        return !1
                                                                    set v = !0
                                                            return !(!v || s === "_") && (s !== ":" || /^(:[0-5]?[0-9])+$/.test(a.slice(x)))
                                                    @ construct
                                                        function 
                                                            param a
                                                            var 
                                                                decl s
                                                                decl r
                                                                decl o = a
                                                                decl u = 1
                                                                decl h = []
                                                            return 
                                                                sequence 
                                                                    && 
                                                                        + o.indexOf("_") !== -1
                                                                        + o = o.replace(/_/g, "")
                                                                    || 
                                                                        && 
                                                                            !== 
                                                                                set s = o[0]
                                                                                + "-"
                                                                            + s !== "+"
                                                                        sequence 
                                                                            && 
                                                                                + s === "-"
                                                                                + u = -1
                                                                            set o = o.slice(1)
                                                                                .[ 0
                                                                    iif o === "0"
                                                                        then 0
                                                                        else
                                                                            iif s === "0"
                                                                                then
                                                                                    iif o[1] === "b"
                                                                                        then u * parseInt(o.slice(2), 2)
                                                                                        else
                                                                                            iif o[1] === "x"
                                                                                                then u * parseInt(o, 16)
                                                                                                else u * parseInt(o, 8)
                                                                                else
                                                                                    iif o.indexOf(":") !== -1
                                                                                        then
                                                                                            sequence 
                                                                                                _ o.split(":").forEach
                                                                                                    function 
                                                                                                        param x
                                                                                                        _ h.unshift(parseInt(x, 10))
                                                                                                set o = 0
                                                                                                set r = 1
                                                                                                _ h.forEach
                                                                                                    function 
                                                                                                        param x
                                                                                                        sequence 
                                                                                                            set o += x * r
                                                                                                            set r *= 60
                                                                                                set u * o
                                                                                        else u * parseInt(o, 10)
                                                    @ predicate
                                                        function 
                                                            param a
                                                            return Object.prototype.toString.call(a) === "[object Number]" && a % 1 == 0 && !l.isNegativeZero(a)
                                                    { represent
                                                        @ binary
                                                            function 
                                                                param a
                                                                return 
                                                                    iif 0 <= a
                                                                        then "0b" + a.toString(2)
                                                                        else "-0b" + a.toString(2).slice(1)
                                                        @ octal
                                                            function 
                                                                param a
                                                                return 
                                                                    iif 0 <= a
                                                                        then "0" + a.toString(8)
                                                                        else "-0" + a.toString(8).slice(1)
                                                        @ decimal
                                                            function 
                                                                param a
                                                                return a.toString(10)
                                                        @ hexadecimal
                                                            function 
                                                                param a
                                                                return 
                                                                    iif 0 <= a
                                                                        then "0x" + a.toString(16).toUpperCase()
                                                                        else "-0x" + a.toString(16).toUpperCase().slice(1)
                                                    @ defaultStyle "decimal"
                                                    { styleAliases
                                                        @ binary [null]
                                                        @ octal [null]
                                                        @ decimal [null]
                                                        @ hexadecimal [null]
                                    { 
                                        @ "../common" 2
                                        @ "../type" 13
                                [ 18
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l
                                        try 
                                            set l = c("esprima")
                                        catch a
                                            && 
                                                + typeof window != "undefined"
                                                + l = window.esprima
                                        var e = c("../../type")
                                        set p.exports =
                                            new e
                                                @ "tag:yaml.org,2002:js/function"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param a
                                                            if a === null
                                                                return !1
                                                            try 
                                                                var 
                                                                    decl s = "(" + a + ")"
                                                                    decl r
                                                                        _ l.parse
                                                                            @ s
                                                                            { 
                                                                                @ range !0
                                                                return r.type === "Program" && r.body.length === 1 && r.body[0].type === "ExpressionStatement" && (r.body[0].expression.type === "ArrowFunctionExpression" || r.body[0].expression.type === "FunctionExpression")
                                                            catch o
                                                                return !1
                                                    @ construct
                                                        function 
                                                            param a
                                                            var 
                                                                decl s
                                                                decl r = "(" + a + ")"
                                                                decl o
                                                                    _ l.parse
                                                                        @ r
                                                                        { 
                                                                            @ range !0
                                                                decl u = []
                                                            if o.type !== "Program" || o.body.length !== 1 || o.body[0].type !== "ExpressionStatement" || o.body[0].expression.type !== "ArrowFunctionExpression" && o.body[0].expression.type !== "FunctionExpression"
                                                                throw new Error("Failed to resolve function")
                                                            return 
                                                                sequence 
                                                                    _ o.body[0].expression.params.forEach
                                                                        function 
                                                                            param h
                                                                            _ u.push(h.name)
                                                                    set s = o.body[0].expression.body.range
                                                                    iif o.body[0].expression.body.type === "BlockStatement"
                                                                        then new Function(u, r.slice(s[0] + 1, s[1] - 1))
                                                                        else new Function(u, "return " + r.slice(s[0], s[1]))
                                                    @ predicate
                                                        function 
                                                            param a
                                                            return Object.prototype.toString.call(a) === "[object Function]"
                                                    @ represent
                                                        function 
                                                            param a
                                                            return a.toString()
                                    { 
                                        @ "../../type" 13
                                [ 19
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:js/regexp"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param e
                                                            if e === null || e.length === 0
                                                                return !1
                                                            var 
                                                                decl a = e
                                                                decl s = /\/([gim]*)$/.exec(e)
                                                                decl r = ""
                                                            return 
                                                                op! 
                                                                    (
                                                                        && 
                                                                            + a[0] === "/"
                                                                            sequence 
                                                                                && 
                                                                                    + s
                                                                                    + r = s[1]
                                                                                @expr 3 < r.length || a[a.length - r.length - 1] !== "/"
                                                    @ construct
                                                        function 
                                                            param e
                                                            var 
                                                                decl a = e
                                                                decl s = /\/([gim]*)$/.exec(e)
                                                                decl r = ""
                                                            return 
                                                                sequence 
                                                                    && 
                                                                        + a[0] === "/"
                                                                        sequence 
                                                                            && 
                                                                                + s
                                                                                + r = s[1]
                                                                            set a = a.slice(1, a.length - r.length - 1)
                                                                    new RegExp(a, r)
                                                    @ predicate
                                                        function 
                                                            param e
                                                            return Object.prototype.toString.call(e) === "[object RegExp]"
                                                    @ represent
                                                        function 
                                                            param e
                                                            var a = "/" + e.source + "/"
                                                            return 
                                                                sequence 
                                                                    && 
                                                                        + e.global
                                                                        + a += "g"
                                                                    && 
                                                                        + e.multiline
                                                                        + a += "m"
                                                                    && 
                                                                        + e.ignoreCase
                                                                        + a += "i"
                                                                    set a
                                    { 
                                        @ "../../type" 13
                                [ 20
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:js/undefined"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            return !0
                                                    @ construct
                                                        function 
                                                    @ predicate
                                                        function 
                                                            param e
                                                            return e === void 0
                                                    @ represent
                                                        function 
                                                            return ""
                                    { 
                                        @ "../../type" 13
                                [ 21
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:map"
                                                { 
                                                    @ kind "mapping"
                                                    @ construct
                                                        function 
                                                            param e
                                                            return 
                                                                iif e !== null
                                                                    then e
                                                                    else
                                                                        { 
                                    { 
                                        @ "../type" 13
                                [ 22
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:merge"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param e
                                                            return e === "<<" || e === null
                                    { 
                                        @ "../type" 13
                                [ 23
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:null"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param e
                                                            if e === null
                                                                return !0
                                                            var a = e.length
                                                            return a === 1 && e === "~" || a === 4 && (e === "null" || e === "Null" || e === "NULL")
                                                    @ construct
                                                        function 
                                                            return null
                                                    @ predicate
                                                        function 
                                                            param e
                                                            return e === null
                                                    { represent
                                                        @ canonical
                                                            function 
                                                                return "~"
                                                        @ lowercase
                                                            function 
                                                                return "null"
                                                        @ uppercase
                                                            function 
                                                                return "NULL"
                                                        @ camelcase
                                                            function 
                                                                return "Null"
                                                    @ defaultStyle "lowercase"
                                    { 
                                        @ "../type" 13
                                [ 24
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("../type")
                                            decl e = Object.prototype.hasOwnProperty
                                            decl a = Object.prototype.toString
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:omap"
                                                { 
                                                    @ kind "sequence"
                                                    @ resolve
                                                        function 
                                                            param s
                                                            if s === null
                                                                return !0
                                                            var 
                                                                decl r
                                                                decl o
                                                                decl u
                                                                decl h
                                                                decl x
                                                                decl v = []
                                                                decl D = s
                                                            for ; r < o;
                                                                if 
                                                                    test
                                                                        sequence 
                                                                            set u = D[r]
                                                                            set x = !1
                                                                            set a.call(u) !== "[object Object]"
                                                                    return !1
                                                                for h in u
                                                                    if e.call(u, h)
                                                                        if x
                                                                            return !1
                                                                        set x = !0
                                                                if !x || v.indexOf(h) !== -1
                                                                    return !1
                                                                _ v.push(h)
                                                            return !0
                                                    @ construct
                                                        function 
                                                            param s
                                                            return 
                                                                iif s !== null
                                                                    then s
                                                                    else []
                                    { 
                                        @ "../type" 13
                                [ 25
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("../type")
                                            decl e = Object.prototype.toString
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:pairs"
                                                { 
                                                    @ kind "sequence"
                                                    @ resolve
                                                        function 
                                                            param a
                                                            if a === null
                                                                return !0
                                                            var 
                                                                decl s
                                                                decl r
                                                                decl o
                                                                decl u
                                                                decl h
                                                                decl x = a
                                                            for ; s < r;
                                                                if 
                                                                    test
                                                                        sequence 
                                                                            set o = x[s]
                                                                            || 
                                                                                + e.call(o) !== "[object Object]"
                                                                                !== 
                                                                                    set u = Object.keys(o)
                                                                                        . length
                                                                                    + 1
                                                                    return !1
                                                                set h[s] =
                                                                    [ 
                                                                        @ u[0]
                                                                        @ o[u[0]]
                                                            return !0
                                                    @ construct
                                                        function 
                                                            param a
                                                            if a === null
                                                                return []
                                                            var 
                                                                decl s
                                                                decl r
                                                                decl o
                                                                decl u
                                                                decl h
                                                                decl x = a
                                                            for ; s < r;
                                                                sequence 
                                                                    set o = x[s]
                                                                    set u = Object.keys(o)
                                                                    set h[s] =
                                                                        [ 
                                                                            @ u[0]
                                                                            @ o[u[0]]
                                                            return h
                                    { 
                                        @ "../type" 13
                                [ 26
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:seq"
                                                { 
                                                    @ kind "sequence"
                                                    @ construct
                                                        function 
                                                            param e
                                                            return 
                                                                iif e !== null
                                                                    then e
                                                                    else []
                                    { 
                                        @ "../type" 13
                                [ 27
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("../type")
                                            decl e = Object.prototype.hasOwnProperty
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:set"
                                                { 
                                                    @ kind "mapping"
                                                    @ resolve
                                                        function 
                                                            param a
                                                            if a === null
                                                                return !0
                                                            var 
                                                                decl s
                                                                decl r = a
                                                            for s in r
                                                                if e.call(r, s) && r[s] !== null
                                                                    return !1
                                                            return !0
                                                    @ construct
                                                        function 
                                                            param a
                                                            return 
                                                                iif a !== null
                                                                    then a
                                                                    else
                                                                        { 
                                    { 
                                        @ "../type" 13
                                [ 28
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("../type")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:str"
                                                { 
                                                    @ kind "scalar"
                                                    @ construct
                                                        function 
                                                            param e
                                                            return 
                                                                iif e !== null
                                                                    then e
                                                                    else ""
                                    { 
                                        @ "../type" 13
                                [ 29
                                    function 
                                        param c
                                        param p
                                        param T
                                        var 
                                            decl l = c("../type")
                                            decl e = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$")
                                            decl a = new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$")
                                        set p.exports =
                                            new l
                                                @ "tag:yaml.org,2002:timestamp"
                                                { 
                                                    @ kind "scalar"
                                                    @ resolve
                                                        function 
                                                            param s
                                                            return s !== null && (e.exec(s) !== null || a.exec(s) !== null)
                                                    @ construct
                                                        function 
                                                            param s
                                                            var 
                                                                decl r
                                                                decl o
                                                                decl u
                                                                decl h
                                                                decl x
                                                                decl v
                                                                decl D
                                                                decl V
                                                                decl Z = 0
                                                                decl X = null
                                                            if 
                                                                test
                                                                    sequence 
                                                                        && 
                                                                            === 
                                                                                set r = e.exec(s)
                                                                                + null
                                                                            + r = a.exec(s)
                                                                        set r === null
                                                                throw new Error("Date resolve error")
                                                            if 
                                                                test
                                                                    sequence 
                                                                        set o = +r[1]
                                                                        set u = +r[2] - 1
                                                                        set h = +r[3]
                                                                        op! r[4]
                                                                return new Date(Date.UTC(o, u, h))
                                                            if 
                                                                test
                                                                    sequence 
                                                                        set x = +r[4]
                                                                        set v = +r[5]
                                                                        set D = +r[6]
                                                                        @expr r[7]
                                                                for ; Z.length < 3;
                                                                    set Z += "0"
                                                                set Z = +Z
                                                            return 
                                                                sequence 
                                                                    && 
                                                                        + r[9]
                                                                        sequence 
                                                                            set X = 60000 * (60 * +r[10] + +(r[11] || 0))
                                                                            && 
                                                                                + r[9] === "-"
                                                                                + X = -X
                                                                    set V = new Date(Date.UTC(o, u, h, x, v, D, Z))
                                                                    @expr X && V.setTime(V.getTime() - X)
                                                                    set V
                                                    @ instanceOf Date
                                                    @ represent
                                                        function 
                                                            param s
                                                            return s.toISOString()
                                    { 
                                        @ "../type" 13
                                [ "/"
                                    function 
                                        param c
                                        param p
                                        param T
                                        var l = c("./lib/js-yaml.js")
                                        set p.exports = l
                                    { 
                                        @ "./lib/js-yaml.js" 1
                            { 
                            [ 
                        (
                            @ "/"
    var YAML
        { 
    sequence 
        set YAML.parse =
            function 
                param c
                return 
                    _ jsyaml.safeLoad
                        @ c
                        { 
                            @ filename null
                            @ onWarning null
                            @ schema jsyaml.DEFAULT_SAFE_SCHEMA
                            @ json !1
        set YAML.stringify =
            function 
                param c
                param p
                param T
                return 
                    _ jsyaml.safeDump
                        @ c
                        { 
                            @ indent T
                            @ noArrayIndent !1
                            @ skipInvalid !1
                            @ flowLevel p
                            @ schema jsyaml.DEFAULT_SAFE_SCHEMA
                            @ sortKeys !1
                            @ lineWidth 80
                            @ noRefs !1
                            @ noCompatMode !1
                            @ condenseFlow !1
