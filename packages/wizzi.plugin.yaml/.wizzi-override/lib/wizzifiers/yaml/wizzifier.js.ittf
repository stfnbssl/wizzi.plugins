module
    $
        var schemaName = 'yaml';
    kind es6
    basewizzifier()
        $append imports
            var yaml_parser = require('js-yaml')
            var cleanAST = require('./cleanAST')
            +
            function parseInternal
                param tobeWizzified
                param options
                param callback
                var syntax
                try
                    set syntax
                        _ yaml_parser.load
                        	@ tobeWizzified
                    _ cleanAST(syntax)
                    # loog 'syntax', syntax
                catch ex
                    return
                        _ callback
                            @ ex
                return
                    _ callback
                        @ null
                        @ syntax
        +
        var analizeAstArray
            function
                param ast
                param handler
                foreach item in ast
                    if verify.isObject(item)
                        _ handler.onObject(true)
                        _ analizeAstObject(item, handler)
                        _ handler.onObject(false)
                    elif verify.isArray(item)
                        _ handler.onArray(true)
                        _ analizeAstArray(item, handler)
                        _ handler.onArray(false)
                    else
                        _ handler.onArrayValue(item)


        var analizeAstObject
            function
                param ast
                param handler
                for var k in ast
                    var item = ast[k]
                    # loog 'analizeAstObject', k, item, 'isObject', verify.isObject(item), 'isArray', verify.isArray(item)
                    if verify.isObject(item)
                        _ handler.onObject(true, k)
                        _ analizeAstObject(item, handler)
                        _ handler.onObject(false)
                    elif verify.isArray(item)
                        _ handler.onArray(true, k)
                        _ analizeAstArray(item, handler)
                        _ handler.onArray(false)
                    else
                        _ handler.onProp(k, item)
        +
        var analizeRootAst
            function
                param ast
                param handler
                if verify.isObject(ast)
                    _ analizeAstObject
                        @ ast
                        @ handler
                elif verify.isArray(ast)
                    _ analizeAstArray
                        @ ast
                        @ handler
                else
                    throw new Error('Should never happen: JSON root is neither object or array')
        +
        var format
            function
                param parentIttfNode
                param ast
                param options
                var wizziTree = parentIttfNode
                _ analizeRootAst
                    @ ast
                    { 
                        @ onObject
                            function 
                                param open
                                param name
                                # loog  'onObject', open
                                if open
                                    var n
                                        { 
                                            @ tag '{'
                                            @ name name
                                            @ children
                                                [ 
                                    set n.parentIttfNode = wizziTree
                                    _ wizziTree.children.push(n)
                                    set wizziTree = n
                                else
                                    $$ loog "onObject wizziTree.tag", wizziTree.tag
                                    set wizziTree = wizziTree.parentIttfNode
                                    $$ loog "onObject wizziTree.tag", wizziTree.tag
                        @ onArray
                            function
                                param open
                                param name
                                # loog  'onArray', open
                                if open
                                    var n
                                        { 
                                            @ tag '['
                                            @ name name
                                            @ children
                                                [ 
                                    set n.parentIttfNode = wizziTree
                                    _ wizziTree.children.push(n)
                                    set wizziTree = n
                                else
                                    # FIXME
                                    $$ loog "onArray wizziTree.tag", wizziTree.tag
                                    set wizziTree = wizziTree.parentIttfNode
                                    $$ loog "onArray wizziTree.tag", wizziTree.tag
                        $*
                        @ onPropName
                            function 
                                param name
                                # loog  "onPropName", name
                                var n
                                    { 
                                        @ tag wizzifyIttfNodeName(name)
                                        @ name ''
                                        @ children
                                            [ 
                                set n.parentIttfNode = wizziTree
                                _ wizziTree.children.push(n)
                                $$ loog wizziTree.tag
                                set wizziTree = n
                                $$ loog wizziTree.tag
                        *$
                        @ onProp
                            function 
                                param name
                                param value
                                # loog  "onProp", name, value
                                var lines = []
                                if value.split
                                    set lines = value.split(/\r?\n/)
                                var n
                                if lines.length > 1
                                    set n
                                        { 
                                            @ tag wizzifyIttfNodeName(name)
                                            @ name ''
                                            [ children
                                                {
                                                    @ tag '|'
                                                    @ name ''
                                                    [ children
                                    var toappend = n.children[0].children
                                    foreach line in lines
                                        set line = line[0] == ' ' ? '\\b' + line.substring(1) : line
                                        _ toappend.push
                                            {
                                                @ tag '+'
                                                @ name ittfMacro.escape(line)
                                                [ children
                                else
                                    set n
                                        { 
                                            @ tag wizzifyIttfNodeName(ittfMacro.escape(name))
                                            @ name ittfMacro.escape(value)
                                            [ children
                                set n.parentIttfNode = wizziTree
                                _ wizziTree.children.push(n)
                        $*
                        @ onObjectProp
                            function 
                                param name
                                # loog  "onObjectProp", name
                                var n
                                    { 
                                        @ tag '{'
                                        @ name name
                                        @ children
                                            [ 
                                set n.parentIttfNode = wizziTree
                                _ wizziTree.children.push(n)
                                set wizziTree = n
                        @ onArrayProp
                            function 
                                param name
                                # loog  "onArrayProp", name
                                var n
                                    { 
                                        @ tag '['
                                        @ name name
                                        @ children
                                            [ 
                                set n.parentIttfNode = wizziTree
                                _ wizziTree.children.push(n)
                                set wizziTree = n
                        
                        @ onClosePropName
                            function
                                # loog  'onClosePropName'
                                set wizziTree = wizziTree.parentIttfNode
                        *$
                        @ onArrayValue
                            function 
                                param value
                                # loog  "onArrayValue", value
                                var n
                                    { 
                                        @ tag wizzifyIttfNodeName(ittfMacro.escape(value))
                                        @ name ''
                                        @ children
                                            [ 
                                _ wizziTree.children.push(n)
        +
        function wizzify
            param tobeWizzified
            param options
            param callback
            # loog 'yaml.wizzify.options', options
            set options = options || {};
            set options.input = tobeWizzified
            set options.stack = []
            set options.formatTextNodes = []
            set options.verbose = true
            _ parseInternal
                @ tobeWizzified
                @ options
                a_cb( syntax )
                    $$ loogstringify(syntax, null, 2)
                    var root
                        { 
                            @ tag verify.isArray(syntax) ? '[' : '{'
                            @ children
                                [ 
                    _ format(root, syntax, options)
                    # loog 'wizzifier.ittf.formatted.syntax', stringify(root, null, 2)
                    return
                        _ callback
                            @ null
                            @ root
        $include helper_functions
        +
        function isKnownType
            param type
            return ['Int', 'Float', 'Boolean', 'String'].indexOf(type) > -1
        +
        function getTypeName
            param type
            return isKnownType(type) ? type.toLowerCase() : type
        +
        function wizzifyIttfNodeName
            param name
            var ret = []
            var seen = false
            for var i=0; i<name.length; i++
                if name[i] == '(' && seen == false
                    _ ret.push
                        @ "$" + "{'('}"
                    set seen = true
                else
                    _ ret.push
                        @ name[i]
            return ret.join('')
        +
        f( Name, name )
            # name( value )
            #
                # loog 'Name.tag', ret.tag
                # loog 'Name.name', ret.name
                # loog 'Name.textified', ret.textified
