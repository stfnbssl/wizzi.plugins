[
  {
    "type": "heading",
    "raw": "# Code and Syntax Highlighting\n\n",
    "depth": 1,
    "text": "Code and Syntax Highlighting",
    "tokens": [
      {
        "type": "text",
        "raw": "Code and Syntax Highlighting",
        "text": "Code and Syntax Highlighting"
      }
    ]
  },
  {
    "type": "paragraph",
    "raw": "Inline `code` has `back-ticks around` it.",
    "text": "Inline `code` has `back-ticks around` it.",
    "tokens": [
      {
        "type": "text",
        "raw": "Inline ",
        "text": "Inline "
      },
      {
        "type": "codespan",
        "raw": "`code`",
        "text": "code"
      },
      {
        "type": "text",
        "raw": " has ",
        "text": " has "
      },
      {
        "type": "codespan",
        "raw": "`back-ticks around`",
        "text": "back-ticks around"
      },
      {
        "type": "text",
        "raw": " it.",
        "text": " it."
      }
    ]
  },
  {
    "type": "space",
    "raw": "\n\n"
  },
  {
    "type": "code",
    "raw": "```c#\nusing System.IO.Compression;\n\n#pragma warning disable 414, 3021\n\nnamespace MyApplication\n{\n    [Obsolete(\"...\")]\n    class Program : IInterface\n    {\n        public static List<int> JustDoIt(int count)\n        {\n            Console.WriteLine($\"Hello {Name}!\");\n            return new List<int>(new int[] { 1, 2, 3 })\n        }\n    }\n}\n```",
    "lang": "c#",
    "text": "using System.IO.Compression;\n\n#pragma warning disable 414, 3021\n\nnamespace MyApplication\n{\n    [Obsolete(\"...\")]\n    class Program : IInterface\n    {\n        public static List<int> JustDoIt(int count)\n        {\n            Console.WriteLine($\"Hello {Name}!\");\n            return new List<int>(new int[] { 1, 2, 3 })\n        }\n    }\n}"
  },
  {
    "type": "space",
    "raw": "\n\n"
  },
  {
    "type": "code",
    "raw": "```css\n@font-face {\n  font-family: Chunkfive; src: url('Chunkfive.otf');\n}\n\nbody, .usertext {\n  color: #F0F0F0; background: #600;\n  font-family: Chunkfive, sans;\n}\n\n@import url(print.css);\n@media print {\n  a[href^=http]::after {\n    content: attr(href)\n  }\n}\n```",
    "lang": "css",
    "text": "@font-face {\n  font-family: Chunkfive; src: url('Chunkfive.otf');\n}\n\nbody, .usertext {\n  color: #F0F0F0; background: #600;\n  font-family: Chunkfive, sans;\n}\n\n@import url(print.css);\n@media print {\n  a[href^=http]::after {\n    content: attr(href)\n  }\n}"
  },
  {
    "type": "space",
    "raw": "\n\n"
  },
  {
    "type": "code",
    "raw": "```javascript\nfunction $initHighlight(block, cls) {\n  try {\n    if (cls.search(/\\bno\\-highlight\\b/) != -1)\n      return process(block, true, 0x0F) +\n             ` class=\"${cls}\"`;\n  } catch (e) {\n    /* handle exception */\n  }\n  for (var i = 0 / 2; i < classes.length; i++) {\n    if (checkCondition(classes[i]) === undefined)\n      console.log('undefined');\n  }\n}\n\nexport  $initHighlight;\n```",
    "lang": "javascript",
    "text": "function $initHighlight(block, cls) {\n  try {\n    if (cls.search(/\\bno\\-highlight\\b/) != -1)\n      return process(block, true, 0x0F) +\n             ` class=\"${cls}\"`;\n  } catch (e) {\n    /* handle exception */\n  }\n  for (var i = 0 / 2; i < classes.length; i++) {\n    if (checkCondition(classes[i]) === undefined)\n      console.log('undefined');\n  }\n}\n\nexport  $initHighlight;"
  },
  {
    "type": "space",
    "raw": "\n\n"
  },
  {
    "type": "code",
    "raw": "```php\nrequire_once 'Zend/Uri/Http.php';\n\nnamespace Location\\Web;\n\ninterface Factory\n{\n    static function _factory();\n}\n\nabstract class URI extends BaseURI implements Factory\n{\n    abstract function test();\n\n    public static $st1 = 1;\n    const ME = \"Yo\";\n    var $list = NULL;\n    private $var;\n\n    /**\n     * Returns a URI\n     *\n     * @return URI\n     */\n    static public function _factory($stats = array(), $uri = 'http')\n    {\n        echo __METHOD__;\n        $uri = explode(':', $uri, 0b10);\n        $schemeSpecific = isset($uri[1]) ? $uri[1] : '';\n        $desc = 'Multi\nline description';\n\n        // Security check\n        if (!ctype_alnum($scheme)) {\n            throw new Zend_Uri_Exception('Illegal scheme');\n        }\n\n        $this->var = 0 - self::$st;\n        $this->list = list(Array(\"1\"=> 2, 2=>self::ME, 3 => \\Location\\Web\\URI::class));\n\n        return [\n            'uri'   => $uri,\n            'value' => null,\n        ];\n    }\n}\n\necho URI::ME . URI::$st1;\n\n__halt_compiler () ; datahere\ndatahere\ndatahere */\ndatahere\n```\n",
    "lang": "php",
    "text": "require_once 'Zend/Uri/Http.php';\n\nnamespace Location\\Web;\n\ninterface Factory\n{\n    static function _factory();\n}\n\nabstract class URI extends BaseURI implements Factory\n{\n    abstract function test();\n\n    public static $st1 = 1;\n    const ME = \"Yo\";\n    var $list = NULL;\n    private $var;\n\n    /**\n     * Returns a URI\n     *\n     * @return URI\n     */\n    static public function _factory($stats = array(), $uri = 'http')\n    {\n        echo __METHOD__;\n        $uri = explode(':', $uri, 0b10);\n        $schemeSpecific = isset($uri[1]) ? $uri[1] : '';\n        $desc = 'Multi\nline description';\n\n        // Security check\n        if (!ctype_alnum($scheme)) {\n            throw new Zend_Uri_Exception('Illegal scheme');\n        }\n\n        $this->var = 0 - self::$st;\n        $this->list = list(Array(\"1\"=> 2, 2=>self::ME, 3 => \\Location\\Web\\URI::class));\n\n        return [\n            'uri'   => $uri,\n            'value' => null,\n        ];\n    }\n}\n\necho URI::ME . URI::$st1;\n\n__halt_compiler () ; datahere\ndatahere\ndatahere */\ndatahere"
  }
]