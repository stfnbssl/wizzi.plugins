module wizzi.plugin.md@${wzCtx.version}.lib.artifacts.md.document.gen.main
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.md',
            name: 'document',
            schema: 'md',
            checkSchema: true,
            isAsync: true,
        };
    
    gen( &md )
        $append imports
            var included_writers = require('./included_writers')
        $append main
            _ md.md
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        async-md( md )
            _md_gen_items( elements )
                r_cb()
        
        async-md( frontmatter )
            _ ctx.w("---")
            foreach a in model.attributes
                var nv = verify.parseNameValue(a.wzName, a)
                _ ctx.w
                    @ nv.name() + ": " + nv.value()
            _md_gen_items( elements )
                _ ctx.w("---")
                r_cb()

        async-md( propertyOrValue )
            var p = verify.parseNameValue(model.wzName, model)
            _ ctx.w
                @ p.name() + ": " + p.value()
            r_cb()

        async-md( element )
            _ md.writeHtml(model.wzName, model, ctx, callback)

        async-md( div )
            _ md.writeHtml('div', model, ctx, callback)

        async-md( h1 )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml
                    @ 'h1'
                    @ model
                    @ ctx
                    @ callback
            else
            *$
            _ ctx.w("# " + model.wzName)
            r_cb()
    
        async-md( h2 )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml
                    @ 'h2'
                    @ model
                    @ ctx
                    @ callback
            else
            *$
            _ ctx.w("## " + model.wzName)
            r_cb()
    
        async-md( h3 )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml
                    @ 'h3'
                    @ model
                    @ ctx
                    @ callback
            else
            *$
            _ ctx.w("### " + model.wzName)
            r_cb()
    
        async-md( h4 )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml
                    @ 'h4'
                    @ model
                    @ ctx
                    @ callback
            else
            *$
            _ ctx.w("#### " + model.wzName)
            r_cb()
    
        async-md( h5 )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml('h5', model, ctx, callback)
            else
            *$
            _ ctx.w("##### " + model.wzName)
            r_cb()
    
        async-md( h6 )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml('h6', model, ctx, callback)
            else
            *$
            _ ctx.w("###### " + model.wzName)
            r_cb()
    
        async-md( a )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml('a', model, ctx, callback)
            else
            *$
            _ ctx.write('[');
            _ ctx.write(model.wzName)
            set ctx.nolf = true
            _md_gen_items( elements)
                _ ctx.write(']')
                _ ctx.write('(' + model.href)
                if verify.isString(model.title)
                    _ ctx.write(' "' + model.title + '"')
                _ ctx.write(')')
                set ctx.nolf = false
                r_cb()
           
        async-md( ul )
            if ctx.isInsideList
                if ctx.pendingLF
                    _ ctx.w('')
                    set ctx.pendingLF = false
                _ md.genItems
                    @ model.elements
                    @ ctx
                    {
                        @ indent true
                    @ callback
            else
                set ctx.isInsideList = true
                _ md.genItems
                    @ model.elements
                    @ ctx
                    {
                        @ indent false
                    a_cb()
                        set ctx.isInsideList = false
                        r_cb()

        async-md( li )
            if model.task
                _ ctx.write('- [')
                if model.checked
                    _ ctx.write('x')
                else
                    _ ctx.write(' ')
                _ ctx.write('] ')
            elif model.wzParent.nextListOrderCount
                _ ctx.write(model.wzParent.nextListOrderCount++ + '. ')
            else
                _ ctx.write('* ')
            if model.wzName && model.wzName.length > 0
                _ ctx.write(model.wzName + ' ' )
            set ctx.pendingLF = true
            _md_gen_items( elements )
                # loog 'exit ', model.wzName
                if ctx.pendingLF
                    _ ctx.w('')
                    set ctx.pendingLF = false
                r_cb()
    
        async-md( ol )
            
            set model.nextListOrderCount = 1
            if ctx.isInsideList
                if ctx.pendingLF
                    _ ctx.w('')
                    set ctx.pendingLF = false
                _ md.genItems
                    @ model.elements
                    @ ctx
                    {
                        @ indent true
                    @ callback
            else
                set ctx.isInsideList = true
                _ md.genItems
                    @ model.elements
                    @ ctx
                    {
                        @ indent false
                    a_cb()
                        set ctx.isInsideList = false
                        r_cb()

        async-md( img )
            $*
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml('img', model, ctx, callback)
            else
            *$
            _ ctx.write('![' + model.alt + ']')
            _ ctx.write('(' + model.src)
            if verify.isString(model.title)
                _ ctx.write(' "' + model.title + '"')
            _md_gen_items( elements)
                if ctx.nolf
                    _ ctx.write(')')
                else
                    _ ctx.w(')')
                r_cb()

        async-md( video )
            r_cb()

        async-md( table )
            _ md.analizeTable
                @ model
            $$ _ ctx.w
            $$ _ ctx.w('<table>')
            _md_gen_items( elements )
                $$ _ ctx.w('</table>')
                _ ctx.w
                r_cb()

        async-md( thead )
            $$ _ ctx.w('<thead>')
            _md_gen_items( elements )
                $$ _ ctx.w('</thead>')
                _ ctx.w('|')
                _ ctx.write('|')
                foreach th in model.elements
                    _ ctx.write(md.getThLine(th))
                    _ ctx.write('|')
                _ ctx.w()
                r_cb()

        async-md( tbody )
            $$ _ ctx.w('<tbody>')
            _md_gen_items( elements )
                $$ _ ctx.w('</tbody>')
                r_cb()


        async-md( tr )
            $$ _ ctx.w('<tr>')
            _md_gen_items( elements )
                $$ _ ctx.w('</tr>')
                _ ctx.w('|')
                r_cb()

        async-md( td )
            _ ctx.write('|')
            _ ctx.addEscape('|')
            if model.wzName
                _ ctx.write(md.getColumnValue(model, ctx))
            if model.elements && model.elements.length > 0
                $$ _ ctx.w()
                _md_gen_items( elements )
                    _ ctx.removeEscape('|')
                    r_cb()
            else
                $$ _ ctx.w('</td>')
                _ ctx.removeEscape('|')
                r_cb()

        async-md( th )
            _ ctx.write('|')
            _ ctx.addEscape('|')
            if model.wzName
                _ ctx.write(md.getColumnValue(model, ctx))
            if model.elements && model.elements.length > 0
                $$ _ ctx.w()
                _md_gen_items( elements )
                    _ ctx.removeEscape('|')
                    r_cb()
            else
                $$ _ ctx.w('</th>')
                _ ctx.removeEscape('|')
                r_cb()

        async-md( quote )
            _ ctx.write('> ')
            set ctx.nolf = true
            _md_gen_items( elements )
                _ ctx.w()
                set ctx.nolf = false
                r_cb()

        async-md( hr )
            _ ctx.w('***')
            r_cb()

        async-md( p )
            _ ctx.write(model.wzName) 
            _md_gen_items( elements )
                _ ctx.w('')
                r_cb()
            $*
            log 'p', ctx.isHtml, !ctx.isCode && model.elements.length > 0
            if ctx.isHtml || (!ctx.isCode && model.elements.length > 0)
                _ md.writeHtml('p', model, ctx,callback)
            else
                _ ctx.w(model.wzName)
                if ctx.isCode
                    _ ctx.indent()
                _md_gen_items( elements )
                    if ctx.isCode
                        _ ctx.deindent()
                    _ ctx.w('')
                    r_cb()
            *$
    
        async-md( span )
            _ ctx.write
                _ verify.replaceAll(model.wzName, '&nbsp;', ' ')
            _md_gen_items( elements )
                r_cb()

        async-md( br )
            _ ctx.w()
            r_cb()
    
        async-md( i )
            _ ctx.write('*' + model.wzName)
            _md_gen_items( elements )
                _ ctx.write('*')
                r_cb()
    
        async-md( b )
            _ ctx.write('**' + model.wzName)
            _md_gen_items( elements )
                _ ctx.write('**')
                r_cb()
    
        async-md( em )
            _ ctx.write('_' + model.wzName)
            _md_gen_items( elements )
                _ ctx.write('_')
                r_cb()

        async-md( del )
            _ ctx.write('~~' + model.wzName)
            _md_gen_items( elements )
                _ ctx.write('~~')
                r_cb()

        async-md( escape )
            _ ctx.write('\\' + model.wzName)
            r_cb()

        async-md( blank )
            _ ctx.write(' ' + model.wzName)
            _md_gen_items( elements )
                r_cb()
        
        async-md( plus )
            if /*model.wzParent.wzElement == 'li' &&*/ model.wzName.startsWith('⋅⋅')
                _ ctx.w()
            if ctx.isCode
                _ ctx.w(model.wzName)
                _ ctx.indent
                _md_gen_items( elements )
                    _ ctx.deindent
                    r_cb()
            else
                _ ctx.write(model.wzName)
                r_cb()

        async-md( js )
            _ ctx.w("```javascript")
            set ctx.isCode = true
            _md_gen_items( elements )
                set ctx.isCode = false
                _ ctx.w("```")
                r_cb()

        async-md( html )
            if model.get_html
                _ included_writers.writeIncludeHtml
                    @ ctx
                    @ model
                    a_cb( notUsed )
                        r_cb( true )
            else
                throw new Error("Wizzifier error. Html tag with no `get_html` method.")
            _ ctx.w("```html")
            set ctx.isCode = true
            _md_gen_items( elements )
                set ctx.isCode = false
                _ ctx.w("```")
                r_cb()

        async-md( css )
            _ ctx.w("```css")
            set ctx.isCode = true
            _md_gen_items( elements )
                set ctx.isCode = false
                _ ctx.w("```")
                r_cb()

        async-md( bash )
            _ ctx.w("```bash")
            set ctx.isCode = true
            _md_gen_items( elements )
                set ctx.isCode = false
                _ ctx.w("```")
                r_cb()

        async-md( sh )
            _ ctx.w("```sh")
            set ctx.isCode = true
            _md_gen_items( elements )
                set ctx.isCode = false
                _ ctx.w("```")
                r_cb()

        async-md( code )
            _ ctx.w("```" + model.lang)
            set ctx.isCode = true
            _md_gen_items( elements )
                set ctx.isCode = false
                _ ctx.w("```")
                r_cb()

        async-md( codespan )
            _ ctx.write("`" + model.wzName + "`")
            r_cb()

        async-md( imgRef )
            _ ctx.write('![' + model.alt + ']')
            _ ctx.w('[' + model.wzName + ']')
            r_cb()

        async-md( ref )
            _ ctx.write('[' + model.wzName + ']')
            _ ctx.write(' ' + model.href)
            _ ctx.w(' "' + model.title + '"')
            r_cb()

        async-md( comment )
            _ ctx.write('')
            _ ctx.write('[comment]: # ' + model.wzName)
            r_cb()

        +
        set md.analizeTable
            function
                param table
                var columns
                    {
                foreach item in table.elements
                    # loog 'analizeTable', item.wzElement, item.wzName
                    if item.wzElement == 'thead'
                        foreach th in item.elements
                            var prevTHL = columns[item.elements.indexOf(th)] || 0
                            set columns[item.elements.indexOf(th)] = Math.max(prevTHL, th.wzName.length)
                            log item.elements.indexOf(th), prevTHL, th.wzName.length, th.wzName
                    elif item.wzElement == 'tbody'
                        foreach tr in item.elements
                            foreach td in tr.elements
                                var prevTDL = columns[tr.elements.indexOf(td)] || 0
                                set columns[tr.elements.indexOf(td)] = Math.max(prevTDL, td.wzName.length)
                                log tr.elements.indexOf(td), prevTDL, td.wzName.length, td.wzName
                foreach item in table.elements
                    if item.wzElement == 'thead'
                        foreach th in item.elements
                            set th.maxLength = columns[item.elements.indexOf(th)]
                            log item.elements.indexOf(th), th.maxLength, th.wzName
                    elif item.wzElement == 'tbody'
                        foreach tr in item.elements
                            foreach td in tr.elements
                                set td.maxLength = columns[tr.elements.indexOf(td)]
                                log tr.elements.indexOf(td), td.maxLength, td.wzName
        set md.getColumnValue
            function
                param el 
                param ctx
                var text = ctx.doEscape(el.wzName)
                var diff = el.maxLength-text.length
                # !!! el.wzName not text, it will be escaped when written
                return el.wzName + new Array(diff > 0 ? diff + 1 : 0).join(' ')
        set md.getThLine
            function
                param el 
                return new Array(el.maxLength+1).join('-')
        +
        set md.writeHtml
            function
                param tag
                param model
                param ctx
                param callback
                var saveIsHtml = ctx.isHtml
                var saveIsCode = ctx.isCode
                set ctx.isHtml = true
                if !saveIsHtml
                    _ ctx.w
                _ ctx.write('<' + tag)
                foreach a in getAttributes(model)
                    var nv = verify.parseNameValue(a.wzName, a)
                    _ ctx.write(' ' + nv.name() + '="' + nv.value() + '"')
                if model.wzElement != 'element' && model.wzName.length > 0
                    _ ctx.write('>' + model.wzName)
                else
                    _ ctx.write('>')
                set ctx.isCode = true
                _md_gen_items( elements )
                    _ ctx.write('</' + tag + '>')
                    if !saveIsHtml
                        _ ctx.w
                        _ ctx.w
                    set ctx.isHtml = saveIsHtml 
                    set ctx.isCode = saveIsCode
                    r_cb()

        +
        function isLineTag
            param model
            return ['p', 'br'].indexOf(model.wzElement) > -1;

        +
        var knownAttributes
            [
                @ 'href'
                @ 'src'
                @ 'title'
                @ 'id'
                @ 'alt'

        +
        function getAttributes
            param model
            var ret = []
            foreach a in model.attributes
                _ ret.push(a)
            foreach name in knownAttributes
                if typeof model[name] !== 'undefined'
                    _ ret.push
                        {
                            @ wzName name + ' ' + model[name]
            return ret

        $include includes
        
        +
        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        
        +
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        +
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval
