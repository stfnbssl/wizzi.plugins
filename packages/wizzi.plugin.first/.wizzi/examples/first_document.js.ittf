module
    kind es6
    $
        var md = {
            name: 'first',
            artifact: 'document',
        };
    v08/examples/plugin( &md )
        $append plugins
            [ items
                @ './index.js'
            @ pluginsBaseFolder
                _ path.resolve
                    @ __dirname
                    @ '..'
        let arg = process.argv[2]
        const moduleName = arg && arg.length > 0 ? arg : 'first'
        _ executeGenerateModules
            [
                @ moduleName
            a_cb_no_throw( result )
                if err
                    error 'first/document.examples.executeGenerateModules.err', err
                    error 'first/document.examples.executeGenerateModules.err.toString()', err.toString()
                    if err.inner
                        error 'first/document.examples.executeGenerateModules.err.inner.toString()', err.inner.toString()
                else
        function executeGenerateModules
            param modules
            param callback
            _ async.mapSeries
                @ modules
                =>
                    param module
                    param callback
                    var ittfDocumentUri
                        _ path.join
                            @ __dirname
                            @ 'ittf'
                            @ module + '.first.ittf'
                    var outputPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ 'first'
                            @ module + '-document.g.html'
                    _ loadModelAndGenerateArtifact
                        @ ittfDocumentUri
                        {
                        @ 'first/document'
                        a_cb( artifactText )
                            _ file.write
                                @ outputPath
                                @ artifactText
                            r_cb( artifactText )
                @ callback
