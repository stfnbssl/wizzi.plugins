module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.ai',
            name: 'document',
            schema: 'ai',
            rootElement: 'ai',
            rootTag: 'ai',
            checkSchema: true,
            isAsync: true,
        };

    gen( &md )
        $append imports
            var axios = require('axios')
            var marked = require('marked')
            var api = null

        $append main
            set ctx.__json
                {
                    { ai
                        [ calls
            _ md.ai
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        $if false
                            _ ctx.write
                                _ JSON.stringify
                                    @ ctx.__json
                                    @ null
                                    @ 4
                            r_cb( ctx )
                        $else
                            _ ctx.wizziFactory.createFsFactory
                                {
                                    @ reuse true
                                a_cb( fsWf )
                                    _ fsWf.loadModelAndGenerateArtifact
                                        _ path.join
                                            @ __dirname
                                            @ 'ittf'
                                            @ 'document.html.ittf'                            
                                        {
                                            { modelRequestContext
                                                @ schema ctx.__json
                                            @ artifactRequestContext {}
                                        @ 'html/document'
                                        a_cb( artifactText )
                                            # loog 'logbot-document', artifactText
                                            _ ctx.w(artifactText)
                                            r_cb( ctx )
        
        async-md( ai )
            if verify.isNotEmpty(model.apiUrl)
                set api
                    _ axios.create
                        {
                            @ baseURL model.apiUrl
                            { headers
                                @ ['Content-Type'] "application/json"
            _ md.genItems
                @ model.nodes
                @ ctx
                {
                    @ indent true
                a_cb()
                    r_cb()
        
        async-md( call )
            set ctx.__current = {}
            _ ctx.__json.ai.calls.push
                @ ctx.__current
            set ctx.__current.name = model.wzName
            set ctx.__current.description = model.description
            set ctx.__current.prompt = model.prompt
            if model.messages.length > 0
                set ctx.__current.messages = []
                foreach message in model.messages
                    _ ctx.__current.messages.push
                        {
                            @ role message.role
                            @ content message.content
            log 'call, model.messages', ctx.__current.messages
            if api && ctx.__current.messages && ctx.__current.messages.length > 0
                try
                    _ api.post
                        @ 'aiapicall'
                        { 
                            @ model model.model
                            @ max_tokens parseInt(model.max_tokens)
                            @ temperature parseFloat(model.temperature)
                            @ frequency_penalty parseInt(model.frequency_penalty)
                            @ presence_penalty parseInt(model.presence_penalty)
                            @ messages ctx.__current.messages
                            @ prompt ctx.__current.prompt
                        a_then( response ) 
                            log model.prompt, ' -> ', response.data
                            set ctx.__current.info = response.data.info
                            set ctx.__current.response = response.data.result
                            set ctx.__current.usage = response.usage
                            set ctx.__current.finish_reason = response.finish_reason
                            set ctx.__current.responseHTML
                                _ marked.parse
                                    @ response.data.result
                            r_cb()
                        catch( err ) 
                            error 'Error:', err.message
                            error 'Error:', err
                            set ctx.__current.err
                                {
                                    @ message err.message
                            if err.response
                                set ctx.__current.err.data = err.response.data
                                set ctx.__current.err.status = err.response.status
                            r_cb()
                catch ex
                    error 'Exception.message:', ex.message
                    error 'Exception:', ex
                    set ctx.__current.ex
                        {
                            @ message ex.message
                    r_cb()
            else
                r_cb()

        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval