/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wzschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Wed, 22 Jan 2025 15:19:03 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('@wizzi/utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var aiBase = (function () {
    function aiBase(name, sourceLineInfo) {
        _classCallCheck(this, aiBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    aiBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    aiBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    aiBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    aiBase.prototype.wzVerify = function() {
    }
    aiBase.prototype.wzInitialize = function() {
    }
    aiBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    aiBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    aiBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    aiBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    aiBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    aiBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    aiBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    aiBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    aiBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    aiBase.prototype.error = function(message, node) {
        throw new _md.aiModelException(message, node, this);
    }
    return aiBase;
})();

_md.aiBase = aiBase;

// element node
var node = (function (aiBase) {
    _inherits(node, aiBase);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
        // relation node
        this.nodes = [];
    }
    node.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    node.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    node.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.codeLine, this.nodes);
        }
        if (name === 'm') {
            return this.wzLoadToChildColl(child, _md.method, this.nodes);
        }
        if (name === 'ai') {
            return this.wzLoadToChildColl(child, _md.ai, this.nodes);
        }
        if (name === 'llm') {
            return this.wzLoadToChildColl(child, _md.llm, this.nodes);
        }
        if (name === 'call') {
            return this.wzLoadToChildColl(child, _md.call, this.nodes);
        }
        else if (name === 'crew') {
            return this.wzLoadToChildColl(child, _md.crew, this.nodes);
        }
        if (name === 'node') {
            return this.wzLoadToChildColl(child, _md.node, this.nodes);
        }
        if (name === 'tool') {
            return this.wzLoadToChildColl(child, _md.tool, this.nodes);
        }
        else if (name === 'task') {
            return this.wzLoadToChildColl(child, _md.task, this.nodes);
        }
        if (name === 'agent') {
            return this.wzLoadToChildColl(child, _md.agent, this.nodes);
        }
        if (name === 'model') {
            return this.wzLoadToChildColl(child, _md.model, this.nodes);
        }
        if (name === 'config') {
            return this.wzLoadToChildColl(child, _md.config, this.nodes);
        }
        else if (name === 'crewai') {
            return this.wzLoadToChildColl(child, _md.crewai, this.nodes);
        }
        if (name === 'inputs') {
            return this.wzLoadToChildColl(child, _md.inputs, this.nodes);
        }
        if (name === 'message') {
            return this.wzLoadToChildColl(child, _md.message, this.nodes);
        }
        if (name === 'file_read') {
            return this.wzLoadToChildColl(child, _md.FileRead, this.nodes);
        }
        if (name === 'file_write') {
            return this.wzLoadToChildColl(child, _md.FileWrite, this.nodes);
        }
        if (name === 'openai_llm') {
            return this.wzLoadToChildColl(child, _md.OpenAI, this.nodes);
        }
        if (name === '::jsonarray') {
            return this.wzLoadToChildColl(child, _md.jsonArrayInclude, this.nodes);
        }
        if (name === 'custom_tool') {
            return this.wzLoadToChildColl(child, _md.CustomTool, this.nodes);
        }
        if (name === 'taskcontext') {
            return this.wzLoadToChildColl(child, _md.taskContext, this.nodes);
        }
        if (name === '::jsonobject') {
            return this.wzLoadToChildColl(child, _md.jsonObjectInclude, this.nodes);
        }
        else if (name === '::json-array') {
            return this.wzLoadToChildColl(child, _md.jsonArrayInclude, this.nodes);
        }
        if (name === 'json_content') {
            return this.wzLoadToChildColl(child, _md.json_content, this.nodes);
        }
        if (name === '::json-object') {
            return this.wzLoadToChildColl(child, _md.jsonObjectInclude, this.nodes);
        }
        if (name === 'directory_read') {
            return this.wzLoadToChildColl(child, _md.DirectoryRead, this.nodes);
        }
        if (name === 'mdx_rag_search') {
            return this.wzLoadToChildColl(child, _md.MdxRagSearch, this.nodes);
        }
        if (name === 'pdf_rag_search') {
            return this.wzLoadToChildColl(child, _md.PdfRagSearch, this.nodes);
        }
        else if (name === 'pydantic_model') {
            return this.wzLoadToChildColl(child, _md.Pydantic, this.nodes);
        }
        if (name === 'scrape_website') {
            return this.wzLoadToChildColl(child, _md.ScrapeWebsite, this.nodes);
        }
        if (name === 'txt_rag_search') {
            return this.wzLoadToChildColl(child, _md.TxtRagSearch, this.nodes);
        }
        if (name === 'json_rag_search') {
            return this.wzLoadToChildColl(child, _md.JsonRagSearch, this.nodes);
        }
        if (name === 'response_format') {
            return this.wzLoadToChildColl(child, _md.response_format, this.nodes);
        }
        if (name === 'website_rag_search') {
            return this.wzLoadToChildColl(child, _md.WebsiteRagSearch, this.nodes);
        }
        if (name === 'directory_rag_search') {
            return this.wzLoadToChildColl(child, _md.DirectoryRagSearch, this.nodes);
        }
        if (name === 'google_serper_search') {
            return this.wzLoadToChildColl(child, _md.GoogleSerperSearch, this.nodes);
        }
        return false;
    }
    node.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    node.prototype.wzVerify = function(ctx) {
        this.nodes.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.aiBase.prototype.wzVerify.call(this, ctx);
    }
    node.prototype.wzInitialize = function(ctx) {
        this.nodes.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.aiBase.prototype.wzInitialize.call(this, ctx);
    }
    return node;
})(aiBase);

_md.node = node;
// element ai
var ai = (function (node) {
    _inherits(ai, node);
    function ai(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ai.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ai);
        this.wzElement = "ai";
    }
    ai.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'api-url') {
            this.apiUrl = child.v; return true;
        }
        else if (name === 'api_url') {
            this.apiUrl = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    ai.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    ai.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: @wizzi/plugin.js@0.8.9
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.ai\.wizzi-override\lib\wizzi\schemas\ai.wzschema.ittf
            utc time: Wed, 22 Jan 2025 15:19:03 GMT
        */
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            if (item.wzElement == "meta") {
                this.meta = item;
            }
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return ai;
})(node);

_md.ai = ai;
// element property
var property = (function (aiBase) {
    _inherits(property, aiBase);
    function property(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(property.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, property);
        this.wzElement = "property";
    }
    return property;
})(aiBase);

_md.property = property;
// element config
var config = (function (node) {
    _inherits(config, node);
    function config(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(config.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, config);
        this.wzElement = "config";
        // relation property
        this.properties = [];
    }
    config.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    config.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    config.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.property, this.properties);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    config.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    config.prototype.wzVerify = function(ctx) {
        this.properties.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    config.prototype.wzInitialize = function(ctx) {
        this.properties.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return config;
})(node);

_md.config = config;
// element inputs
var inputs = (function (node) {
    _inherits(inputs, node);
    function inputs(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(inputs.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, inputs);
        this.wzElement = "inputs";
        // relation property
        this.properties = [];
    }
    inputs.prototype.addProperty = function(name, sourceLineInfo) {
        var retval = new _md.property(name, sourceLineInfo);
        retval.wzParent = this;
        this.properties.push(retval);
        return retval;
    }
    inputs.prototype.getProperty = function(name) {
        var found = null;
        this.properties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    inputs.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.property, this.properties);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    inputs.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    inputs.prototype.wzVerify = function(ctx) {
        this.properties.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    inputs.prototype.wzInitialize = function(ctx) {
        this.properties.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return inputs;
})(node);

_md.inputs = inputs;
// element method
var method = (function (node) {
    _inherits(method, node);
    function method(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(method.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, method);
        this.wzElement = "method";
    }
    return method;
})(node);

_md.method = method;
// element codeLine
var codeLine = (function (node) {
    _inherits(codeLine, node);
    function codeLine(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(codeLine.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, codeLine);
        this.wzElement = "codeLine";
    }
    return codeLine;
})(node);

_md.codeLine = codeLine;
// element jsonObjectInclude
var jsonObjectInclude = (function (node) {
    _inherits(jsonObjectInclude, node);
    function jsonObjectInclude(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonObjectInclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonObjectInclude);
        this.wzElement = "jsonObjectInclude";
        this.json___items = [];
    }
    jsonObjectInclude.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
            this.json___items.push(child);
            var err, wizziModel;
            this.wzRoot().wzFactory.loadModelFromMtree( //;
                'json',  //;
                { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                function(cberr, cbwizziModel) { //;
                    err = cberr;
                    wizziModel = cbwizziModel;
                });
            this.get_json = function(callback) { //;
                // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                var iv = setInterval(function() { //;
                    if (err || wizziModel) { //;
                        clearInterval(iv);
                        if (callback) { //;
                            callback(err, wizziModel);
                            callback = null;
                        } //;
                    } //;
                }, 100);
            };
            return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    jsonObjectInclude.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return jsonObjectInclude;
})(node);

_md.jsonObjectInclude = jsonObjectInclude;
// element jsonArrayInclude
var jsonArrayInclude = (function (node) {
    _inherits(jsonArrayInclude, node);
    function jsonArrayInclude(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(jsonArrayInclude.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, jsonArrayInclude);
        this.wzElement = "jsonArrayInclude";
        this.json___items = [];
    }
    jsonArrayInclude.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '[') {
            // generated by wizzi/lib/wizzi/models/bootstrap/t/wfschema/t/element_load;
            this.json___items.push(child);
            var err, wizziModel;
            this.wzRoot().wzFactory.loadModelFromMtree( //;
                'json',  //;
                { nodes: [ child ], loadHistory: this.wzRoot().loadHistory }, //;
                function(cberr, cbwizziModel) { //;
                    err = cberr;
                    wizziModel = cbwizziModel;
                });
            this.get_json = function(callback) { //;
                // We must wait until the async loadModelFromMtree(..) has returned a wizziModel or an err;
                var iv = setInterval(function() { //;
                    if (err || wizziModel) { //;
                        clearInterval(iv);
                        if (callback) { //;
                            callback(err, wizziModel);
                            callback = null;
                        } //;
                    } //;
                }, 100);
            };
            return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    jsonArrayInclude.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return jsonArrayInclude;
})(node);

_md.jsonArrayInclude = jsonArrayInclude;
// element call
var call = (function (node) {
    _inherits(call, node);
    function call(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(call.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, call);
        this.wzElement = "call";
        this.max_tokens = "1500";
        this.temperature = "0.7";
        this.top_p = "1";
        this.frequency_penalty = "0";
        this.presence_penalty = "0";
        // relation message
        this.messages = [];
        // relation response_format
        this.response_format = null;
    }
    call.prototype.addMessage = function(name, sourceLineInfo) {
        var retval = new _md.message(name, sourceLineInfo);
        retval.wzParent = this;
        this.messages.push(retval);
        return retval;
    }
    call.prototype.getMessage = function(name) {
        var found = null;
        this.messages.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    call.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'kind') {
            this.kind = child.v; return true;
        }
        if (name === 'top_p') {
            this.top_p = child.v; return true;
        }
        if (name === 'prompt') {
            this.prompt = child.v; return true;
        }
        if (name === 'message') {
            return this.wzLoadToChildColl(child, _md.message, this.messages);
        }
        if (name === 'max_tokens') {
            this.max_tokens = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'temperature') {
            this.temperature = child.v; return true;
        }
        if (name === 'response_format') {
            return this.wzLoadOneToOne(child, _md.response_format, 'response_format');
        }
        if (name === 'presence_penalty') {
            this.presence_penalty = child.v; return true;
        }
        if (name === 'frequency_penalty') {
            this.frequency_penalty = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    call.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    call.prototype.wzVerify = function(ctx) {
        this.messages.forEach(item => 
            item.wzVerify(ctx)
        )
        if (this.response_format != null) {
            this.response_format.wzVerify(ctx);
        }
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    call.prototype.wzInitialize = function(ctx) {
        this.messages.forEach(item => 
            item.wzInitialize(ctx)
        )
        if (this.response_format != null) {
            this.response_format.wzInitialize(ctx);
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return call;
})(node);

_md.call = call;
/**
    element response_format
     children jsonObjectInclude
*/
var response_format = (function (node) {
    _inherits(response_format, node);
    function response_format(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(response_format.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, response_format);
        this.wzElement = "response_format";
    }
    return response_format;
})(node);

_md.response_format = response_format;
// element message
var message = (function (node) {
    _inherits(message, node);
    function message(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(message.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, message);
        this.wzElement = "message";
        // relation json_content
        this.json_content = null;
    }
    message.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'role') {
            this.role = child.v; return true;
        }
        if (name === 'content') {
            this.content = child.v; return true;
        }
        if (name === 'json_content') {
            return this.wzLoadOneToOne(child, _md.json_content, 'json_content');
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    message.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    message.prototype.wzVerify = function(ctx) {
        if (this.json_content != null) {
            this.json_content.wzVerify(ctx);
        }
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    message.prototype.wzInitialize = function(ctx) {
        if (this.json_content != null) {
            this.json_content.wzInitialize(ctx);
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return message;
})(node);

_md.message = message;
/**
    element json_content
     children jsonObjectInclude, jsonArrayInclude
*/
var json_content = (function (node) {
    _inherits(json_content, node);
    function json_content(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(json_content.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, json_content);
        this.wzElement = "json_content";
    }
    return json_content;
})(node);

_md.json_content = json_content;
// element crewai
var crewai = (function (node) {
    _inherits(crewai, node);
    function crewai(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(crewai.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, crewai);
        this.wzElement = "crewai";
    }
    return crewai;
})(node);

_md.crewai = crewai;
// element agentRef
var agentRef = (function (aiBase) {
    _inherits(agentRef, aiBase);
    function agentRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(agentRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, agentRef);
        this.wzElement = "agentRef";
    }
    return agentRef;
})(aiBase);

_md.agentRef = agentRef;
// element taskRef
var taskRef = (function (aiBase) {
    _inherits(taskRef, aiBase);
    function taskRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(taskRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, taskRef);
        this.wzElement = "taskRef";
    }
    return taskRef;
})(aiBase);

_md.taskRef = taskRef;
// element toolRef
var toolRef = (function (aiBase) {
    _inherits(toolRef, aiBase);
    function toolRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(toolRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, toolRef);
        this.wzElement = "toolRef";
    }
    return toolRef;
})(aiBase);

_md.toolRef = toolRef;
// element llmRef
var llmRef = (function (aiBase) {
    _inherits(llmRef, aiBase);
    function llmRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(llmRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, llmRef);
        this.wzElement = "llmRef";
    }
    return llmRef;
})(aiBase);

_md.llmRef = llmRef;
// element llmProperty
var llmProperty = (function (aiBase) {
    _inherits(llmProperty, aiBase);
    function llmProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(llmProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, llmProperty);
        this.wzElement = "llmProperty";
    }
    llmProperty.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        return false;
    }
    llmProperty.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return llmProperty;
})(aiBase);

_md.llmProperty = llmProperty;
// element llm
var llm = (function (node) {
    _inherits(llm, node);
    function llm(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(llm.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, llm);
        this.wzElement = "llm";
        // relation llmProperty
        this.llmProperties = [];
    }
    llm.prototype.addLlmProperty = function(name, sourceLineInfo) {
        var retval = new _md.llmProperty(name, sourceLineInfo);
        retval.wzParent = this;
        this.llmProperties.push(retval);
        return retval;
    }
    llm.prototype.getLlmProperty = function(name) {
        var found = null;
        this.llmProperties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    llm.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'p') {
            return this.wzLoadToChildColl(child, _md.llmProperty, this.llmProperties);
        }
        if (name === 'model') {
            this.model = child.v; return true;
        }
        if (name === 'api_key') {
            this.apiKey = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    llm.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    llm.prototype.wzVerify = function(ctx) {
        this.llmProperties.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    llm.prototype.wzInitialize = function(ctx) {
        this.llmProperties.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return llm;
})(node);

_md.llm = llm;
// element OpenAI
var OpenAI = (function (llm) {
    _inherits(OpenAI, llm);
    function OpenAI(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(OpenAI.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, OpenAI);
        this.wzElement = "OpenAI";
    }
    return OpenAI;
})(llm);

_md.OpenAI = OpenAI;
// element tool
var tool = (function (node) {
    _inherits(tool, node);
    function tool(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(tool.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, tool);
        this.wzElement = "tool";
    }
    tool.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'api_key') {
            this.apiKey = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    tool.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return tool;
})(node);

_md.tool = tool;
// element DirectoryRead
var DirectoryRead = (function (tool) {
    _inherits(DirectoryRead, tool);
    function DirectoryRead(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(DirectoryRead.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, DirectoryRead);
        this.wzElement = "DirectoryRead";
    }
    DirectoryRead.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'directory_path') {
            this.directory_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    DirectoryRead.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return DirectoryRead;
})(tool);

_md.DirectoryRead = DirectoryRead;
// element DirectoryRagSearch
var DirectoryRagSearch = (function (tool) {
    _inherits(DirectoryRagSearch, tool);
    function DirectoryRagSearch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(DirectoryRagSearch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, DirectoryRagSearch);
        this.wzElement = "DirectoryRagSearch";
    }
    DirectoryRagSearch.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'directory_path') {
            this.directory_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    DirectoryRagSearch.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return DirectoryRagSearch;
})(tool);

_md.DirectoryRagSearch = DirectoryRagSearch;
// element FileRead
var FileRead = (function (tool) {
    _inherits(FileRead, tool);
    function FileRead(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(FileRead.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, FileRead);
        this.wzElement = "FileRead";
    }
    FileRead.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'file_path') {
            this.file_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    FileRead.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return FileRead;
})(tool);

_md.FileRead = FileRead;
// element FileWrite
var FileWrite = (function (tool) {
    _inherits(FileWrite, tool);
    function FileWrite(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(FileWrite.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, FileWrite);
        this.wzElement = "FileWrite";
    }
    FileWrite.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'file_path') {
            this.file_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    FileWrite.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return FileWrite;
})(tool);

_md.FileWrite = FileWrite;
// element GoogleSerperSearch
var GoogleSerperSearch = (function (tool) {
    _inherits(GoogleSerperSearch, tool);
    function GoogleSerperSearch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(GoogleSerperSearch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, GoogleSerperSearch);
        this.wzElement = "GoogleSerperSearch";
        // The URL endpoint for the search API. (Default is https://google.serper.dev/search)
        /**
             Optional.
             Specify the country for the search results.
        */
        /**
             Optional.
             Specify the location for the search results.
        */
        /**
             Optional.
             Specify the locale for the search results.
        */
        // Number of search results to return.
        this.n_results = 10;
    }
    GoogleSerperSearch.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'locale') {
            this.locale = child.v; return true;
        }
        if (name === 'country') {
            this.country = child.v; return true;
        }
        if (name === 'location') {
            this.location = child.v; return true;
        }
        if (name === 'n_results') {
            this.n_results = parseinteger(child.v, null, child); return true;
        }
        if (name === 'search_url') {
            this.search_url = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    GoogleSerperSearch.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return GoogleSerperSearch;
})(tool);

_md.GoogleSerperSearch = GoogleSerperSearch;
// element JsonRagSearch
var JsonRagSearch = (function (tool) {
    _inherits(JsonRagSearch, tool);
    function JsonRagSearch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(JsonRagSearch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, JsonRagSearch);
        this.wzElement = "JsonRagSearch";
    }
    JsonRagSearch.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'file_path') {
            this.file_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    JsonRagSearch.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return JsonRagSearch;
})(tool);

_md.JsonRagSearch = JsonRagSearch;
// element MdxRagSearch
var MdxRagSearch = (function (tool) {
    _inherits(MdxRagSearch, tool);
    function MdxRagSearch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(MdxRagSearch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, MdxRagSearch);
        this.wzElement = "MdxRagSearch";
    }
    MdxRagSearch.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'file_path') {
            this.file_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    MdxRagSearch.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return MdxRagSearch;
})(tool);

_md.MdxRagSearch = MdxRagSearch;
// element PdfRagSearch
var PdfRagSearch = (function (tool) {
    _inherits(PdfRagSearch, tool);
    function PdfRagSearch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(PdfRagSearch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, PdfRagSearch);
        this.wzElement = "PdfRagSearch";
    }
    PdfRagSearch.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'file_path') {
            this.file_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    PdfRagSearch.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return PdfRagSearch;
})(tool);

_md.PdfRagSearch = PdfRagSearch;
// element ScrapeWebsite
var ScrapeWebsite = (function (tool) {
    _inherits(ScrapeWebsite, tool);
    function ScrapeWebsite(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ScrapeWebsite.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ScrapeWebsite);
        this.wzElement = "ScrapeWebsite";
    }
    ScrapeWebsite.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'website_url') {
            this.website_url = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    ScrapeWebsite.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return ScrapeWebsite;
})(tool);

_md.ScrapeWebsite = ScrapeWebsite;
// element TxtRagSearch
var TxtRagSearch = (function (tool) {
    _inherits(TxtRagSearch, tool);
    function TxtRagSearch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(TxtRagSearch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, TxtRagSearch);
        this.wzElement = "TxtRagSearch";
    }
    TxtRagSearch.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'file_path') {
            this.file_path = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    TxtRagSearch.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return TxtRagSearch;
})(tool);

_md.TxtRagSearch = TxtRagSearch;
// element WebsiteRagSearch
var WebsiteRagSearch = (function (tool) {
    _inherits(WebsiteRagSearch, tool);
    function WebsiteRagSearch(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(WebsiteRagSearch.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, WebsiteRagSearch);
        this.wzElement = "WebsiteRagSearch";
    }
    WebsiteRagSearch.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'website_url') {
            this.website_url = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    WebsiteRagSearch.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return WebsiteRagSearch;
})(tool);

_md.WebsiteRagSearch = WebsiteRagSearch;
/**
    element CustomTool
    
*/
var CustomTool = (function (tool) {
    _inherits(CustomTool, tool);
    function CustomTool(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(CustomTool.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, CustomTool);
        this.wzElement = "CustomTool";
    }
    CustomTool.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'name') {
            this.name = child.v; return true;
        }
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        ok = _md.tool.prototype.loadChild.call(this, child);
        return ok;
    }
    CustomTool.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return CustomTool;
})(tool);

_md.CustomTool = CustomTool;
// element modelProperty
var modelProperty = (function (aiBase) {
    _inherits(modelProperty, aiBase);
    function modelProperty(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelProperty.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelProperty);
        this.wzElement = "modelProperty";
    }
    modelProperty.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        return false;
    }
    modelProperty.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return modelProperty;
})(aiBase);

_md.modelProperty = modelProperty;
// element model
var model = (function (node) {
    _inherits(model, node);
    function model(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(model.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, model);
        this.wzElement = "model";
        // relation modelProperty
        this.modelProperties = [];
    }
    model.prototype.addModelProperty = function(name, sourceLineInfo) {
        var retval = new _md.modelProperty(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelProperties.push(retval);
        return retval;
    }
    model.prototype.getModelProperty = function(name) {
        var found = null;
        this.modelProperties.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    model.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'p') {
            return this.wzLoadToChildColl(child, _md.modelProperty, this.modelProperties);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    model.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    model.prototype.wzVerify = function(ctx) {
        this.modelProperties.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    model.prototype.wzInitialize = function(ctx) {
        this.modelProperties.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return model;
})(node);

_md.model = model;
// element Pydantic
var Pydantic = (function (model) {
    _inherits(Pydantic, model);
    function Pydantic(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(Pydantic.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, Pydantic);
        this.wzElement = "Pydantic";
    }
    return Pydantic;
})(model);

_md.Pydantic = Pydantic;
// element agent
var agent = (function (node) {
    _inherits(agent, node);
    function agent(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(agent.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, agent);
        this.allowedCODE_EXECUTION_MODES = [ "safe", "restrict"];
        this.CODE_EXECUTION_MODE_SAFE = "safe";
        this.CODE_EXECUTION_MODE_RESTRICT = "restrict";
        this.wzElement = "agent";
        // Defines the agent’s function within the crew. It determines the kind of tasks the agent is best suited for.
        // The individual objective that the agent aims to achieve. It guides the agent’s decision-making process.
        // Provides context to the agent’s role and goal, enriching the interaction and collaboration dynamics.
        /**
             optional
             Represents the language model that will run the agent. It dynamically fetches the model name from the OPENAI_MODEL_NAME environment variable, defaulting to “gpt-4” if not specified.
        */
        /**
             Specifies the language model that will handle the tool calling for this agent, overriding the crew function calling LLM if passed.
             Default is None.
        */
        // Max Iter is the maximum number of iterations the agent can perform before being forced to give its best answer.
        this.max_iter = 25;
        /**
             optional
             Max RPM is the maximum number of requests per minute the agent can perform to avoid rate limits. It’s optional and can be left unspecified.
             Default value is None.
        */
        /**
             optional
             Max Execution Time is the maximum execution time for an agent to execute a task. It’s optional and can be left unspecified, with a default value of None, meaning no max execution time.
        */
        /**
             optional
             Setting this to True configures the internal logger to provide detailed execution logs, aiding in debugging and monitoring.
        */
        this.verbose = false;
        /**
             optional
             Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent.
             Default is False.
        */
        this.allow_delegation = false;
        /**
             optional
             A function that is called after each step of the agent.
             This can be used to log the agent’s actions or to perform other operations. It will overwrite the crew step_callback.
        */
        /**
             optional
             Indicates if the agent should use a cache for tool usage.
        */
        this.cache = true;
        /**
             optional
             Specifies the system format for the agent.
             Default is None.
        */
        /**
             optional
             Specifies the prompt format for the agent.
             Default is None.
        */
        /**
             optional
             Specifies the response format for the agent.
             Default is None.
        */
        /**
             optional
             Enable code execution for the agent.
        */
        this.allow_code_execution = false;
        /**
             optional
             Maximum number of retries for an agent to execute a task when an error occurs.
        */
        this.max_retry_limit = 2;
        /**
             optional
             Adds the ability to not use system prompt (to support o1 models).
        */
        this.use_system_prompt = true;
        /**
             optional
             Summary strategy to avoid overflowing the context window.
        */
        this.respect_context_window = true;
        /**
             optional
             Determines the mode for code execution: ‘safe’ (using Docker) or ‘unsafe’ (direct execution on the host machine).
        */
        this.code_execution_mode = "safe";
        // relation toolRef
        // optional
        // Set of capabilities or functions that the agent can use to perform tasks. Expected to be instances of custom classes compatible with the agent’s execution environment. Tools are initialized with a default value of an empty list.
        this.toolRefs = [];
    }
    agent.CODE_EXECUTION_MODE_SAFE = "safe";
    
    agent.CODE_EXECUTION_MODE_RESTRICT = "restrict";
    
    agent.prototype.addToolRef = function(name, sourceLineInfo) {
        var retval = new _md.toolRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.toolRefs.push(retval);
        return retval;
    }
    agent.prototype.getToolRef = function(name) {
        var found = null;
        this.toolRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    agent.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'llm') {
            this.llm = child.v; return true;
        }
        if (name === 'goal') {
            this.goal = child.v; return true;
        }
        if (name === 'role') {
            this.role = child.v; return true;
        }
        if (name === 'cache') {
            this.cache = parseboolean(child.v, null, child); return true;
        }
        if (name === 'max_rpm') {
            this.max_rpm = child.v; return true;
        }
        if (name === 'verbose') {
            this.verbose = parseboolean(child.v, null, child); return true;
        }
        if (name === 'max_iter') {
            this.max_iter = parseinteger(child.v, null, child); return true;
        }
        if (name === 'tool_ref') {
            return this.wzLoadToChildColl(child, _md.toolRef, this.toolRefs);
        }
        if (name === 'backstory') {
            this.backstory = child.v; return true;
        }
        if (name === 'step_callback') {
            this.step_callback = child.v; return true;
        }
        if (name === 'max_retry_limit') {
            this.max_retry_limit = parseinteger(child.v, null, child); return true;
        }
        if (name === 'prompt_template') {
            this.prompt_template = child.v; return true;
        }
        if (name === 'system_template') {
            this.system_template = child.v; return true;
        }
        if (name === 'allow_delegation') {
            this.allow_delegation = parseboolean(child.v, null, child); return true;
        }
        if (name === 'response_template') {
            this.response_template = child.v; return true;
        }
        if (name === 'use_system_prompt') {
            this.use_system_prompt = parseboolean(child.v, null, child); return true;
        }
        if (name === 'max_execution_time') {
            this.max_execution_time = child.v; return true;
        }
        if (name === 'code_execution_mode') {
            this.code_execution_mode = child.v; return true;
        }
        if (name === 'allow_code_execution') {
            this.allow_code_execution = parseboolean(child.v, null, child); return true;
        }
        if (name === 'function_calling_llm') {
            this.function_calling_llm = child.v; return true;
        }
        if (name === 'respect_context_window') {
            this.respect_context_window = parseboolean(child.v, null, child); return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    agent.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    agent.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("agent", "code_execution_mode", this.code_execution_mode, this.allowedCODE_EXECUTION_MODES, this);
        this.toolRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    agent.prototype.wzInitialize = function(ctx) {
        this.toolRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return agent;
})(node);

_md.agent = agent;
// element taskContext
var taskContext = (function (node) {
    _inherits(taskContext, node);
    function taskContext(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(taskContext.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, taskContext);
        this.wzElement = "taskContext";
        // relation taskRef
        this.taskRefs = [];
    }
    taskContext.prototype.addTaskRef = function(name, sourceLineInfo) {
        var retval = new _md.taskRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.taskRefs.push(retval);
        return retval;
    }
    taskContext.prototype.getTaskRef = function(name) {
        var found = null;
        this.taskRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    taskContext.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'task_ref') {
            return this.wzLoadToChildColl(child, _md.taskRef, this.taskRefs);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    taskContext.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    taskContext.prototype.wzVerify = function(ctx) {
        this.taskRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    taskContext.prototype.wzInitialize = function(ctx) {
        this.taskRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return taskContext;
})(node);

_md.taskContext = taskContext;
// element task
var task = (function (node) {
    _inherits(task, node);
    function task(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(task.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, task);
        this.wzElement = "task";
        // A clear, concise statement of what the task entails.
        // A detailed description of what the task’s completion looks like.
        /**
             Optional[bool]
             If set, the task executes asynchronously, allowing progression without waiting for completion.
        */
        this.async_execution = false;
        /**
             Optional[Type[BaseModel]]
             Outputs a JSON object, requiring an OpenAI client.
             Only one output format can be set.
        */
        /**
             Optional[Type[BaseModel]]
             Outputs a Pydantic model object, requiring an OpenAI client.
             Only one output format can be set.
        */
        /**
             Optional[str]
             Saves the task output to a file.
             If used with Output JSON or Output Pydantic, specifies how the output is saved.
        */
        /**
             Optional[TaskOutput]
             An instance of TaskOutput, containing the raw, JSON, and Pydantic output plus additional details.
        */
        /**
             Optional[Any]
             A callable that is executed with the task’s output upon completion.
        */
        /**
             Optional[bool]
             Indicates if the task should involve human review at the end, useful for tasks needing human oversight.
        */
        this.human_input = false;
        /**
             Optional[Type[Converter]]
             A converter class used to export structured output.
             Defaults to None.
        */
        // relation agent
        // Optional[BaseAgent]
        // The agent responsible for the task, assigned either directly or by the crew’s process.
        this.agent = null;
        // relation taskContext
        // Optional[List["Task"]]
        // Specifies tasks whose outputs are used as context for this task.
        this.taskContext = null;
        // relation config
        // Optional[Dict[str, Any]]
        // Additional configuration details for the agent executing the task, allowing further customization.
        // Defaults to None.
        this.config = null;
        // relation toolRef
        // Optional[List[Any]]
        // The functions or capabilities the agent can utilize to perform the task.
        // Defaults to an empty list.
        this.toolRefs = [];
    }
    task.prototype.addToolRef = function(name, sourceLineInfo) {
        var retval = new _md.toolRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.toolRefs.push(retval);
        return retval;
    }
    task.prototype.getToolRef = function(name) {
        var found = null;
        this.toolRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    task.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'agent') {
            return this.wzLoadOneToOne(child, _md.agent, 'agent');
        }
        if (name === 'config') {
            return this.wzLoadOneToOne(child, _md.config, 'config');
        }
        if (name === 'output') {
            this.output = child.v; return true;
        }
        if (name === 'callback') {
            this.callback = child.v; return true;
        }
        if (name === 'tool_ref') {
            return this.wzLoadToChildColl(child, _md.toolRef, this.toolRefs);
        }
        if (name === 'description') {
            this.description = child.v; return true;
        }
        if (name === 'human_input') {
            this.human_input = parseboolean(child.v, null, child); return true;
        }
        if (name === 'output_json') {
            this.output_json = child.v; return true;
        }
        else if (name === 'output_file') {
            this.output_file = child.v; return true;
        }
        if (name === 'taskcontext') {
            return this.wzLoadOneToOne(child, _md.taskContext, 'taskContext');
        }
        if (name === 'converter_cls') {
            this.converter_cls = child.v; return true;
        }
        if (name === 'async_execution') {
            this.async_execution = parseboolean(child.v, null, child); return true;
        }
        if (name === 'expected_output') {
            this.expected_output = child.v; return true;
        }
        if (name === 'output_pydantic') {
            this.output_pydantic = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    task.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    task.prototype.wzVerify = function(ctx) {
        if (this.agent != null) {
            this.agent.wzVerify(ctx);
        }
        if (this.taskContext != null) {
            this.taskContext.wzVerify(ctx);
        }
        if (this.config != null) {
            this.config.wzVerify(ctx);
        }
        this.toolRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    task.prototype.wzInitialize = function(ctx) {
        if (this.agent != null) {
            this.agent.wzInitialize(ctx);
        }
        if (this.taskContext != null) {
            this.taskContext.wzInitialize(ctx);
        }
        if (this.config != null) {
            this.config.wzInitialize(ctx);
        }
        this.toolRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return task;
})(node);

_md.task = task;
// element display
var display = (function (aiBase) {
    _inherits(display, aiBase);
    function display(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(display.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, display);
        this.allowedFORMATS = [ "text", "json"];
        this.FORMAT_TEXT = "text";
        this.FORMAT_JSON = "json";
        this.wzElement = "display";
    }
    display.FORMAT_TEXT = "text";
    
    display.FORMAT_JSON = "json";
    
    display.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'format') {
            this.format = child.v; return true;
        }
        if (name === 'file_path') {
            this.file_path = child.v; return true;
        }
        return false;
    }
    display.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    display.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("display", "format", this.format, this.allowedFORMATS, this);
        _md.aiBase.prototype.wzVerify.call(this, ctx);
    }
    return display;
})(aiBase);

_md.display = display;
// element exec
var exec = (function (aiBase) {
    _inherits(exec, aiBase);
    function exec(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(exec.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, exec);
        this.wzElement = "exec";
        // relation display
        this.displays = [];
        // relation inputs
        this.inputs = null;
    }
    exec.prototype.addDisplay = function(name, sourceLineInfo) {
        var retval = new _md.display(name, sourceLineInfo);
        retval.wzParent = this;
        this.displays.push(retval);
        return retval;
    }
    exec.prototype.getDisplay = function(name) {
        var found = null;
        this.displays.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    exec.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'inputs') {
            return this.wzLoadOneToOne(child, _md.inputs, 'inputs');
        }
        if (name === 'display') {
            return this.wzLoadToChildColl(child, _md.display, this.displays);
        }
        return false;
    }
    exec.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    exec.prototype.wzVerify = function(ctx) {
        this.displays.forEach(item => 
            item.wzVerify(ctx)
        )
        if (this.inputs != null) {
            this.inputs.wzVerify(ctx);
        }
        _md.aiBase.prototype.wzVerify.call(this, ctx);
    }
    exec.prototype.wzInitialize = function(ctx) {
        this.displays.forEach(item => 
            item.wzInitialize(ctx)
        )
        if (this.inputs != null) {
            this.inputs.wzInitialize(ctx);
        }
        _md.aiBase.prototype.wzInitialize.call(this, ctx);
    }
    return exec;
})(aiBase);

_md.exec = exec;
// element crew
var crew = (function (node) {
    _inherits(crew, node);
    function crew(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(crew.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, crew);
        this.allowedPROCESSES = [ "sequential", "hierarchical"];
        this.PROCESS_SEQUENTIAL = "sequential";
        this.PROCESS_HIERARCHICAL = "hierarchical";
        this.wzElement = "crew";
        // The process flow (e.g., sequential, hierarchical) the crew follows.
        this.process = "sequential";
        // The verbosity level for logging during execution.
        this.verbose = false;
        /**
             The language model used by the manager agent in a hierarchical process.
             Required when using a hierarchical process.
        */
        /**
             If passed, the crew will use this LLM to do function calling for tools for all agents in the crew.
             Each agent can have its own LLM, which overrides the crew’s LLM for function calling.
        */
        /**
             Maximum requests per minute the crew adheres to during execution.
             Defaults to None.
        */
        // Language used for the crew.
        this.language = "English";
        // Path to the language file to be used for the crew.
        // Utilized for storing execution memories (short-term, long-term, entity memory).
        this.memory = false;
        // Specifies whether to use a cache for storing the results of tools’ execution.
        this.cache = true;
        /**
             Configuration for the embedder to be used by the crew.
             Mostly used by memory for now.
             Default is {"provider": "openai"}.
        */
        // Whether the crew should return the full output with all tasks outputs or just the final output.
        this.full_output = false;
        /**
             A function that is called after each step of every agent.
             This can be used to log the agent’s actions or to perform other operations;
             it won’t override the agent-specific step_callback.
        */
        /**
             A function that is called after the completion of each task.
             Useful for monitoring or additional operations post-task execution.
        */
        /**
             Whether you want to share the complete crew information and execution with the crewAI team to make the library better,
             and allow us to train models.
        */
        /**
             Whether you want to have a file with the complete crew output and execution.
             You can set it using True and it will default to the folder you are currently in
             and it will be called logs.txt or passing a string with the full path and name of the file.
        */
        // Sets a custom agent that will be used as a manager.
        // Takes a list of callback handlers to be executed by the manager agent when a hierarchical process is used.
        // Path to the prompt JSON file to be used for the crew.
        /**
             Adds planning ability to the Crew.
             When activated before each Crew iteration, all Crew data is sent to an AgentPlanner
             that will plan the tasks and this plan will be added to each task description.
        */
        this.planning = false;
        // The language model used by the AgentPlanner in a planning process.
        // relation taskRef
        // A list of tasks assigned to the crew.
        this.taskRefs = [];
        // relation agentRef
        // A list of agents that are part of the crew.
        this.agentRefs = [];
        // relation exec
        // A list of executions (kickoffs)
        this.execs = [];
    }
    crew.PROCESS_SEQUENTIAL = "sequential";
    
    crew.PROCESS_HIERARCHICAL = "hierarchical";
    
    crew.prototype.addTaskRef = function(name, sourceLineInfo) {
        var retval = new _md.taskRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.taskRefs.push(retval);
        return retval;
    }
    crew.prototype.getTaskRef = function(name) {
        var found = null;
        this.taskRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    crew.prototype.addAgentRef = function(name, sourceLineInfo) {
        var retval = new _md.agentRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.agentRefs.push(retval);
        return retval;
    }
    crew.prototype.getAgentRef = function(name) {
        var found = null;
        this.agentRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    crew.prototype.addExec = function(name, sourceLineInfo) {
        var retval = new _md.exec(name, sourceLineInfo);
        retval.wzParent = this;
        this.execs.push(retval);
        return retval;
    }
    crew.prototype.getExec = function(name) {
        var found = null;
        this.execs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    crew.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'exec') {
            return this.wzLoadToChildColl(child, _md.exec, this.execs);
        }
        if (name === 'cache') {
            this.cache = parseboolean(child.v, null, child); return true;
        }
        if (name === 'memory') {
            this.memory = parseboolean(child.v, null, child); return true;
        }
        if (name === 'max_rpm') {
            this.max_rpm = child.v; return true;
        }
        if (name === 'process') {
            this.process = child.v; return true;
        }
        if (name === 'verbose') {
            this.verbose = parseboolean(child.v, null, child); return true;
        }
        if (name === 'embedder') {
            this.embedder = child.v; return true;
        }
        if (name === 'language') {
            this.language = child.v; return true;
        }
        if (name === 'planning') {
            this.planning = parseboolean(child.v, null, child); return true;
        }
        if (name === 'task_ref') {
            return this.wzLoadToChildColl(child, _md.taskRef, this.taskRefs);
        }
        if (name === 'agent_ref') {
            return this.wzLoadToChildColl(child, _md.agentRef, this.agentRefs);
        }
        if (name === 'share_crew') {
            this.share_crew = child.v; return true;
        }
        if (name === 'full_output') {
            this.full_output = parseboolean(child.v, null, child); return true;
        }
        if (name === 'manager_llm') {
            this.manager_llm = child.v; return true;
        }
        if (name === 'prompt_file') {
            this.prompt_file = child.v; return true;
        }
        if (name === 'planning_llm') {
            this.planning_llm = child.v; return true;
        }
        if (name === 'language_file') {
            this.language_file = child.v; return true;
        }
        if (name === 'manager_agent') {
            this.manager_agent = child.v; return true;
        }
        if (name === 'step_callback') {
            this.step_callback = child.v; return true;
        }
        if (name === 'task_callback') {
            this.task_callback = child.v; return true;
        }
        if (name === 'output_log_file') {
            this.output_log_file = child.v; return true;
        }
        if (name === 'manager_callbacks') {
            this.manager_callbacks = child.v; return true;
        }
        if (name === 'function_calling_llm') {
            this.function_calling_llm = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    crew.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.aiModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    crew.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("crew", "process", this.process, this.allowedPROCESSES, this);
        this.taskRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        this.agentRefs.forEach(item => 
            item.wzVerify(ctx)
        )
        this.execs.forEach(item => 
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    crew.prototype.wzInitialize = function(ctx) {
        this.taskRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.agentRefs.forEach(item => 
            item.wzInitialize(ctx)
        )
        this.execs.forEach(item => 
            item.wzInitialize(ctx)
        )
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return crew;
})(node);

_md.crew = crew;
_md.__tagElementMapping = { 'm': 'method', '+': 'codeLine', '::json-object': 'jsonObjectInclude', '::jsonobject': 'jsonObjectInclude', '::json-array': 'jsonArrayInclude', '::jsonarray': 'jsonArrayInclude', 'openai_llm': 'OpenAI', 'directory_read': 'DirectoryRead', 'directory_rag_search': 'DirectoryRagSearch', 'file_read': 'FileRead', 'file_write': 'FileWrite', 'google_serper_search': 'GoogleSerperSearch', 'json_rag_search': 'JsonRagSearch', 'mdx_rag_search': 'MdxRagSearch', 'pdf_rag_search': 'PdfRagSearch', 'scrape_website': 'ScrapeWebsite', 'txt_rag_search': 'TxtRagSearch', 'website_rag_search': 'WebsiteRagSearch', 'custom_tool': 'CustomTool', 'pydantic_model': 'Pydantic', '@': 'property', 'p': 'llmProperty', 'tool_ref': 'toolRef', 'task_ref': 'taskRef', 'agent_ref': 'agentRef' };
// model/replaceUnknownElement( )
var aiModelException = (function () {
    function aiModelException(message, node, instance) {
        _classCallCheck(this, aiModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    aiModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: aiModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return aiModelException;
})();

_md.aiModelException = aiModelException;
var aiContext = (function () {
    function aiContext() {
        _classCallCheck(this, aiContext);
        this.validationErrors = [];
    }
    aiContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    aiContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    aiContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'))
        }
    }
    return aiContext;
})();

_md.aiContext = aiContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseinteger(value, defaultValue, node) {
    if (isEmpty(value)) {
        return defaultValue;
    }
    if (!isInt(value)) {
        throw new aiModelException('Must be an int value, got:' + value, node);
    }
    return parseInt(value, 10);
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new aiModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function isArray(value) {
    return Object.prototype.toString.call( value ) === '[object Array]';
}
function isNumber(value) {
    return !isArray( value ) && (value - parseFloat( value ) + 1) >= 0;
}
function isInt(value) {
    return isNumber( value );
}