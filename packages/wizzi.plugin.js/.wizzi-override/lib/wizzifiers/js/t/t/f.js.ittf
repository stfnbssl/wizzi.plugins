$group
	$params name, commands|none

	# process AST node ${name}

	$
		var items = commands.split(';'), cmd, tag = name, skip = false, isName = false, tagIsVar = false, 
			\b isText = false, mustBeText = false, couldBeText = false, retIsArray = false, ignore = false;
		for (var i=0; i<items.length; i++) {
			cmd = items[i];
			if (cmd == 'skip') { skip = true; }
			else if (cmd == 'name') { isName = true; }
			else if (cmd == 'tag-is-var') { tagIsVar = true; }
			else if (cmd == 'is-text') { isText = true; }
			else if (cmd == 'must-be-text') { mustBeText = true; }
			else if (cmd == 'could-be-text') { couldBeText = true; }
			else if (cmd == 'ret-is-array') { retIsArray = true; }
			else if (cmd == 'ignore') { ignore = true; }
			else {tag = cmd} ;
		}

    $if wzConfigIsDocumentation
        var ${name}_astNode
            {
                @ name "${name}"
                @ ittfTag "${tag}"
                $if isName
                    @ isName true
                $if tagIsVar
                    @ tagIsVar true
                $if isText
                    @ isText true
                $if mustBeText
                    @ mustBeText true
                $if couldBeText
                    @ couldBeText true
                $if retIsArray
                    @ retIsArray true
                $if skip
                    @ skip true
                $if ignore
                    @ ignore true
                [ props
        _ wzDocs.AstgNodes.push
            @ ${name}_astNode
	
	set format.${name}
		function
			param parent
			param node
			param options

            $if wzConfigIsDocumentation
                var f_astNode = ${name}_astNode

			var __isText = ${isText}

			$if ignore == false

				$if mustBeText
					set options.mustBeText = true
				$if couldBeText
					set options.couldBeText = true

				$*
                # loog 'node : ${name} ----------------------------------------- parent  ittf tag : ', parent.tag
				foreach item in Object.keys(node)
					if ['type', 'start', 'end', 'loc'].indexOf(item) < 0
						if verify.isNotEmpty(node[item])
							# loog 'property', item, node[item]
						else
							# loog 'property', item
                *$

				$if skip
					var ret = parent
				$else
					var ret
						{
							$if tagIsVar
								@ tag ${tag}
							$else
								@ tag '${tag}' 
							@ name ''
							@ isText ${isText}
							@ textified null
							@ AST '${name}' 
							@ source options.input.substring(node.start, node.end)
							[ children

				

				$hook

				if ret != null
					if __isText
						set ret.textified = ret.name

					$if isName
						set parent.name = ret.name
			
					$elif skip == false
						if typeof __skip === 'undefined' || __skip == false
							# loog '### add ', ret.tag , 'to', parent.tag
                            $* 29/3/21 start replacement
                            _ processLeadingComments(node, parent, options)
							$if retIsArray
								foreach item in ret
									_ parent.children.push(item)
							$else
								_ parent.children.push(ret)
							_ processTrailingComments(node, parent, options)
                            *$
							$if retIsArray
                                $$ TODO a comment could be lost here?
                                $$ _ assertNoComments(node)
								foreach item in ret
									_ parent.children.push(item)
							$else
                                $*
                                if node.type == 'VariableDeclaration'
                                    # loog 'node.leadingComments', node.leadingComments
                                *$
                                _ processLeadingComments(node, ret, options)
                                _ processTrailingComments(node, ret, options)
								_ parent.children.push(ret)
                            $$ 29/3/21 end replacement

				$if mustBeText
					set options.mustBeText = false
				$if couldBeText
					set options.couldBeText = false
                $*
                if node.type == 'VariableDeclaration'
                    # loog 'f.VariableDeclaration.ret', ret
                *$

