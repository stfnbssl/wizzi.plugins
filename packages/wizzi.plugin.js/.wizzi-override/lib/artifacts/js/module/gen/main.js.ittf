module wizzi.plugin.js@${wzCtx.version}.lib.artifacts.js.module.gen.main
    kind es6
    
    $include versions
    $include plugin_versions

    $
        var md = {
            plugin: 'wizzi.plugin.js',
            name: 'module',
            schema: 'js',
            rootElement: 'xmodule',
            checkSchema: true,
            isAsync: true,
        };

    gen( &md )
        $append imports
            var module_es6 = require('./es6/module')
            var statement = require('./statement')
            # VIA var wzIife = require('./wziife')
            var preprocess = require('./preprocess')
        
        $append main
            set model.kind == verify.isEmpty(model.kind) ? 'react' : model.kind
            _ preprocess.exec(model, ctx)
            
            set ctx.__jskind = model.kind
            set ctx.__ecma = model.ecma

            _ main_init
                @ model
                @ ctx

            repeater(1, model.statements)
                _ statement.gen
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment(1)
                $append next
                    _ main_close
                        @ model
                        @ ctx
                    if ctx.artifactGenerationErrors.length > 0
                        return
                            _ callback(ctx.artifactGenerationErrors)
                    else
                        r_cb( ctx )

        function main_init
            param model
            param ctx

            
            
            if model.kind === 'nodejs.bin'
                _ ctx.w('#!/usr/bin/env node')

            $$ loogmyname, 'ctx.values', ctx.values
            if (!!ctx.values.noGeneratorComments) == false
                _ ctx.w('/*')
                _ ctx.w('    artifact generator: ' + __filename)
                _ ctx.w('    package: @wizzi/plugin.js@${versions['@wizzi/plugin.js@next']}')
                _ ctx.w('    primary source IttfDocument: ' + model.wzSourceFilepath('f1'))
                $if wzConfigIsPackageDeploy == false
                    _ ctx.w('    utc time: ' + new Date().toUTCString())
                _ ctx.w('*/')
                
            _ emitResources
                @ model.resources
                @ ctx

            $if TODO $$ Stop this
                if !model.no_strict && (!!ctx.values.noUseStrict) == false
                    _ ctx.w("'use strict';")

            _ main_es6_module
                @ model
                @ ctx

            if model.hasFeature('argument-check') 
                if (!!ctx.values.isLegacy) == false
                    if (!!ctx.values.isWizziUtilsPackage) == true
                        _ ctx.w("var verify = require('wizzi-helpers').verify;")
                    else
                        _ ctx.w("var verify = require('@wizzi/utils').verify;")
            if ctx.__wzItems && ctx.__wzItems.length > 0
                _ emit_Iife_WzModule(model, ctx)

        function main_es6_module
            param model
            param ctx
            var
                decl hasClasses = model.wzModelState.hasClasses
                decl ecma = model.ecma
            # loog '==== wizzi-js.artifacts.js.main', model.wzName, model.ecma, model.wzModelState.hasClasses
            if ecma === 'es5' && hasClasses
                _ ctx.w('// generated by ' + myname)
                _ ctx.w("function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }")
                _ ctx.w("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }")
                _ ctx.w("var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };")
                _ ctx.w()

        function main_close
            param model
            param ctx
            if ctx.__wzModule && ctx.__wzModule.seen
                _ emit_top_WzModule(model, ctx)
            if model.hasFeature('argument-check') 
                _ ctx.w('/**')
                _ ctx.w('  params')
                _ ctx.w('    string code')
                _ ctx.w('      # the error name or number')
                _ ctx.w('    string method')
                _ ctx.w('    string message')
                _ ctx.w('      # optional')
                _ ctx.w('    { innerError')
                _ ctx.w('      # optional')
                _ ctx.w('*/')
                _ ctx.w('function error(code, method, message, innerError) {')
                _ ctx.w('    var parameter = null;')
                _ ctx.w('    if (verify.isObject(message)) {')
                _ ctx.w('        parameter = message.parameter;')
                _ ctx.w('        message = message.message;')
                _ ctx.w('    }')
                # _ ctx.w('    innerError = innerError || new Error(\'Error created for trace.\');')
                _ ctx.w("    return verify.error(innerError, {")
                _ ctx.w("        name: ( verify.isNumber(code) ? 'Err-' + code : code ),")
                _ ctx.w("        method: '" + model.wzName + ".' + method,") 
                _ ctx.w("        parameter: parameter,") 
                _ ctx.w("        sourcePath: __filename")
                _ ctx.w("    }, message || 'Error message unavailable');")
                _ ctx.w('}')

        function emitResources
            param requestedResources
            param ctx

            if requestedResources && requestedResources.length > 0 && ctx.values.jsResources
                var resourceRepo = ctx.values.jsResources
                _ resourceRepo.clearJsDependencies()
                foreach item in requestedResources
                    _ resourceRepo.addJsDependency(item.wzName)
                _ resourceRepo.emitJsDependencies(ctx)

        function emit_top_WzModule
            param model
            param ctx
            _ ctx.w('')
            _ ctx.w('module.exports = {')
            _ ctx.indent()
            
            var seen = false
            foreach item in ctx.__wzModule.vars
                if seen
                    _ ctx.w(',')
                var ss = item.wzName.split(' ')
                _ ctx.write(ss[0] + ': ' + ss[0])
                set seen = true;
            
            foreach item in ctx.__wzModule.consts
                if seen
                    _ ctx.w(',')
                var ss = item.wzName.split(' ')
                _ ctx.write(ss[0] + ': ' + ss[0])
                set seen = true;

            foreach item in ctx.__wzModule.functions
                if seen
                    _ ctx.w(',')
                _ ctx.write(item.wzName + ': ' + item.wzName)
                set seen = true;

            foreach item in ctx.__wzModule.classes
                if seen
                    _ ctx.w(',')
                _ ctx.write(item.wzName + ': ' + item.wzName)
                set seen = true;

            if seen
                _ ctx.w('')

            _ ctx.deindent()
            _ ctx.w('};');

        function emit_Iife_WzModule
            param model
            param ctx
            _ ctx.w('var __wz = (function() {')
            _ ctx.indent()
            _ ctx.w('var res = {};')
            foreach item in ctx.__wzItems
                foreach require in item.requires
                    var from = require.from ? require.from : require.wzName
                    _ ctx.w('res["' + require.wzName + '"] = require("' + from + '");')
            _ ctx.w('return {');
            _ ctx.w('    require: function(name) {');
            _ ctx.w('        return res[name];');
            _ ctx.w('    }');
            _ ctx.w('}');
            _ ctx.deindent()
            _ ctx.w('})();');

        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval


    # error changed in v08