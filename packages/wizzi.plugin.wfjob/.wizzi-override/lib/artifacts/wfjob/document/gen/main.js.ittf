module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.wzjob',
            name: 'document',
            schema: 'wfjob',
            checkSchema: true,
            isAsync: true,
        };
    gen( &md )
        $append imports
        $append main
            _ md.wfjob
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        async-md( wfjob )
            xml-dump-el-open( wfjob )
            xml-dump-attr( modelsBaseFolder )
            xml-dump-attr( destBaseFolder )
            xml-dump-attr( title, last )
            _md_gen_items( requires, indent )
                _md_gen_items( models, indent )
                    _md_gen_items( lines, indent )
                        _md_gen_items( productions, indent )
                            _md_gen_items( execFiles, indent )
                                _md_gen_items( comments, indent )
                                    xml-dump-el-close( wfjob )
                                    r_cb()

        async-md( require )
            xml-dump-el-open( require )
            _ ctx.w('>')
            xml-dump-el-close( require )
            r_cb()

        async-md( model )
            xml-dump-el-open( model )
            xml-dump-attr( src )
            xml-dump-attr( schema )
            xml-dump-attr( format )
            xml-dump-attr( dumpFile )
            xml-dump-attr( exportName, last )
            _md_gen_items( modelRefs, indent )
                _md_gen_items( comments, indent )
                    xml-dump-el-close( model )
                    r_cb()
        
        async-md( modelRef )
            xml-dump-el-open( modelRef )
            xml-dump-attr( exportName, last )
            _md_gen_items( transformers, indent )
                _md_gen_items( modelCollections, indent )
                    _md_gen_items( comments, indent )
                        xml-dump-el-close( modelRef )
                        r_cb()
        
        async-md( modelCollection )
            xml-dump-el-open( modelCollection )
            xml-dump-attr( itemName, last )
            _md_gen_items( pathTemplateValues, indent )
                _md_gen_items( comments, indent )
                    xml-dump-el-close( modelCollection )
                    r_cb()

        async-md( pathTemplateValue )
            xml-dump-el-open( pathTemplateValue )
            xml-dump-attr( attribute )
            xml-dump-attr( function )
            xml-dump-attr( token, last )
            _md_gen_items( comments, indent )
                xml-dump-el-close( pathTemplateValue )
                r_cb()

        async-md( comment )
            xml-dump-el-open( comment )
            _ ctx.w('>')
            xml-dump-el-close( comment )
            r_cb()
        
        async-md( line )
            xml-dump-el-open( line )
            xml-dump-attr( cwdFolder )
            xml-dump-attr( destFolder, last )
            _md_gen_items( artifacts, indent )
                _md_gen_items( comments, indent )
                    xml-dump-el-close( line )
                    r_cb()

        async-md( artifact )
            xml-dump-el-open( artifact )
            xml-dump-attr( src )
            xml-dump-attr( ignore )
            xml-dump-attr( schema )
            xml-dump-attr( format )
            xml-dump-attr( isCompile )
            xml-dump-attr( isWfJob )
            xml-dump-attr( isWfModelType )
            xml-dump-attr( generator )
            xml-dump-attr( destPath )
            xml-dump-attr( extension )
            xml-dump-attr( collection )
            xml-dump-attr( noOutput )
            xml-dump-attr( noOutput, last )
            _md_gen_items( transformers, indent )
                _md_gen_items( modelRefs, indent )
                    _md_gen_items( comments, indent )
                        xml-dump-el-close( artifact )
                        r_cb()

        async-md( transformer )
            xml-dump-el-open( transformer )
            xml-dump-attr( type, last )
            xml-dump-el-close( transformer )
            r_cb()

        async-md( production )
            xml-dump-el-open( production )
            xml-dump-attr( destFolder, last )
            _md_gen_items( lineRefs, indent )
                _md_gen_items( modelRefs, indent )
                    _md_gen_items( comments, indent )
                        xml-dump-el-close( production )
                        r_cb()

        async-md( lineRef )
            xml-dump-el-open( lineRef )
            _md_gen_items( comments, indent )
                xml-dump-el-close( lineRef )
                r_cb()

        async-md( env )
            xml-dump-el-open( env )
            xml-dump-attr( __name )
            xml-dump-attr( __value )
            xml-dump-attr( type, last )
            xml-dump-el-close( env )
            r_cb()

        async-md( arg )
            xml-dump-el-open( arg )
            xml-dump-attr( __name )
            xml-dump-attr( __value )
            xml-dump-attr( type, last )
            xml-dump-el-close( arg )
            r_cb()

        async-md( execFile )
            xml-dump-el-open( execFile )
            xml-dump-attr( exePath )
            xml-dump-attr( title )
            xml-dump-attr( cwd )
            xml-dump-attr( encoding )
            xml-dump-attr( timeout, last )
            xml-dump-el-open( options )
            xml-dump-attr( cwd )
            xml-dump-attr( encoding )
            xml-dump-attr( timeout, last )
            xml-dump-el-close( options )
            _md_gen_items( args, indent )
                _md_gen_items( env, indent )
                    _md_gen_items( comments, indent )
                        xml-dump-el-close( execFile )
                        r_cb()

        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval
