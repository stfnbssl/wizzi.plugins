module wizzi.plugin.java.lib.artifacts.module.gen.writers.types
    kind es6

    statements-writer(types)

        $append imports

        statement( typeNumber
            _ ctx.write('number')
            r_cb()
        
        statement( typeString
            _ ctx.write('string')
            r_cb()
        
        statement( typeBoolean
            _ ctx.write('boolean')
            r_cb()
        
        statement( typeAny
            _ ctx.write('any')
            r_cb()
        
        statement( typeArray
            # loog 'typeArray model.statements.length', model.statements.length
            if model.statements.length == 1
                var item = model.statements[0]
                # loog 'typeArray item.wzElement', item.wzElement
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    a_cb()
                        _ ctx.write('[]')
                        # loog 'typeArray item.wzElement exit', item.wzElement
                        r_cb()
            else
                # TODO
                _ ctx.write('MISSING[]')
                r_cb()
        
        statement( typeObject
            _ ctx.write('object')
            r_cb()

        statement( typeObjectLiteral
            var model = writeComments(model, ctx)
            _ ctx.w('{ ')
            _ ctx.indent
            repeater( 1, model.statements )
                if index_1 > 0
                    $$ loog0
                    # (19/1/21 It seems are separated by ';') _ ctx.write(', ')
                # loog 'typeObjectLiteral.item_1.wzElement', item_1.wzElement, item_1.wzName
                _ mainWriter.genItem
                    @ item_1
                    @ ctx
                    a_cb()
                        $$ loog1
                        repeater_increment( 1 )
                $append next
                    _ ctx.deindent
                    # 21/3/2021 _ ctx.w('} ')
                    _ ctx.write('}')
                    $$ loog2
                    r_cb()
        
        statement( typeVoid
            _ ctx.write('void')
            r_cb()
        
        statement( typeNull
            _ ctx.write('null')
            r_cb()
        
        statement( typeUndefined
            _ ctx.write('undefined')
            r_cb()

        statement( typeUnknown
            _ ctx.write('unknown')
            r_cb()

        statement( typeNever
            _ ctx.write('never')
            r_cb()

        statement( typeTypeof
            _ ctx.write('typeof ' + model.wzName)
            r_cb()

        statement( typeReference, kind
            $*
            # loog 'typeReference', model.wzName
            # loog 'model.statements.length', model.statements.length
            # loog 'model.typeParameterInsts.length', model.statements.length
            *$
            # loog 'typeReference.model', model
            var model = writeComments(model, ctx)
            if model.statements.length == 1
                _ ctx.write('<' + model.wzName + '>')
                var item = model.statements[0]
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    @ callback
            elif kind === 'typeParameterDecl'
                _ ctx.write(' extends ' + model.wzName)
                r_cb()
            else
                _ ctx.write(model.wzName)
                if model.typeParameterInsts.length > 0
                    var graphs = false
                    foreach item in model.typeParameterInsts
                        if item.statements.length == 1 && item.statements[0].wzElement == 'typeMapped'
                            set graphs = true
                    $$ 19/3/21 added {}, waiting for damage
                    _ ctx.write('<' + (graphs ? '{' : ''))
                    repeater( 1, model.typeParameterInsts )
                        if index_1 > 0 
                            _ ctx.write(', ')
                        if !mainWriter.statementsContainer[item_1.wzElement]
                            error 'ts.module.gen.item.wzElement not managed', item_1.wzElement
                        _ mainWriter.statementsContainer[item_1.wzElement]
                            @ item_1
                            @ ctx
                            a_cb()
                                repeater_increment( 1 )
                        $append next
                            _ ctx.write((graphs ? '}' : '') + '>')
                            r_cb()
                else
                    r_cb()

        statement( typeParameterInst
            if model.statements.length == 0
                _ ctx.write(model.wzName)
                r_cb()
            elif model.statements.length == 1
                var item = model.statements[0]
                # loog 'typeParameterInst,item.wzElement', item.wzElement
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    @ callback
            else
                return
                    _ callback
                        _ ctx.error(':param typeParameterInst not managed. children: ' + model.statements.length, model)

        statement( typeConditional
            var model = writeComments(model, ctx)
            var item = model.typeCheck.statements[0]
            if !mainWriter.statementsContainer[item.wzElement]
                error 'ts.module.gen.typeConditional.wzElement not managed', item.wzElement
            _ mainWriter.statementsContainer[item.wzElement]
                @ item
                @ ctx
                a_cb()
                    _ ctx.write(' extends ')
                    var item = model.typeExtends.statements[0]
                    if !mainWriter.statementsContainer[item.wzElement]
                        error 'ts.module.gen.typeExtends.wzElement not managed', item.wzElement
                    _ mainWriter.statementsContainer[item.wzElement]
                        @ item
                        @ ctx
                        a_cb()
                            _ ctx.write(' ? ')
                            var item = model.typeThen.statements[0]
                            if !mainWriter.statementsContainer[item.wzElement]
                                error 'ts.module.gen.typeThen.wzElement not managed', item.wzElement
                            _ mainWriter.statementsContainer[item.wzElement]
                                @ item
                                @ ctx
                                a_cb()
                                    _ ctx.write(' : ')
                                    var item = model.typeElse.statements[0]
                                    if !mainWriter.statementsContainer[item.wzElement]
                                        error 'ts.module.gen.typeElse.wzElement not managed', item.wzElement
                                    _ mainWriter.statementsContainer[item.wzElement]
                                        @ item
                                        @ ctx
                                        @ callback

        statement( typeInfer
            _ ctx.write(' infer ')
            var item = model.statements[0]
            if !mainWriter.statementsContainer[item.wzElement]
                error 'ts.module.gen.typeThen.wzElement not managed', item.wzElement
            _ mainWriter.statementsContainer[item.wzElement]
                @ item
                @ ctx
                @ callback

        statement( typeParenthesized
            _ ctx.write('(')
            if model.statements.length == 1
                var item = model.statements[0]
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    a_cb()
                        _ ctx.write(')')
                        r_cb()
            else
                return
                    _ callback
                        _ ctx.error(':paren typeParenthesized not managed. children: ' + model.statements.length, model)

        statement( typeTuple
            _ ctx.write('[')
            repeater( 1, model.statements )
                if index_1 > 0
                    _ ctx.write(' , ')
                # loog 'typeTuple.item_1.wzElement', item_1.wzElement, item_1.wzName
                _ mainWriter.genItem
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment( 1 )
                $append next
                    _ ctx.write(']')
                    r_cb()

        statement( typeEnum
            var model = writeComments(model, ctx)
            _ ctx.w('enum ' + model.wzName + ' {')
            _ ctx.indent
            repeater( 1, model.statements )
                if index_1 > 0
                    _ ctx.w(' , ')
                # loog 'typeEnum.item_1.wzElement', item_1.wzElement, item_1.wzName
                _ mainWriter.genItem
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment( 1 )
                $append next
                    _ ctx.deindent
                    _ ctx.w()
                    _ ctx.w('}')
                    r_cb()

        statement( typeReturn
            if model.statements.length == 0
                _ ctx.write(model.wzName + ' ')
                r_cb()
            elif model.statements.length == 1
                var item = model.statements[0]
                _ ctx.write(' ')
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    @ callback
            else
                return
                    _ callback
                        _ ctx.error(':{ typeReturn must have zero or one children. found: ' + model.statements.length, model)

        statement( typeInitValue
            if model.wzName && model.wzName.length > 0 
                _ ctx.write(model.wzName)
                r_cb()
            elif model.statements.length == 1
                _ mainWriter.genItem
                    @ model.statements[0]
                    @ ctx
                    @ callback
            elif model.statements.length > 1
                _ mainWriter.genItems
                    @ model.statements
                    @ ctx
                    @ callback
            else
                return
                    _ callback
                        _ ctx.error(':{ typeReturn must have wzName or children. found: ' + model.statements.length, model)

        statement( typeKeyOf, kind
            if kind === 'mapped'
                _ ctx.write(' in ')
            _ ctx.write(' keyof ')
            repeater( 1, model.statements )
                if index_1 > 0
                    _ ctx.write(' , ')
                # loog 'typeKeyOf.item_1.wzElement', item_1.wzElement, item_1.wzName
                _ mainWriter.genItem
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment( 1 )
                $append next
                    r_cb()

        statement( typeParameterDecl, kind
            var atype
                _ u.extractTSSimpleType
                    @ model
            if atype
                _ ctx.write(model.wzName)
                if kind == 'mapped'
                    _ ctx.write(' in ')
                else
                    _ ctx.write(' extends ')
                if !mainWriter.statementsContainer[atype.wzElement]
                    error 'ts.module.gen.typeParameterDecl.item.wzElement not managed', atype.wzElement
                _ mainWriter.statementsContainer[atype.wzElement]
                    @ atype
                    @ ctx
                    @ callback
            else
                _ ctx.write(model.wzName)
                r_cb()

        statement( typeUnion
            repeater( 1, model.statements )
                if index_1 > 0
                    _ ctx.write(' | ')
                # loog 'typeUnion.item_1.wzElement', item_1.wzElement, item_1.wzName
                _ mainWriter.genItem
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment( 1 )
                $append next
                    r_cb()

        statement( typeIntersect
            repeater( 1, model.statements )
                if index_1 > 0
                    _ ctx.write(' & ')
                # loog 'typeIntersect.item_1.wzElement', item_1.wzElement, item_1.wzName
                _ mainWriter.genItem
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment( 1 )
                $append next
                    r_cb()

        
        statement( typeNotNull
            _ ctx.write( model.wzName || '')
            if model.statements.length == 0
                _ ctx.write('!')
                r_cb()
            else
                _ mainWriter.genItems
                    @ model.statements
                    @ ctx
                    a_cb()
                        _ ctx.write('!')
                        r_cb()

        statement( typePredicate
            if model.statements.length == 1
                _ ctx.write(model.wzName + ' is ')
                var item = model.statements[0]
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    @ callback
            else
                return
                    _ callback
                        _ ctx.error(':predicate typePredicate must have one children. found: ' + model.statements.length, model)

        statement( typeIndexedAccess
            if model.statements.length == 2
                var item = model.statements[0]
                var gr = u.indexedTSNeedsGraphs(item)
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                if gr
                    _ ctx.write('{')
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    a_cb()
                        if gr
                            _ ctx.write('}')
                        _ ctx.write('[')
                        var item = model.statements[1]
                        if !mainWriter.statementsContainer[item.wzElement]
                            error 'ts.module.gen.item.wzElement not managed', item.wzElement
                        _ mainWriter.statementsContainer[item.wzElement]
                            @ item
                            @ ctx
                            a_cb()
                                _ ctx.write(']')
                                r_cb()
            else
                return
                    _ callback
                        _ ctx.error(':mapped typeMapped must have two children. found: ' + model.statements.length, model)

        statement( typeIndex
            var atype
                _ u.extractTSSimpleType
                    @ model
            _ u.genAccessorsAndExtra
                @ model
                @ ctx
            _ ctx.write('[')
            _ u.genTSParams
                @ model
                @ ctx
                @ mainWriter
                a_cb()
                    # loog '11'
                    _ ctx.write(']')
                    if atype
                        _ ctx.write(': ')
                        if !mainWriter.statementsContainer[atype.wzElement]
                            error 'ts.module.gen.typeIndex.item.wzElement not managed', atype.wzElement
                        _ mainWriter.statementsContainer[atype.wzElement]
                            @ atype
                            @ ctx
                            a_cb()
                                _ ctx.w(';')
                                r_cb()
                    else
                        r_cb()

        statement( typeAs
            var model = writeComments(model, ctx)
            # loog 'typeAs.model.statements 1', model.statements
            var atype
                _ u.extractTSSimpleType
                    @ model
            # loog 'typeAs atype', atype
            # loog 'typeAs.model.statements 2', model.statements
            _ ctx.setLastNotEmptyLine
            _ ctx.write(' as ')
            if atype
                if !mainWriter.statementsContainer[atype.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', atype.wzElement
                _ mainWriter.statementsContainer[atype.wzElement]
                    @ atype
                    @ ctx
                    @ callback
            else
                _ mainWriter.genItems
                    @ model.statements
                    @ ctx
                    @ callback
                $*
                return
                    _ callback
                        _ ctx.error('typeAs must have a type.', model)
                *$

        statement( typeLiteral
            _ ctx.write(model.wzName)
            r_cb()

        statement( typeMapped
            var model = writeComments(model, ctx)
            if model.statements.length == 2
                var item = model.statements[0]
                # loog 'ts.module.gen.typeMapped', item.wzElement
                if !mainWriter.statementsContainer[item.wzElement]
                    error 'ts.module.gen.item.wzElement not managed', item.wzElement
                _ ctx.write('[')
                _ mainWriter.statementsContainer[item.wzElement]
                    @ item
                    @ ctx
                    @ 'mapped'
                    a_cb()
                        _ ctx.write(']')
                        _ ctx.write(' : ')
                        var item = model.statements[1]
                        if !mainWriter.statementsContainer[item.wzElement]
                            error 'ts.module.gen.item.wzElement not managed', item.wzElement
                        _ mainWriter.statementsContainer[item.wzElement]
                            @ item
                            @ ctx
                            @ callback
            else
                return
                    _ callback
                        _ ctx.error(':mapped typeMapped must have two children. found: ' + model.statements.length, model)

        statement( typeArrowFunction
            var model = writeComments(model, ctx)    
            var atype
                _ u.extractTSSimpleType
                    @ model
            _ u.genTSTypeParameters
                @ model
                @ ctx
                @ mainWriter
                a_cb()
                    _ ctx.write('(')
                    _ u.genTSParams
                        @ model
                        @ ctx
                        @ mainWriter
                        a_cb()
                            _ ctx.write(')')
                            if model.typeReturn
                                _ ctx.write(': ')
                                _ mainWriter.statementsContainer.typeReturn
                                    @ model.typeReturn
                                    @ ctx
                                    a_cb()
                                        _ typeArrowFunction_close
                                            @ model
                                            @ ctx
                                            @ atype
                                            @ callback
                            else
                                _ typeArrowFunction_close
                                    @ model
                                    @ ctx
                                    @ atype
                                    @ callback

        function( typeArrowFunction_close, atype
            _ ctx.write(' => ')
            if atype
                if !mainWriter.statementsContainer[atype.wzElement]
                    error 'ts.module.gen.typeIndex.item.wzElement not managed', atype.wzElement
                _ mainWriter.statementsContainer[atype.wzElement]
                    @ atype
                    @ ctx
                    a_cb()
                        _ mainWriter.genItems
                            @ model.statements
                            @ ctx
                            @ callback
            else
                _ mainWriter.genItems
                    @ model.statements
                    @ ctx
                    @ callback

        statement( typeExportAssignment
            var model = writeComments(model, ctx)
            _ ctx.w('export = ' + model.wzName + ';')
            r_cb()

        statement( typeImport
            var model = writeComments(model, ctx)
            var name = model.wzName || ''
            if model.xas
                if name.length > 0
                    set name += ', '
                set name += '* as ' + model.xas
            _ ctx.write("import type " + name)
            if model.specifiers.length > 0
                if name.length > 0
                    _ ctx.write(', ')
                _ ctx.write('{')
                foreach item in model.specifiers
                    if i > 0
                        _ ctx.write(', ')
                    _ ctx.write(item.wzName)
                    if item.xas
                        _ ctx.write(' as ' + item.xas)
                _ ctx.write('}')
                _ ctx.write(' from ' + model.from)
            else
                if model.from && model.from.length > 0
                    if name.trim().length > 0
                        _ ctx.write(' from')
                    _ ctx.write(' ' + model.from)
            _ ctx.w(u.semicolon(name))
            r_cb()

        statement( typeImportEqualsDeclaration
            var model = writeComments(model, ctx)
            _ ctx.write('import ' + model.wzName + ' = ')
            if model.statements.length == 1
                _ ctx.w('require( ' + model.statements[0].wzName + ');')
                r_cb()
            else
                return
                    _ callback
                        _ ctx.error(':import typeImportEqualsDeclaration must have one children. found: ' + model.statements.length, model)

        statement( typeNamespaceExportDeclaration
            _ ctx.w('export as namespace ' + model.wzName + ';')
            r_cb()

        statement( typeCTorDeclare
            var model = writeComments(model, ctx)
            var atype
                _ u.extractTSSimpleType
                    @ model
            _ ctx.write('(')
            _ u.genTSParams
                @ model
                @ ctx
                @ mainWriter
                a_cb()
                    _ ctx.write(')')
                    if atype
                        _ ctx.write(': ')
                        if !mainWriter.statementsContainer[atype.wzElement]
                            error 'ts.module.gen.typeIndex.item.wzElement not managed', atype.wzElement
                        _ mainWriter.statementsContainer[atype.wzElement]
                            @ atype
                            @ ctx
                            a_cb()
                                _ ctx.w(';')
                                r_cb()
                    else
                        _ ctx.w(';')
                        r_cb()

        statement( typeCTor
            _ ctx.w('*** :ctor ' + model.wzName + ';')
            r_cb()

        statement( typeConditional
            var model = writeComments(model, ctx)

            if !model.typeCheck || model.typeCheck.statements.length < 1
                return
                    _ callback
                        _ ctx.error('ts.modeule.typeConditional missing typeCheck element', model)
            
            if !model.typeThen || model.typeThen.statements.length < 1
                return
                    _ callback
                        _ ctx.error('ts.modeule.typeConditional missing typeThen element', model)
            
            if !model.typeElse || model.typeElse.statements.length < 1
                return
                    _ callback
                        _ ctx.error('ts.modeule.typeConditional missing typeElse element', model)

            var item = model.typeCheck.statements[0]
            _ mainWriter.statementsContainer[item.wzElement]
                @ item
                @ ctx
                a_cb()
                    _ typeConditional_extends
                        @ model
                        @ ctx
                        a_cb()
                            _ ctx.write(' ? ')
                            set item = model.typeThen.statements[0]
                            _ mainWriter.statementsContainer[item.wzElement]
                                @ item
                                @ ctx
                                a_cb()
                                    _ ctx.write(' : ')
                                    set item = model.typeElse.statements[0]
                                    _ mainWriter.statementsContainer[item.wzElement]
                                        @ item
                                        @ ctx
                                        @ callback

	function( typeConditional_extends )
		if model.typeExtends
			_ ctx.write(' extends ')
			var item = model.typeExtends.statements[0]
			_ mainWriter.statementsContainer[item.wzElement]
				@ item
				@ ctx
				@ callback
		else
			r_cb()

	$include doCallMembers_call