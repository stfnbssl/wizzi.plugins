/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi\node_modules\wizzi-legacy-v5\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\stfnbssl\wizzi\packages\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Sun, 05 Mar 2023 13:12:11 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
var _md = module.exports = {};
var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var javaBase = (function () {
    function javaBase(name, sourceLineInfo) {
        _classCallCheck(this, javaBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    javaBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    javaBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    javaBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
            }, true);
    }
    javaBase.prototype.wzVerify = function() {
    }
    javaBase.prototype.wzInitialize = function() {
    }
    javaBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    javaBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    javaBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    javaBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    javaBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    javaBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    javaBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    javaBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    javaBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    javaBase.prototype.error = function(message, node) {
        throw new _md.javaModelException(message, node, this);
    }
    return javaBase;
})();

_md.javaBase = javaBase;
/**
    element statement
     A statement line node with unlimited depth.
     Is the schema base node.
     In itself works as a comment line.
*/
var statement = (function (javaBase) {
    _inherits(statement, javaBase);
    function statement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(statement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, statement);
        this.wzElement = "statement";
        // relation statement
        this.statements = [];
    }
    statement.prototype.addStatement = function(name, sourceLineInfo) {
        var retval = new _md.statement(name, sourceLineInfo);
        retval.wzParent = this;
        this.statements.push(retval);
        return retval;
    }
    statement.prototype.getStatement = function(name) {
        var found = null;
        this.statements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    statement.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.statement, this.statements);
        }
        if (name === 'm') {
            return this.wzLoadToChildColl(child, _md.method, this.statements);
        }
        if (name === 'p') {
            return this.wzLoadToChildColl(child, _md.p, this.statements);
        }
        if (name === '{') {
            return this.wzLoadToChildColl(child, _md.objectParam, this.statements);
        }
        if (name === ':[') {
            return this.wzLoadToChildColl(child, _md.typeArray, this.statements);
        }
        else if (name === ':{') {
            return this.wzLoadToChildColl(child, _md.typeObjectLiteral, this.statements);
        }
        else if (name === ':@') {
            return this.wzLoadToChildColl(child, _md.typeObjectValue, this.statements);
        }
        else if (name === ':=') {
            return this.wzLoadToChildColl(child, _md.typeInitValue, this.statements);
        }
        else if (name === ':<') {
            return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.statements);
        }
        else if (name === ':!') {
            return this.wzLoadToChildColl(child, _md.typeNotNull, this.statements);
        }
        if (name === ':=>') {
            return this.wzLoadToChildColl(child, _md.typeArrowFunction, this.statements);
        }
        else if (name === ':as') {
            return this.wzLoadToChildColl(child, _md.typeAs, this.statements);
        }
        else if (name === ':[]') {
            return this.wzLoadToChildColl(child, _md.typeIndexedAccess, this.statements);
        }
        if (name === 'new') {
            return this.wzLoadToChildColl(child, _md.xnew, this.statements);
        }
        if (name === ':any') {
            return this.wzLoadToChildColl(child, _md.typeAny, this.statements);
        }
        else if (name === ':ref') {
            return this.wzLoadToChildColl(child, _md.typeReference, this.statements);
        }
        else if (name === ':new') {
            return this.wzLoadToChildColl(child, _md.typeCTorDeclare, this.statements);
        }
        else if (name === ':iif') {
            return this.wzLoadToChildColl(child, _md.typeConditional, this.statements);
        }
        if (name === 'base') {
            return this.wzLoadToChildColl(child, _md.base, this.statements);
        }
        if (name === 'ctor') {
            return this.wzLoadToChildColl(child, _md.ctor, this.statements);
        }
        if (name === 'java') {
            return this.wzLoadToChildColl(child, _md.java, this.statements);
        }
        if (name === ':void') {
            return this.wzLoadToChildColl(child, _md.typeVoid, this.statements);
        }
        else if (name === ':null') {
            return this.wzLoadToChildColl(child, _md.typeNull, this.statements);
        }
        else if (name === ':enum') {
            return this.wzLoadToChildColl(child, _md.typeEnum, this.statements);
        }
        else if (name === ':call') {
            return this.wzLoadToChildColl(child, _md.typeCallSignature, this.statements);
        }
        else if (name === ':ctor') {
            return this.wzLoadToChildColl(child, _md.typeCTor, this.statements);
        }
        else if (name === ':then') {
            return this.wzLoadToChildColl(child, _md.typeThen, this.statements);
        }
        else if (name === ':else') {
            return this.wzLoadToChildColl(child, _md.typeElse, this.statements);
        }
        if (name === 'await') {
            return this.wzLoadToChildColl(child, _md.xawait, this.statements);
        }
        if (name === 'class') {
            return this.wzLoadToChildColl(child, _md.xclass, this.statements);
        }
        if (name === 'param') {
            return this.wzLoadToChildColl(child, _md.param, this.statements);
        }
        if (name === 'super') {
            return this.wzLoadToChildColl(child, _md.superType, this.statements);
        }
        if (name === 'yield') {
            return this.wzLoadToChildColl(child, _md.xyield, this.statements);
        }
        if (name === ':never') {
            return this.wzLoadToChildColl(child, _md.typeNever, this.statements);
        }
        else if (name === ':tuple') {
            return this.wzLoadToChildColl(child, _md.typeTuple, this.statements);
        }
        else if (name === ':union') {
            return this.wzLoadToChildColl(child, _md.typeUnion, this.statements);
        }
        else if (name === ':keyof') {
            return this.wzLoadToChildColl(child, _md.typeKeyOf, this.statements);
        }
        else if (name === ':index') {
            return this.wzLoadToChildColl(child, _md.typeIndex, this.statements);
        }
        else if (name === ':check') {
            return this.wzLoadToChildColl(child, _md.typeCheck, this.statements);
        }
        else if (name === ':paren') {
            return this.wzLoadToChildColl(child, _md.typeParenthesized, this.statements);
        }
        else if (name === ':infer') {
            return this.wzLoadToChildColl(child, _md.typeInfer, this.statements);
        }
        else if (name === ':param') {
            return this.wzLoadToChildColl(child, _md.typeParameterInst, this.statements);
        }
        if (name === 'return') {
            return this.wzLoadToChildColl(child, _md.xreturn, this.statements);
        }
        if (name === ':number') {
            return this.wzLoadToChildColl(child, _md.typeNumber, this.statements);
        }
        else if (name === ':string') {
            return this.wzLoadToChildColl(child, _md.typeString, this.statements);
        }
        else if (name === ':object') {
            return this.wzLoadToChildColl(child, _md.typeObject, this.statements);
        }
        else if (name === ':typeof') {
            return this.wzLoadToChildColl(child, _md.typeTypeof, this.statements);
        }
        else if (name === ':return') {
            return this.wzLoadToChildColl(child, _md.typeReturn, this.statements);
        }
        else if (name === ':export') {
            return this.wzLoadToChildColl(child, _md.typeExportAssignment, this.statements);
        }
        if (name === ':boolean') {
            return this.wzLoadToChildColl(child, _md.typeBoolean, this.statements);
        }
        else if (name === ':unknown') {
            return this.wzLoadToChildColl(child, _md.typeUnknown, this.statements);
        }
        else if (name === ':literal') {
            return this.wzLoadToChildColl(child, _md.typeLiteral, this.statements);
        }
        else if (name === ':require') {
            return this.wzLoadToChildColl(child, _md.typeRequire, this.statements);
        }
        else if (name === ':import=') {
            return this.wzLoadToChildColl(child, _md.typeImportEqualsDeclaration, this.statements);
        }
        else if (name === ':require') {
            return this.wzLoadToChildColl(child, _md.typeExternalModuleReference, this.statements);
        }
        if (name === 'codeline') {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        if (name === 'function') {
            return this.wzLoadToChildColl(child, _md.xfunction, this.statements);
        }
        if (name === ':exportns') {
            return this.wzLoadToChildColl(child, _md.typeExportNamespace, this.statements);
        }
        else if (name === ':exportns') {
            return this.wzLoadToChildColl(child, _md.typeNamespaceExportDeclaration, this.statements);
        }
        if (name === 'function*') {
            return this.wzLoadToChildColl(child, _md.generatorfunction, this.statements);
        }
        if (name === ':undefined') {
            return this.wzLoadToChildColl(child, _md.typeUndefined, this.statements);
        }
        else if (name === ':intersect') {
            return this.wzLoadToChildColl(child, _md.typeIntersect, this.statements);
        }
        else if (name === ':predicate') {
            return this.wzLoadToChildColl(child, _md.typePredicate, this.statements);
        }
        else if (name === ':export-ns') {
            return this.wzLoadToChildColl(child, _md.typeExportNamespace, this.statements);
        }
        else if (name === ':export-ns') {
            return this.wzLoadToChildColl(child, _md.typeNamespaceExportDeclaration, this.statements);
        }
        if (name === ':exporttype') {
            return this.wzLoadToChildColl(child, _md.typeExport, this.statements);
        }
        else if (name === ':importtype') {
            return this.wzLoadToChildColl(child, _md.typeImport, this.statements);
        }
        if (name === ':export-type') {
            return this.wzLoadToChildColl(child, _md.typeExport, this.statements);
        }
        else if (name === ':import-type') {
            return this.wzLoadToChildColl(child, _md.typeImport, this.statements);
        }
        if (name === 'asyncfunction') {
            return this.wzLoadToChildColl(child, _md.asyncfunction, this.statements);
        }
        if (name === 'async-function') {
            return this.wzLoadToChildColl(child, _md.asyncfunction, this.statements);
        }
        return false;
    }
    statement.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    statement.prototype.wzVerify = function(ctx) {
        this.statements.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.javaBase.prototype.wzVerify.call(this, ctx);
    }
    statement.prototype.wzInitialize = function(ctx) {
        this.statements.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.javaBase.prototype.wzInitialize.call(this, ctx);
    }
    return statement;
})(javaBase);

_md.statement = statement;
// element codeline
var codeline = (function (statement) {
    _inherits(codeline, statement);
    function codeline(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(codeline.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, codeline);
        this.wzElement = "codeline";
    }
    return codeline;
})(statement);

_md.codeline = codeline;
// element java
var java = (function (statement) {
    _inherits(java, statement);
    function java(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(java.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, java);
        this.wzElement = "java";
    }
    java.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        ok = _md.statement.prototype.loadChild.call(this, child);
        if (!ok) {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        return ok;
    }
    java.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    return java;
})(statement);

_md.java = java;
// element param
var param = (function (statement) {
    _inherits(param, statement);
    function param(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(param.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, param);
        this.wzElement = "param";
        this.typeReadonly = false;
        this.typeOptional = false;
        this.typePrivate = false;
        this.typePublic = false;
        this.typeProtected = false;
    }
    param.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === ':public') {
            this.typePublic = parseboolean(child.v, true, child); return true;
        }
        if (name === ':private') {
            this.typePrivate = parseboolean(child.v, true, child); return true;
        }
        if (name === ':readonly') {
            this.typeReadonly = parseboolean(child.v, true, child); return true;
        }
        else if (name === ':optional') {
            this.typeOptional = parseboolean(child.v, true, child); return true;
        }
        if (name === ':protected') {
            this.typeProtected = parseboolean(child.v, true, child); return true;
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    param.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    return param;
})(statement);

_md.param = param;
// element objectParam
var objectParam = (function (param) {
    _inherits(objectParam, param);
    function objectParam(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(objectParam.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, objectParam);
        this.wzElement = "objectParam";
    }
    return objectParam;
})(param);

_md.objectParam = objectParam;
// element xfunction
var xfunction = (function (statement) {
    _inherits(xfunction, statement);
    function xfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xfunction);
        this.wzElement = "xfunction";
        this.xasync = false;
        this.generator = false;
        // relation typeParameterDecl
        this.typeParameterDecls = [];
        // relation param
        this.params = [];
        // relation typeReturn
        this.typeReturn = null;
    }
    xfunction.prototype.addTypeParameterDecl = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterDecl(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterDecls.push(retval);
        return retval;
    }
    xfunction.prototype.getTypeParameterDecl = function(name) {
        var found = null;
        this.typeParameterDecls.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xfunction.prototype.addParam = function(name, sourceLineInfo) {
        var retval = new _md.param(name, sourceLineInfo);
        retval.wzParent = this;
        this.params.push(retval);
        return retval;
    }
    xfunction.prototype.getParam = function(name) {
        var found = null;
        this.params.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xfunction.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadToChildColl(child, _md.objectParam, this.params);
        }
        if (name === ':<') {
            return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.typeParameterDecls);
        }
        if (name === 'async') {
            this.xasync = parseboolean(child.v, true, child); return true;
        }
        if (name === 'param') {
            return this.wzLoadToChildColl(child, _md.param, this.params);
        }
        if (name === ':return') {
            return this.wzLoadOneToOne(child, _md.typeReturn, 'typeReturn');
        }
        if (name === 'generator') {
            this.generator = parseboolean(child.v, true, child); return true;
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    xfunction.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    xfunction.prototype.wzVerify = function(ctx) {
        this.typeParameterDecls.forEach((item) => {
            item.wzVerify(ctx);
        });
        this.params.forEach((item) => {
            item.wzVerify(ctx);
        });
        if (this.typeReturn != null) {
            this.typeReturn.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    xfunction.prototype.wzInitialize = function(ctx) {
        this.typeParameterDecls.forEach((item) => {
            item.wzInitialize(ctx);
        });
        this.params.forEach((item) => {
            item.wzInitialize(ctx);
        });
        if (this.typeReturn != null) {
            this.typeReturn.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return xfunction;
})(statement);

_md.xfunction = xfunction;
/**
    element generatorfunction
     es6 feature
     reference https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/yield
     ittf
     function* foo
     var index = 0
     while index <= 2
     yield index++
    
*/
var generatorfunction = (function (xfunction) {
    _inherits(generatorfunction, xfunction);
    function generatorfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(generatorfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, generatorfunction);
        this.wzElement = "generatorfunction";
    }
    return generatorfunction;
})(xfunction);

_md.generatorfunction = generatorfunction;
/**
    element asyncfunction
     es6 feature
     reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function
     ittf
     async-function foo
*/
var asyncfunction = (function (xfunction) {
    _inherits(asyncfunction, xfunction);
    function asyncfunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(asyncfunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, asyncfunction);
        this.wzElement = "asyncfunction";
    }
    return asyncfunction;
})(xfunction);

_md.asyncfunction = asyncfunction;
/**
    element xyield
     es6 feature
     reference https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/yield
     ittf
     function* foo
     var index = 0
     while index <= 2
     yield index++
*/
var xyield = (function (statement) {
    _inherits(xyield, statement);
    function xyield(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xyield.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xyield);
        this.wzElement = "xyield";
    }
    return xyield;
})(statement);

_md.xyield = xyield;
/**
    element xawait
     es6 feature
     reference https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await
     ittf
     async-function foo
     var index
     await
     _ mypromisefunc
    
*/
var xawait = (function (statement) {
    _inherits(xawait, statement);
    function xawait(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xawait.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xawait);
        this.wzElement = "xawait";
    }
    return xawait;
})(statement);

_md.xawait = xawait;
/**
    element xreturn
     Can return any object or function.
    
     ittf
     return 0
     return
     {
     @ result a + b
    
     return
     _ Math.sum
     @ a
     @ b
    
     return
     function
     param a
     param b
     ...
*/
var xreturn = (function (statement) {
    _inherits(xreturn, statement);
    function xreturn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xreturn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xreturn);
        this.wzElement = "xreturn";
    }
    return xreturn;
})(statement);

_md.xreturn = xreturn;
// element xclass
var xclass = (function (statement) {
    _inherits(xclass, statement);
    function xclass(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xclass.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xclass);
        this.wzElement = "xclass";
        this.public = false;
        this.protected = false;
        this.private = false;
        this.static = false;
        this.abstract = false;
        this.final = false;
        this.native = false;
        this.synchronized = false;
        this.transient = false;
        this.volatile = false;
        this.strictfp = false;
        // relation typeParameterDecl
        this.typeParameterDecls = [];
        // relation superType
        this.superType = null;
    }
    xclass.prototype.addTypeParameterDecl = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterDecl(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterDecls.push(retval);
        return retval;
    }
    xclass.prototype.getTypeParameterDecl = function(name) {
        var found = null;
        this.typeParameterDecls.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    xclass.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === ':<') {
            return this.wzLoadToChildColl(child, _md.typeParameterDecl, this.typeParameterDecls);
        }
        if (name === 'final') {
            this.final = parseboolean(child.v, true, child); return true;
        }
        if (name === 'super') {
            return this.wzLoadOneToOne(child, _md.superType, 'superType');
        }
        if (name === 'native') {
            this.native = parseboolean(child.v, true, child); return true;
        }
        if (name === 'public') {
            this.public = parseboolean(child.v, true, child); return true;
        }
        if (name === 'static') {
            this.static = parseboolean(child.v, true, child); return true;
        }
        if (name === 'extends') {
            this.extends = child.v; return true;
        }
        if (name === 'private') {
            this.private = parseboolean(child.v, true, child); return true;
        }
        if (name === 'abstract') {
            this.abstract = parseboolean(child.v, true, child); return true;
        }
        if (name === 'strictfp') {
            this.strictfp = parseboolean(child.v, true, child); return true;
        }
        if (name === 'volatile') {
            this.volatile = parseboolean(child.v, true, child); return true;
        }
        if (name === 'protected') {
            this.protected = parseboolean(child.v, true, child); return true;
        }
        if (name === 'transient') {
            this.transient = parseboolean(child.v, true, child); return true;
        }
        if (name === 'implements') {
            this.implements = child.v; return true;
        }
        if (name === 'synchronized') {
            this.synchronized = parseboolean(child.v, true, child); return true;
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        if (!ok) {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        return ok;
    }
    xclass.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    xclass.prototype.wzVerify = function(ctx) {
        this.typeParameterDecls.forEach((item) => {
            item.wzVerify(ctx);
        });
        if (this.superType != null) {
            this.superType.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    xclass.prototype.wzInitialize = function(ctx) {
        this.typeParameterDecls.forEach((item) => {
            item.wzInitialize(ctx);
        });
        if (this.superType != null) {
            this.superType.wzInitialize(ctx);
        }
        ctx.modelState = ctx.modelState || {};
        ctx.modelState.hasClasses = true;
        if (this.extends && this.extends.length > 0) {
            this.super = this.extends;
        }
        else if (this.superType) {
            this.super = this.superType.wzName;
        }
        else {
            var tokens = this.wzName.split(':');
            if (tokens.length == 2) {
                this.wzName = tokens[0];
                this.super = tokens[1];
            }
        }
        this.extends = [];
        this.implements = [];
        var temp = [];
        var i, i_items=this.statements, i_len=this.statements.length, s;
        for (i=0; i<i_len; i++) {
            s = this.statements[i];
            if (s.wzElement === 'typeExtends') {
                this.extends.push(s);
            }
            else if (s.wzElement === 'typeImplements') {
                this.implements.push(s);
            }
            else {
                temp.push(s);
            }
        }
        this.statements = temp;
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    xclass.prototype.findCtor = function() {
        return _.find(this.statements, function(item) { return item.wzElement === 'ctor' });
    }
    return xclass;
})(statement);

_md.xclass = xclass;
// element superType
var superType = (function (statement) {
    _inherits(superType, statement);
    function superType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(superType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, superType);
        this.wzElement = "superType";
        // relation typeParameterInst
        this.typeParameterInsts = [];
    }
    superType.prototype.addTypeParameterInst = function(name, sourceLineInfo) {
        var retval = new _md.typeParameterInst(name, sourceLineInfo);
        retval.wzParent = this;
        this.typeParameterInsts.push(retval);
        return retval;
    }
    superType.prototype.getTypeParameterInst = function(name) {
        var found = null;
        this.typeParameterInsts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    superType.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === ':param') {
            return this.wzLoadToChildColl(child, _md.typeParameterInst, this.typeParameterInsts);
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    superType.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    superType.prototype.wzVerify = function(ctx) {
        this.typeParameterInsts.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    superType.prototype.wzInitialize = function(ctx) {
        this.typeParameterInsts.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return superType;
})(statement);

_md.superType = superType;
// element ctor
var ctor = (function (xfunction) {
    _inherits(ctor, xfunction);
    function ctor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ctor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ctor);
        this.wzElement = "ctor";
        this.public = false;
        this.protected = false;
        this.private = false;
        this.static = false;
        this.abstract = false;
        this.final = false;
        this.native = false;
        this.synchronized = false;
        this.transient = false;
        this.volatile = false;
        this.strictfp = false;
        // relation base
        this.bases = [];
    }
    ctor.prototype.addBase = function(name, sourceLineInfo) {
        var retval = new _md.base(name, sourceLineInfo);
        retval.wzParent = this;
        this.bases.push(retval);
        return retval;
    }
    ctor.prototype.getBase = function(name) {
        var found = null;
        this.bases.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    ctor.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'base') {
            return this.wzLoadToChildColl(child, _md.base, this.bases);
        }
        if (name === 'final') {
            this.final = parseboolean(child.v, true, child); return true;
        }
        if (name === 'native') {
            this.native = parseboolean(child.v, true, child); return true;
        }
        if (name === 'public') {
            this.public = parseboolean(child.v, true, child); return true;
        }
        if (name === 'static') {
            this.static = parseboolean(child.v, true, child); return true;
        }
        if (name === 'private') {
            this.private = parseboolean(child.v, true, child); return true;
        }
        if (name === 'abstract') {
            this.abstract = parseboolean(child.v, true, child); return true;
        }
        if (name === 'strictfp') {
            this.strictfp = parseboolean(child.v, true, child); return true;
        }
        if (name === 'volatile') {
            this.volatile = parseboolean(child.v, true, child); return true;
        }
        if (name === 'protected') {
            this.protected = parseboolean(child.v, true, child); return true;
        }
        if (name === 'transient') {
            this.transient = parseboolean(child.v, true, child); return true;
        }
        if (name === 'synchronized') {
            this.synchronized = parseboolean(child.v, true, child); return true;
        }
        ok = _md.xfunction.prototype.loadChild.call(this, child);
        if (!ok) {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        return ok;
    }
    ctor.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    ctor.prototype.wzVerify = function(ctx) {
        this.bases.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.xfunction.prototype.wzVerify.call(this, ctx);
    }
    ctor.prototype.wzInitialize = function(ctx) {
        this.bases.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.xfunction.prototype.wzInitialize.call(this, ctx);
    }
    ctor.prototype.getBaseArgs = function() {
        var ret = [];
        var i, i_items=this.bases, i_len=this.bases.length, item;
        for (i=0; i<i_len; i++) {
            item = this.bases[i];
            ret.push(item.wzName);
        }
        return ret;
    }
    return ctor;
})(xfunction);

_md.ctor = ctor;
// element base
var base = (function (statement) {
    _inherits(base, statement);
    function base(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(base.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, base);
        this.wzElement = "base";
    }
    return base;
})(statement);

_md.base = base;
// element method
var method = (function (xfunction) {
    _inherits(method, xfunction);
    function method(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(method.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, method);
        this.wzElement = "method";
        this.public = false;
        this.protected = false;
        this.private = false;
        this.static = false;
        this.abstract = false;
        this.final = false;
        this.native = false;
        this.synchronized = false;
        this.transient = false;
        this.volatile = false;
        this.strictfp = false;
        // relation typeReturn
        this.typeReturn = null;
    }
    method.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'final') {
            this.final = parseboolean(child.v, true, child); return true;
        }
        if (name === 'native') {
            this.native = parseboolean(child.v, true, child); return true;
        }
        if (name === 'public') {
            this.public = parseboolean(child.v, true, child); return true;
        }
        if (name === 'static') {
            this.static = parseboolean(child.v, true, child); return true;
        }
        if (name === ':return') {
            return this.wzLoadOneToOne(child, _md.typeReturn, 'typeReturn');
        }
        if (name === 'private') {
            this.private = parseboolean(child.v, true, child); return true;
        }
        if (name === 'abstract') {
            this.abstract = parseboolean(child.v, true, child); return true;
        }
        if (name === 'strictfp') {
            this.strictfp = parseboolean(child.v, true, child); return true;
        }
        if (name === 'volatile') {
            this.volatile = parseboolean(child.v, true, child); return true;
        }
        if (name === 'protected') {
            this.protected = parseboolean(child.v, true, child); return true;
        }
        if (name === 'transient') {
            this.transient = parseboolean(child.v, true, child); return true;
        }
        if (name === 'synchronized') {
            this.synchronized = parseboolean(child.v, true, child); return true;
        }
        ok = _md.xfunction.prototype.loadChild.call(this, child);
        if (!ok) {
            return this.wzLoadToChildColl(child, _md.codeline, this.statements);
        }
        return ok;
    }
    method.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    method.prototype.wzVerify = function(ctx) {
        if (this.typeReturn != null) {
            this.typeReturn.wzVerify(ctx);
        }
        _md.xfunction.prototype.wzVerify.call(this, ctx);
    }
    method.prototype.wzInitialize = function(ctx) {
        if (this.typeReturn != null) {
            this.typeReturn.wzInitialize(ctx);
        }
        _md.xfunction.prototype.wzInitialize.call(this, ctx);
    }
    return method;
})(xfunction);

_md.method = method;
// element p
var p = (function (statement) {
    _inherits(p, statement);
    function p(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(p.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, p);
        this.wzElement = "p";
        this.public = false;
        this.protected = false;
        this.private = false;
        this.static = false;
        this.abstract = false;
        this.final = false;
        this.native = false;
        this.synchronized = false;
        this.transient = false;
        this.volatile = false;
        this.strictfp = false;
        // relation typeReturn
        this.typeReturn = null;
    }
    p.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'final') {
            this.final = parseboolean(child.v, true, child); return true;
        }
        if (name === 'native') {
            this.native = parseboolean(child.v, true, child); return true;
        }
        if (name === 'public') {
            this.public = parseboolean(child.v, true, child); return true;
        }
        if (name === 'static') {
            this.static = parseboolean(child.v, true, child); return true;
        }
        if (name === ':return') {
            return this.wzLoadOneToOne(child, _md.typeReturn, 'typeReturn');
        }
        if (name === 'private') {
            this.private = parseboolean(child.v, true, child); return true;
        }
        if (name === 'abstract') {
            this.abstract = parseboolean(child.v, true, child); return true;
        }
        if (name === 'strictfp') {
            this.strictfp = parseboolean(child.v, true, child); return true;
        }
        if (name === 'volatile') {
            this.volatile = parseboolean(child.v, true, child); return true;
        }
        if (name === 'protected') {
            this.protected = parseboolean(child.v, true, child); return true;
        }
        if (name === 'transient') {
            this.transient = parseboolean(child.v, true, child); return true;
        }
        if (name === 'synchronized') {
            this.synchronized = parseboolean(child.v, true, child); return true;
        }
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    p.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    p.prototype.wzVerify = function(ctx) {
        if (this.typeReturn != null) {
            this.typeReturn.wzVerify(ctx);
        }
        _md.statement.prototype.wzVerify.call(this, ctx);
    }
    p.prototype.wzInitialize = function(ctx) {
        if (this.typeReturn != null) {
            this.typeReturn.wzInitialize(ctx);
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return p;
})(statement);

_md.p = p;
// element xnew
var xnew = (function (statement) {
    _inherits(xnew, statement);
    function xnew(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xnew.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xnew);
        this.wzElement = "xnew";
    }
    xnew.prototype.wzInitialize = function(ctx) {
        var tpi = [];
        var ss = [];
        var i, i_items=this.statements, i_len=this.statements.length, s;
        for (i=0; i<i_len; i++) {
            s = this.statements[i];
            if (s.wzElement == 'typeParameterInst') {
                tpi.push(s);
            }
            else {
                ss.push(s);
            }
        }
        if (tpi.length > 0) {
            this.typeParameterInsts = tpi;
            this.statements = ss;
        }
        _md.statement.prototype.wzInitialize.call(this, ctx);
    }
    return xnew;
})(statement);

_md.xnew = xnew;
// element typeSimple
var typeSimple = (function (statement) {
    _inherits(typeSimple, statement);
    function typeSimple(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeSimple.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeSimple);
        this.wzElement = "typeSimple";
    }
    typeSimple.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        ok = _md.statement.prototype.loadChild.call(this, child);
        return ok;
    }
    typeSimple.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.javaModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    return typeSimple;
})(statement);

_md.typeSimple = typeSimple;
// element typeNumber
var typeNumber = (function (typeSimple) {
    _inherits(typeNumber, typeSimple);
    function typeNumber(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNumber.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNumber);
        this.wzElement = "typeNumber";
    }
    return typeNumber;
})(typeSimple);

_md.typeNumber = typeNumber;
// element typeString
var typeString = (function (typeSimple) {
    _inherits(typeString, typeSimple);
    function typeString(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeString.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeString);
        this.wzElement = "typeString";
    }
    return typeString;
})(typeSimple);

_md.typeString = typeString;
// element typeBoolean
var typeBoolean = (function (typeSimple) {
    _inherits(typeBoolean, typeSimple);
    function typeBoolean(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeBoolean.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeBoolean);
        this.wzElement = "typeBoolean";
    }
    return typeBoolean;
})(typeSimple);

_md.typeBoolean = typeBoolean;
// element typeAny
var typeAny = (function (typeSimple) {
    _inherits(typeAny, typeSimple);
    function typeAny(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeAny.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeAny);
        this.wzElement = "typeAny";
    }
    return typeAny;
})(typeSimple);

_md.typeAny = typeAny;
// element typeArray
var typeArray = (function (typeSimple) {
    _inherits(typeArray, typeSimple);
    function typeArray(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeArray.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeArray);
        this.wzElement = "typeArray";
    }
    return typeArray;
})(typeSimple);

_md.typeArray = typeArray;
// element typeObject
var typeObject = (function (typeSimple) {
    _inherits(typeObject, typeSimple);
    function typeObject(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeObject.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeObject);
        this.wzElement = "typeObject";
    }
    return typeObject;
})(typeSimple);

_md.typeObject = typeObject;
// element typeObjectLiteral
var typeObjectLiteral = (function (typeSimple) {
    _inherits(typeObjectLiteral, typeSimple);
    function typeObjectLiteral(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeObjectLiteral.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeObjectLiteral);
        this.wzElement = "typeObjectLiteral";
    }
    return typeObjectLiteral;
})(typeSimple);

_md.typeObjectLiteral = typeObjectLiteral;
// element typeObjectValue
var typeObjectValue = (function (statement) {
    _inherits(typeObjectValue, statement);
    function typeObjectValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeObjectValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeObjectValue);
        this.wzElement = "typeObjectValue";
    }
    return typeObjectValue;
})(statement);

_md.typeObjectValue = typeObjectValue;
// element typeVoid
var typeVoid = (function (typeSimple) {
    _inherits(typeVoid, typeSimple);
    function typeVoid(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeVoid.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeVoid);
        this.wzElement = "typeVoid";
    }
    return typeVoid;
})(typeSimple);

_md.typeVoid = typeVoid;
// element typeNull
var typeNull = (function (typeSimple) {
    _inherits(typeNull, typeSimple);
    function typeNull(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNull.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNull);
        this.wzElement = "typeNull";
    }
    return typeNull;
})(typeSimple);

_md.typeNull = typeNull;
// element typeUndefined
var typeUndefined = (function (typeSimple) {
    _inherits(typeUndefined, typeSimple);
    function typeUndefined(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeUndefined.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeUndefined);
        this.wzElement = "typeUndefined";
    }
    return typeUndefined;
})(typeSimple);

_md.typeUndefined = typeUndefined;
// element typeNever
var typeNever = (function (typeSimple) {
    _inherits(typeNever, typeSimple);
    function typeNever(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNever.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNever);
        this.wzElement = "typeNever";
    }
    return typeNever;
})(typeSimple);

_md.typeNever = typeNever;
// element typeUnknown
var typeUnknown = (function (typeSimple) {
    _inherits(typeUnknown, typeSimple);
    function typeUnknown(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeUnknown.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeUnknown);
        this.wzElement = "typeUnknown";
    }
    return typeUnknown;
})(typeSimple);

_md.typeUnknown = typeUnknown;
// element typeTypeof
var typeTypeof = (function (typeSimple) {
    _inherits(typeTypeof, typeSimple);
    function typeTypeof(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeTypeof.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeTypeof);
        this.wzElement = "typeTypeof";
    }
    return typeTypeof;
})(typeSimple);

_md.typeTypeof = typeTypeof;
// element typeAs
var typeAs = (function (typeSimple) {
    _inherits(typeAs, typeSimple);
    function typeAs(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeAs.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeAs);
        this.wzElement = "typeAs";
    }
    return typeAs;
})(typeSimple);

_md.typeAs = typeAs;
// element typeInitValue
var typeInitValue = (function (statement) {
    _inherits(typeInitValue, statement);
    function typeInitValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeInitValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeInitValue);
        this.wzElement = "typeInitValue";
    }
    return typeInitValue;
})(statement);

_md.typeInitValue = typeInitValue;
// element typeParameterDecl
var typeParameterDecl = (function (statement) {
    _inherits(typeParameterDecl, statement);
    function typeParameterDecl(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeParameterDecl.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeParameterDecl);
        this.wzElement = "typeParameterDecl";
    }
    return typeParameterDecl;
})(statement);

_md.typeParameterDecl = typeParameterDecl;
// element typeEnum
var typeEnum = (function (statement) {
    _inherits(typeEnum, statement);
    function typeEnum(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeEnum.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeEnum);
        this.wzElement = "typeEnum";
    }
    return typeEnum;
})(statement);

_md.typeEnum = typeEnum;
// element typeArrowFunction
var typeArrowFunction = (function (xfunction) {
    _inherits(typeArrowFunction, xfunction);
    function typeArrowFunction(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeArrowFunction.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeArrowFunction);
        this.wzElement = "typeArrowFunction";
    }
    return typeArrowFunction;
})(xfunction);

_md.typeArrowFunction = typeArrowFunction;
// element typeReturn
var typeReturn = (function (statement) {
    _inherits(typeReturn, statement);
    function typeReturn(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeReturn.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeReturn);
        this.wzElement = "typeReturn";
    }
    return typeReturn;
})(statement);

_md.typeReturn = typeReturn;
// element typeTuple
var typeTuple = (function (statement) {
    _inherits(typeTuple, statement);
    function typeTuple(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeTuple.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeTuple);
        this.wzElement = "typeTuple";
    }
    return typeTuple;
})(statement);

_md.typeTuple = typeTuple;
// element typeUnion
var typeUnion = (function (statement) {
    _inherits(typeUnion, statement);
    function typeUnion(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeUnion.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeUnion);
        this.wzElement = "typeUnion";
    }
    return typeUnion;
})(statement);

_md.typeUnion = typeUnion;
// element typeIntersect
var typeIntersect = (function (statement) {
    _inherits(typeIntersect, statement);
    function typeIntersect(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeIntersect.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeIntersect);
        this.wzElement = "typeIntersect";
    }
    return typeIntersect;
})(statement);

_md.typeIntersect = typeIntersect;
// element typeReference
var typeReference = (function (statement) {
    _inherits(typeReference, statement);
    function typeReference(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeReference.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeReference);
        this.wzElement = "typeReference";
    }
    return typeReference;
})(statement);

_md.typeReference = typeReference;
// element typeLiteral
var typeLiteral = (function (statement) {
    _inherits(typeLiteral, statement);
    function typeLiteral(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeLiteral.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeLiteral);
        this.wzElement = "typeLiteral";
    }
    return typeLiteral;
})(statement);

_md.typeLiteral = typeLiteral;
// element typeCallSignature
var typeCallSignature = (function (statement) {
    _inherits(typeCallSignature, statement);
    function typeCallSignature(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCallSignature.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCallSignature);
        this.wzElement = "typeCallSignature";
    }
    return typeCallSignature;
})(statement);

_md.typeCallSignature = typeCallSignature;
// element typeKeyOf
var typeKeyOf = (function (statement) {
    _inherits(typeKeyOf, statement);
    function typeKeyOf(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeKeyOf.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeKeyOf);
        this.wzElement = "typeKeyOf";
    }
    return typeKeyOf;
})(statement);

_md.typeKeyOf = typeKeyOf;
// element typePredicate
var typePredicate = (function (statement) {
    _inherits(typePredicate, statement);
    function typePredicate(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typePredicate.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typePredicate);
        this.wzElement = "typePredicate";
    }
    return typePredicate;
})(statement);

_md.typePredicate = typePredicate;
// element typeNotNull
var typeNotNull = (function (statement) {
    _inherits(typeNotNull, statement);
    function typeNotNull(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNotNull.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNotNull);
        this.wzElement = "typeNotNull";
    }
    return typeNotNull;
})(statement);

_md.typeNotNull = typeNotNull;
// element typeCTorDeclare
var typeCTorDeclare = (function (statement) {
    _inherits(typeCTorDeclare, statement);
    function typeCTorDeclare(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCTorDeclare.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCTorDeclare);
        this.wzElement = "typeCTorDeclare";
    }
    return typeCTorDeclare;
})(statement);

_md.typeCTorDeclare = typeCTorDeclare;
// element typeCTor
var typeCTor = (function (statement) {
    _inherits(typeCTor, statement);
    function typeCTor(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCTor.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCTor);
        this.wzElement = "typeCTor";
    }
    return typeCTor;
})(statement);

_md.typeCTor = typeCTor;
// element typeIndexedAccess
var typeIndexedAccess = (function (statement) {
    _inherits(typeIndexedAccess, statement);
    function typeIndexedAccess(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeIndexedAccess.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeIndexedAccess);
        this.wzElement = "typeIndexedAccess";
    }
    return typeIndexedAccess;
})(statement);

_md.typeIndexedAccess = typeIndexedAccess;
// element typeIndex
var typeIndex = (function (statement) {
    _inherits(typeIndex, statement);
    function typeIndex(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeIndex.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeIndex);
        this.wzElement = "typeIndex";
    }
    return typeIndex;
})(statement);

_md.typeIndex = typeIndex;
// element typeCheck
var typeCheck = (function (statement) {
    _inherits(typeCheck, statement);
    function typeCheck(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeCheck.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeCheck);
        this.wzElement = "typeCheck";
    }
    return typeCheck;
})(statement);

_md.typeCheck = typeCheck;
// element typeThen
var typeThen = (function (statement) {
    _inherits(typeThen, statement);
    function typeThen(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeThen.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeThen);
        this.wzElement = "typeThen";
    }
    return typeThen;
})(statement);

_md.typeThen = typeThen;
// element typeElse
var typeElse = (function (statement) {
    _inherits(typeElse, statement);
    function typeElse(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeElse.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeElse);
        this.wzElement = "typeElse";
    }
    return typeElse;
})(statement);

_md.typeElse = typeElse;
// element typeConditional
var typeConditional = (function (statement) {
    _inherits(typeConditional, statement);
    function typeConditional(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeConditional.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeConditional);
        this.wzElement = "typeConditional";
    }
    return typeConditional;
})(statement);

_md.typeConditional = typeConditional;
// element typeRequire
var typeRequire = (function (statement) {
    _inherits(typeRequire, statement);
    function typeRequire(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeRequire.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeRequire);
        this.wzElement = "typeRequire";
    }
    return typeRequire;
})(statement);

_md.typeRequire = typeRequire;
// element typeParenthesized
var typeParenthesized = (function (statement) {
    _inherits(typeParenthesized, statement);
    function typeParenthesized(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeParenthesized.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeParenthesized);
        this.wzElement = "typeParenthesized";
    }
    return typeParenthesized;
})(statement);

_md.typeParenthesized = typeParenthesized;
// element typeInfer
var typeInfer = (function (statement) {
    _inherits(typeInfer, statement);
    function typeInfer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeInfer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeInfer);
        this.wzElement = "typeInfer";
    }
    return typeInfer;
})(statement);

_md.typeInfer = typeInfer;
// element typeParameterInst
var typeParameterInst = (function (statement) {
    _inherits(typeParameterInst, statement);
    function typeParameterInst(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeParameterInst.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeParameterInst);
        this.wzElement = "typeParameterInst";
    }
    return typeParameterInst;
})(statement);

_md.typeParameterInst = typeParameterInst;
// element typeExport
var typeExport = (function (statement) {
    _inherits(typeExport, statement);
    function typeExport(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExport.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExport);
        this.wzElement = "typeExport";
    }
    return typeExport;
})(statement);

_md.typeExport = typeExport;
// element typeExportAssignment
var typeExportAssignment = (function (statement) {
    _inherits(typeExportAssignment, statement);
    function typeExportAssignment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExportAssignment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExportAssignment);
        this.wzElement = "typeExportAssignment";
    }
    return typeExportAssignment;
})(statement);

_md.typeExportAssignment = typeExportAssignment;
// element typeExportNamespace
var typeExportNamespace = (function (statement) {
    _inherits(typeExportNamespace, statement);
    function typeExportNamespace(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExportNamespace.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExportNamespace);
        this.wzElement = "typeExportNamespace";
    }
    return typeExportNamespace;
})(statement);

_md.typeExportNamespace = typeExportNamespace;
// element typeImport
var typeImport = (function (statement) {
    _inherits(typeImport, statement);
    function typeImport(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeImport.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeImport);
        this.wzElement = "typeImport";
    }
    return typeImport;
})(statement);

_md.typeImport = typeImport;
// element typeImportEqualsDeclaration
var typeImportEqualsDeclaration = (function (statement) {
    _inherits(typeImportEqualsDeclaration, statement);
    function typeImportEqualsDeclaration(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeImportEqualsDeclaration.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeImportEqualsDeclaration);
        this.wzElement = "typeImportEqualsDeclaration";
    }
    return typeImportEqualsDeclaration;
})(statement);

_md.typeImportEqualsDeclaration = typeImportEqualsDeclaration;
// element typeNamespaceExportDeclaration
var typeNamespaceExportDeclaration = (function (statement) {
    _inherits(typeNamespaceExportDeclaration, statement);
    function typeNamespaceExportDeclaration(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeNamespaceExportDeclaration.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeNamespaceExportDeclaration);
        this.wzElement = "typeNamespaceExportDeclaration";
    }
    return typeNamespaceExportDeclaration;
})(statement);

_md.typeNamespaceExportDeclaration = typeNamespaceExportDeclaration;
// element typeExternalModuleReference
var typeExternalModuleReference = (function (statement) {
    _inherits(typeExternalModuleReference, statement);
    function typeExternalModuleReference(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeExternalModuleReference.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeExternalModuleReference);
        this.wzElement = "typeExternalModuleReference";
    }
    return typeExternalModuleReference;
})(statement);

_md.typeExternalModuleReference = typeExternalModuleReference;
_md.__tagElementMapping = { '#': 'statement', '{': 'objectParam', 'function': 'xfunction', 'function*': 'generatorfunction', 'async-function': 'asyncfunction', 'm': 'method', ':=>': 'typeArrowFunction', 'yield': 'xyield', 'await': 'xawait', 'return': 'xreturn', 'class': 'xclass', 'super': 'superType', 'new': 'xnew', ':number': 'typeNumber', ':string': 'typeString', ':boolean': 'typeBoolean', ':any': 'typeAny', ':[': 'typeArray', ':object': 'typeObject', ':{': 'typeObjectLiteral', ':void': 'typeVoid', ':null': 'typeNull', ':undefined': 'typeUndefined', ':never': 'typeNever', ':unknown': 'typeUnknown', ':typeof': 'typeTypeof', ':as': 'typeAs', ':@': 'typeObjectValue', ':=': 'typeInitValue', ':<': 'typeParameterDecl', ':enum': 'typeEnum', ':return': 'typeReturn', ':tuple': 'typeTuple', ':union': 'typeUnion', ':intersect': 'typeIntersect', ':ref': 'typeReference', ':literal': 'typeLiteral', ':call': 'typeCallSignature', ':keyof': 'typeKeyOf', ':predicate': 'typePredicate', ':!': 'typeNotNull', ':new': 'typeCTorDeclare', ':ctor': 'typeCTor', ':[]': 'typeIndexedAccess', ':index': 'typeIndex', ':check': 'typeCheck', ':then': 'typeThen', ':else': 'typeElse', ':iif': 'typeConditional', ':require': 'typeRequire', ':paren': 'typeParenthesized', ':infer': 'typeInfer', ':param': 'typeParameterInst', ':export-type': 'typeExport', ':exporttype': 'typeExport', ':export': 'typeExportAssignment', ':export-ns': 'typeExportNamespace', ':exportns': 'typeExportNamespace', ':import-type': 'typeImport', ':importtype': 'typeImport', ':import=': 'typeImportEqualsDeclaration' };
// model/replaceUnknownElement( )
var javaModelException = (function () {
    function javaModelException(message, node, instance) {
        _classCallCheck(this, javaModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.error('message', this.message);
        this.stack = (new Error()).stack;
    }
    javaModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: javaModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return javaModelException;
})();

_md.javaModelException = javaModelException;
var javaContext = (function () {
    function javaContext() {
        _classCallCheck(this, javaContext);
        this.validationErrors = [];
    }
    javaContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    javaContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    return javaContext;
})();

_md.javaContext = javaContext;
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new javaModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function wzInitialize() {
    this.specifiers = [];
    var temp = [];
    var i, i_items=this.statements, i_len=this.statements.length, item;
    for (i=0; i<i_len; i++) {
        item = this.statements[i];
        if (item.wzElement === 'jsPropertyOrValue') {
            this.specifiers.push(item);
        }
        else {
            temp.push(item);
        }
    }
    this.statements = temp;
}
function wzInitialize() {
    this.specifiers = [];
    var temp = [];
    var i, i_items=this.statements, i_len=this.statements.length, item;
    for (i=0; i<i_len; i++) {
        item = this.statements[i];
        if (item.wzElement === 'jsPropertyOrValue') {
            this.specifiers.push(item);
        }
        else {
            temp.push(item);
        }
    }
    this.statements = temp;
}

