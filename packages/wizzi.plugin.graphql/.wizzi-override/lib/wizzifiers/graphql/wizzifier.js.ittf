module
    $
        var schemaName = 'graphql';
    kind es6
    basewizzifier()
        $append imports
            var helpers = require("@wizzi/utils").helpers
            var graphql_parser = require('graphql/language/parser')
            var textIndentParser = helpers.textIndentParser
            var cleanAST = require('./cleanAST')
            function parseInternal
                param tobeWizzified
                param options
                param callback
                var syntax
                try
                    set syntax
                         _ graphql_parser.parse(tobeWizzified)
                    _ cleanAST(syntax)
                catch ex
                    return
                        _ callback
                            @ ex
                return
                    _ callback
                        @ null
                        @ syntax
        var format
            function
                param parent
                param ast
                param options
                if !ast
                    throw new Error('missing ast. parent is: ' + util.inspect(parent, { depth: 2 }))
                if parent === null
                    if options.starter
                        set options.starter = false
                    elif options.returnText
                        # ok
                    else
                        _ showstack(options)
                        throw new Error('parent is null.' + util.inspect(ast, 4))
                # loog 'ast.kind', ast.kind
                var kind = ast.kind === 'arguments' ? 'xarguments' : ast.kind
                var formatter = format[kind]
                if formatter
                    _ options.stack.push(ast)
                    var result = formatter(parent, ast, options)
                    _ options.stack.pop()
                    return result
                else
                    throw new Error('no formatter for kind: ' + ast.kind)
        function wizzify
            param tobeWizzified
            param options
            param callback
            set options = options || {};
            set options.input = tobeWizzified
            set options.stack = []
            set options.formatTextNodes = []
            set options.verbose = true
            _ parseInternal
                @ tobeWizzified
                @ options
                a_cb( syntax )
                    # loog JSON.stringify(syntax, null, 2)
                    var root
                        {
                            @ tag '${schemaName}'
                            [ children
                    _ format(root, syntax, options)
                    return
                        _ callback
                            @ null
                            @ root
        $include helper_functions
        function isKnownType
            param type
            return ['Int', 'Float', 'Boolean', 'String'].indexOf(type) > -1

        function getTypeName
            param type
            return isKnownType(type) ? type.toLowerCase() : type

        f( Name, name )
            name( value )
            #
                # loog 'Name.tag', ret.tag
                # loog 'Name.name', ret.name
                # loog 'Name.textified', ret.textified

        f( NonNullType, :! )
            f_p_temp( type 
            set ret.name = p_type.name
            f_p( type
            # loog 'NonNullType.ret', ret
            if ret.children[0].tag == 'namedType'
                set ret.children.length = 0
            $*
            if p_type.children[0].tag == 'namedType'
                set p_type.children[0].tag = ':'
            *$

        f( NamedType, namedType )
            f_p_temp( name
            # loog 'NamedType.p_name', ret, p_name
            if isTextualNode(p_name)
                set ret.name = getTypeName(getNodeText(p_name))
                set ret.textified = ret.name
            else
                _ ret.children.push(p_name)

        f( Document, skip)
            f_a( definitions )

        f( SchemaDefinition, :schema
            f_a( directives
            f_a( operationTypes

        f( SchemaExtension, :extend-schema
            f_a( directives
            f_a( operationTypes

        f( OperationTypeDefinition, operation-type
            tag( operation 
            f_p_temp( type 
            if isTextualNode(p_type)
                set ret.name = getNodeText(p_type)
            else
                new Error('InterfaceTypeDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))

        f( ObjectTypeDefinition, :type
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('ObjectTypeDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a_temp( interfaces
            if p_interfaces != null
                foreach item in p_interfaces.children
                    set item.tag = '&'
                    _ ret.children.push(item)
            f_a( directives
            f_a( fields

        f( FieldDefinition, :p
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('FieldDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_p( type 
            if ret.children[0].tag == ':!'
                if ret.children[0].children.length == 1 && ret.children[0].children[0].tag == ':['
                    set ret.children[0].tag = ':!['
                    set ret.children[0].children = ret.children[0].children[0].children
                if ret.children[0].children.length == 1 && ret.children[0].children[0].tag == 'namedType'
                    set ret.children[0].children.length = 0
            if ret.children[0].tag == 'namedType'
                set ret.children[0].tag = ':'
            if node.arguments.length > 0
                set ret.tag = ':m'

            # loog 'FieldDefinition.type', ret.children[0]
            f_a( directives
            f_a_temp( arguments
            # loog 'FieldDefinition.arguments', p_arguments
            foreach item in p_arguments.children
                if item.tag == '@'
                    set item.tag = 'param'
                    if item.children[0].tag[0] != ':'
                        set item.children[0].name = item.children[0].tag
                        set item.children[0].tag = ':'
                _ ret.children.push
                    @ item
            

        f( ObjectTypeExtension, :extend-type
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('ObjectTypeExtension. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a_temp( interfaces
            if p_interfaces != null
                foreach item in p_interfaces.children
                    set item.tag = '&'
                    _ ret.children.push(item)
            f_a( directives
            f_a( fields
            

        f( InterfaceTypeDefinition, :interface
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('InterfaceTypeDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a_temp( interfaces
            if p_interfaces != null
                foreach item in p_interfaces.children
                    set item.tag = '&'
                    _ ret.children.push(item)
            f_a( directives
            f_a( fields
            
        f( InterfaceTypeExtension, :extend-interface
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('InterfaceTypeDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a( directives
            f_a( fields

        f( UnionTypeDefinition, :union
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('UnionTypeDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a( types
            foreach item in ret.children
                if item.tag === 'namedType'
                    set item.tag = '|'
            f_a( directives

        f( UnionTypeExtension, :extend-union
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('UnionTypeDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a( types
            foreach item in ret.children
                if item.tag === 'namedType'
                    set item.tag = '|'
            f_a( directives

        f( ListType, :[
            f_p( type 
            # loog 'ListType', ret
            if ret.children[0].tag == 'namedType'
                set ret.children[0].tag = ':'
            if ret.children[0].tag == ':!'
                if ret.children[0].children.length == 1 && ret.children[0].children[0].tag == ':['
                    set ret.children[0].tag = ':!['
                    set ret.children[0].children = ret.children[0].children[0].children
                $*
                if ret.children[0].children.length == 1 && ret.children[0].children[0].tag == 'namedType'
                    set ret.children[0].children.length = 0
                *$


        f( ScalarTypeDefinition, :scalar
            f_p_name(ScalarTypeDefinition)
            f_p( description, false 
            f_a( directives

        f( ScalarTypeExtension, :extend-scalar
            f_p_name(ScalarTypeDefinition)
            f_p( description, false 
            f_a( directives

        f( EnumTypeDefinition, :enum
            f_p_name(EnumTypeDefinition)
            f_a( directives
            f_a( values

        f( EnumTypeExtension, :extend-enum
            f_p_name(EnumTypeDefinition)
            f_a( directives
            f_a( values

        f( EnumValueDefinition, @
            f_p_name(EnumValueDefinition)
            f_a( directives

        format( OperationDefinition $$ , oper
            $*
            tag( operation 
            f_a( variableDefinitions
            f_a( directives
            f_p( selectionSet 
            *$
            var ret
            if node.operation == 'query' 
                \b && arrayIsEmpty(node.variableDefinitions) 
                \b && arrayIsEmpty(node.directives) 
                set ret = parent
            else
                var ret
                    {
                        @ tag ':' + node.operation
                        @ name ''
                        @ isText false
                        @ textified null
                        @ source options.input.substring(node.start, node.end)
                        [ children
                f_a( variableDefinitions
                f_a( directives
            # loog 'OperationDefinition.ret', ret
            _ format
                @ ret
                @ node.selectionSet
                @ options
            # loog 'OperationDefinition.after.ret', ret
            _ parent.children.push(ret)

        f( SelectionSet, {
            f_a( selections

        f( InputValueDefinition, @
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('InputValueDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_p( type 
            if ret.children[0].tag == ':!'
                if ret.children[0].children.length == 1 && ret.children[0].children[0].tag == ':['
                    set ret.children[0].tag = ':!['
                    set ret.children[0].children = ret.children[0].children[0].children
                if ret.children[0].children.length == 1 && ret.children[0].children[0].tag == 'namedType'
                    set ret.children[0].children.length = 0
            if ret.children[0].tag == 'namedType'
                set ret.children[0].tag = ':'
            #
                f_p_temp( type 
                # loog 'InputValueDefinition.p_type', ret.name, p_type
                if p_type.tag === 'namedType'
                    set p_type.tag = p_type.name
                    if p_type.tag == 'string'
                        set p_type.name = '"' + p_name.name + '"'
                    else
                        set p_type.name = p_name.name
                _ ret.children.push(p_type)
            f_p( defaultValue, false
            if ret.children.length == 2
                set ret.children[1].tag = '='
                if p_type.tag == 'string'
                    set ret.children[1].name = '"' +  ret.children[1].name + '"'
            f_a( directives

        f( InputObjectTypeDefinition, input
            f_p_temp( name 
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('InputObjectTypeDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a( directives
            f_a_in_tag( fields, {

        f( Field, .
            if node.arguments.length > 0
                set ret.tag = '_'
            name( name.value
            f_p_temp( alias, false
            if p_alias != null
                set p_alias.tag = 'as'
                _ ret.children.push(p_alias)
            
            f_a( directives
            f_a( arguments
            f_p( selectionSet, false
            

        f( Argument, @
            f_p_temp( name
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('Argument. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_p( value
            # loog 'Argument', ret.name, ret.children.length
            if ret.children.length == 1
                # loog 'Argument', ret.name, ret.children[0].tag, ret.children[0].name, ret.children[0].children.length
                if ret.children[0].children.length < 1
                    if ret.children[0].tag == 'string'
                        # set ret.children[0].name = '"' +  ret.children[0].name + '"'
                        set ret.name = ret.name + ' ' + '"' +  ret.children[0].name + '"'
                    else
                        set ret.name = ret.name + ' ' + ret.children[0].name
                    set ret.children.length = 0

        f( IntValue, int
            name( value )

        f( FloatValue, float
            name( value )

        f( BooleanValue, boolean
            name( value )

        f( NullValue, null
            name( value )

        f( StringValue, string
            name( value )
            var lines 
                _ textIndentParser.parse
                    @ ret.name
            # loog 'lines', lines
            if lines.length < 1
                var 
                    decl nodes
                        [ 
                    decl root = null
                    decl current = null
                    decl line
                    decl i
                    decl l = lines.length
                
                for var i = 0; i < l; i++
                    set line = lines[i]
                    set line.tag = '+'
                    set line.name = line.value
                    if line.indent <= 0
                        set line.parent = ret
                        # loog line.value, 'added to', ret.tag, ret.name
                        _ ret.children.push(line)
                    elif line.indent == current.indent
                        set line.parent = current.parent
                        # loog line.value, 'added to', current.parent.tag, current.parent.name
                        _ current.parent.children.push(line)
                    elif line.indent > current.indent
                        set line.parent = current
                        # loog line.value, 'added to', current.tag, current.name
                        _ current.children.push(line)
                    elif line.indent < current.indent
                        var parent = current.parent
                        while parent != null && line.indent < parent.indent
                            set parent = parent.parent
                        set line.parent = parent.parent
                        if parent.parent
                            # loog line.value, 'added to', parent.parent.tag, parent.parent.name
                            _ parent.parent.children.push(line)
                        else
                            # loog line.value, 'added to', ret.tag, ret.name
                            _ ret.children.push(line)
                    set current = line
                    set current.children = []

                set ret.tag = 'string'
                set ret.name = null
            
            $if false
                var lines = ret.name.split(/\n\r|\n|\r/)
                if lines.length > 1
                    set ret.name = lines[0]
                    for var i = 1; i<lines.length;i++
                        _ ret.children.push
                            {
                                @ tag '\\n'
                                @ name lines[i]
                                [ children

        f( ListValue, [
            f_a( values

        f( ObjectValue, {
            f_a( fields

        f( ObjectField, @
            f_p_temp( name
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('ObjectField. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_p( value
            if ret.children.length == 1 
                if ret.children[0].tag = 'var'
                    set ret.name = ret.name + ' ' + ret.children[0].name
                    set ret.children.length = 0

        f( FragmentDefinition, fragment
            f_p_temp( name
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('FragmentDefinition. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_p_tag( typeCondition , on
            # loog 'FragmentDefinition.p_typeCondition', p_typeCondition
            if p_typeCondition.children.length == 1 && p_typeCondition.children[0].tag == "namedType"
                set p_typeCondition.name = p_typeCondition.children[0].name
                set p_typeCondition.children.length = 0
            f_a( directives
            f_p( selectionSet, false
            

        f( FragmentSpread, ...
            f_p_temp( name
            if isTextualNode(p_name)
                set ret.name = getNodeText(p_name)
            else
                new Error('FragmentSpread. Expected textual name: ' + JSON.stringify(node, null, 2))
            f_a( directives

        f( InlineFragment, ...on
            f_p_temp( typeCondition, false
            if p_typeCondition != null
                if isTextualNode(p_typeCondition)
                    set ret.name = getNodeText(p_typeCondition)
                    set ret.textified = ret.name
                else
                    _ ret.children.push(p_typeCondition)
            f_a( directives
            f_p( selectionSet, false
            


        f( VariableDefinition, var-def
            f_p_temp( variable
            # loog 'Variable', p_variable
            f_p_temp( type
            # loog 'Type', p_type
            set ret.tag = p_type.name
            set ret.name = p_variable.name
            f_p( defaultValue, false
            if ret.children.length == 1
                set ret.children[0].tag = '='
                if p_type.name == 'string'
                    set ret.children[0].name = '"' +  ret.children[0].name + '"'
            f_a( directives


        f( Variable, var
            f_p_temp( name
            if isTextualNode(p_name)
                set ret.name = '$' + getNodeText(p_name)
                set ret.textified = ret.name
            else
                _ ret.children.push(p_name)

        f( DirectiveDefinition, :%
            f_p_name( name
            f_a( arguments
            f_a_temp( locations
            foreach item in p_locations.children
                # loog 'DirectiveDefinition.item', item
                set item.tag = 'on'
                _ ret.children.push
                    @ item

        f( Directive, %
            f_p_temp( name
            # loog 'Directive', p_name
            f_a( arguments
            set ret.name = p_name.name

