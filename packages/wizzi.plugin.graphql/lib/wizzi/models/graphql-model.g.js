/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    package: wizzi-js@0.7.13
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var graphqlBase = (function () {
    function graphqlBase(name, sourceLineInfo) {
        _classCallCheck(this, graphqlBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    graphqlBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    graphqlBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    graphqlBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    graphqlBase.prototype.wzVerify = function() {
    }
    graphqlBase.prototype.wzInitialize = function() {
    }
    graphqlBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    graphqlBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    graphqlBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    graphqlBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    graphqlBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    graphqlBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    graphqlBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    graphqlBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    graphqlBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    graphqlBase.prototype.error = function(message, node) {
        throw new _md.graphqlModelException(message, node, this);
    }
    graphqlBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    graphqlBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach(item => 
            
                children.push(item.toJson())
            )
            result.wzChildren = children;
        }
    }
    return graphqlBase;
})();

_md.graphqlBase = graphqlBase;

// element text
var text = (function (graphqlBase) {
    _inherits(text, graphqlBase);
    function text(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(text.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, text);
        this.wzElement = "text";
        // relation text
        this.texts = [];
    }
    text.prototype.addText = function(name, sourceLineInfo) {
        var retval = new _md.text(name, sourceLineInfo);
        retval.wzParent = this;
        this.texts.push(retval);
        return retval;
    }
    text.prototype.getText = function(name) {
        var found = null;
        this.texts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    text.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    text.prototype.toJsonProperties = function(result) {
        _md.graphqlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    text.prototype.toJsonChildren = function(result) {
        _md.graphqlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.texts.forEach(item => 
        
            items.push(item.toJson())
        )
        result['texts'] = items;
    }
    text.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.text, this.texts);
        }
        return false;
    }
    text.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    text.prototype.wzVerify = function(ctx) {
        this.texts.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.graphqlBase.prototype.wzVerify.call(this, ctx);
    }
    text.prototype.wzInitialize = function(ctx) {
        this.texts.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.graphqlBase.prototype.wzInitialize.call(this, ctx);
    }
    return text;
})(graphqlBase);

_md.text = text;
// element comment
var comment = (function (graphqlBase) {
    _inherits(comment, graphqlBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.graphqlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.graphqlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        return false;
    }
    comment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    comment.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.graphqlBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.graphqlBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(graphqlBase);

_md.comment = comment;
// element commentable
var commentable = (function (graphqlBase) {
    _inherits(commentable, graphqlBase);
    function commentable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(commentable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, commentable);
        this.wzElement = "commentable";
        // relation comment
        this.comments = [];
    }
    commentable.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    commentable.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    commentable.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    commentable.prototype.toJsonProperties = function(result) {
        _md.graphqlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    commentable.prototype.toJsonChildren = function(result) {
        _md.graphqlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    commentable.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        return false;
    }
    commentable.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    commentable.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.graphqlBase.prototype.wzVerify.call(this, ctx);
    }
    commentable.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.graphqlBase.prototype.wzInitialize.call(this, ctx);
    }
    return commentable;
})(graphqlBase);

_md.commentable = commentable;
// element basenode
var basenode = (function (commentable) {
    _inherits(basenode, commentable);
    function basenode(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(basenode.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, basenode);
        this.wzElement = "basenode";
        // relation directive
        this.directives = [];
    }
    basenode.prototype.getDirective = function(name) {
        var found = null;
        this.directives.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    basenode.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    basenode.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    basenode.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.directives.forEach(item => 
        
            items.push(item.toJson())
        )
        result['directives'] = items;
    }
    basenode.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '%') {
            return this.wzLoadToChildColl(child, _md.genericDirective, this.directives);
        }
        if (name === '%list') {
            return this.wzLoadToChildColl(child, _md.isListDirective, this.directives);
        }
        else if (name === '%skip') {
            return this.wzLoadToChildColl(child, _md.skipDirective, this.directives);
        }
        if (name === '%include') {
            return this.wzLoadToChildColl(child, _md.includeDirective, this.directives);
        }
        if (name === '%required') {
            return this.wzLoadToChildColl(child, _md.isRequiredDirective, this.directives);
        }
        if (name === '%deprecated') {
            return this.wzLoadToChildColl(child, _md.isDeprecatedDirective, this.directives);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    basenode.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    basenode.prototype.wzVerify = function(ctx) {
        this.directives.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    basenode.prototype.wzInitialize = function(ctx) {
        this.directives.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return basenode;
})(commentable);

_md.basenode = basenode;
// element graphql
var graphql = (function (basenode) {
    _inherits(graphql, basenode);
    function graphql(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(graphql.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, graphql);
        this.wzElement = "graphql";
        // relation typeDef
        this.typeDefs = [];
        // relation operation
        this.operations = [];
        // relation selectionSet
        this.selectionSet = null;
        // relation fragment
        this.fragments = [];
    }
    graphql.prototype.getTypeDef = function(name) {
        var found = null;
        this.typeDefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    graphql.prototype.getOperation = function(name) {
        var found = null;
        this.operations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    graphql.prototype.addFragment = function(name, sourceLineInfo) {
        var retval = new _md.fragment(name, sourceLineInfo);
        retval.wzParent = this;
        this.fragments.push(retval);
        return retval;
    }
    graphql.prototype.getFragment = function(name) {
        var found = null;
        this.fragments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    graphql.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    graphql.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    graphql.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.typeDefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['typeDefs'] = items;
        items = [];
        this.operations.forEach(item => 
        
            items.push(item.toJson())
        )
        result['operations'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
        items = [];
        this.fragments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fragments'] = items;
    }
    graphql.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '.') {
            return this.wzLoadToChildColl(child, _md.fieldDef, this.typeDefs);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.inputValueDef, this.typeDefs);
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'type') {
            return this.wzLoadToChildColl(child, _md.objectTypeDef, this.typeDefs);
        }
        if (name === ':enum') {
            return this.wzLoadToChildColl(child, _md.enumType, this.typeDefs);
        }
        if (name === 'query') {
            return this.wzLoadToChildColl(child, _md.query, this.operations);
        }
        if (name === ':query') {
            return this.wzLoadToChildColl(child, _md.queryType, this.typeDefs);
        }
        if (name === 'schema') {
            return this.wzLoadToChildColl(child, _md.schemaDef, this.typeDefs);
        }
        if (name === 'fragment') {
            return this.wzLoadToChildColl(child, _md.fragment, this.fragments);
        }
        if (name === 'mutation') {
            return this.wzLoadToChildColl(child, _md.mutation, this.operations);
        }
        if (name === ':mutation') {
            return this.wzLoadToChildColl(child, _md.mutationType, this.typeDefs);
        }
        if (name === 'subscription') {
            return this.wzLoadToChildColl(child, _md.subscription, this.operations);
        }
        if (name === ':subscription') {
            return this.wzLoadToChildColl(child, _md.subscriptionType, this.typeDefs);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    graphql.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    graphql.prototype.wzVerify = function(ctx) {
        this.typeDefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.operations.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        this.fragments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    graphql.prototype.wzInitialize = function(ctx) {
        this.typeDefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.operations.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        this.fragments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return graphql;
})(basenode);

_md.graphql = graphql;
// element directiveLocation
var directiveLocation = (function (commentable) {
    _inherits(directiveLocation, commentable);
    function directiveLocation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(directiveLocation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, directiveLocation);
        this.wzElement = "directiveLocation";
    }
    directiveLocation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    directiveLocation.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    directiveLocation.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return directiveLocation;
})(commentable);

_md.directiveLocation = directiveLocation;
// element directive
var directive = (function (commentable) {
    _inherits(directive, commentable);
    function directive(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(directive.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, directive);
        this.wzElement = "directive";
        // relation directiveLocation
        this.directiveLocations = [];
        // relation argument
        this.xarguments = [];
    }
    directive.prototype.addDirectiveLocation = function(name, sourceLineInfo) {
        var retval = new _md.directiveLocation(name, sourceLineInfo);
        retval.wzParent = this;
        this.directiveLocations.push(retval);
        return retval;
    }
    directive.prototype.getDirectiveLocation = function(name) {
        var found = null;
        this.directiveLocations.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    directive.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    directive.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    directive.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    directive.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.directiveLocations.forEach(item => 
        
            items.push(item.toJson())
        )
        result['directiveLocations'] = items;
        items = [];
        this.xarguments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['xarguments'] = items;
    }
    directive.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.genericArgument, this.xarguments);
        }
        else if (name === '@') {
            return this.wzLoadToChildColl(child, _md.genericArgument, this.xarguments);
        }
        if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.ifArgument, this.xarguments);
        }
        else if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.ifArgument, this.xarguments);
        }
        if (name === 'on') {
            return this.wzLoadToChildColl(child, _md.directiveLocation, this.directiveLocations);
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    directive.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    directive.prototype.wzVerify = function(ctx) {
        this.directiveLocations.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.xarguments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.commentable.prototype.wzVerify.call(this, ctx);
    }
    directive.prototype.wzInitialize = function(ctx) {
        this.directiveLocations.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.xarguments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.commentable.prototype.wzInitialize.call(this, ctx);
    }
    return directive;
})(commentable);

_md.directive = directive;
// element genericDirective
var genericDirective = (function (directive) {
    _inherits(genericDirective, directive);
    function genericDirective(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(genericDirective.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, genericDirective);
        this.wzElement = "genericDirective";
    }
    genericDirective.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    genericDirective.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    genericDirective.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return genericDirective;
})(directive);

_md.genericDirective = genericDirective;
// element isListDirective
var isListDirective = (function (directive) {
    _inherits(isListDirective, directive);
    function isListDirective(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(isListDirective.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, isListDirective);
        this.wzElement = "isListDirective";
    }
    isListDirective.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    isListDirective.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    isListDirective.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return isListDirective;
})(directive);

_md.isListDirective = isListDirective;
// element isRequiredDirective
var isRequiredDirective = (function (directive) {
    _inherits(isRequiredDirective, directive);
    function isRequiredDirective(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(isRequiredDirective.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, isRequiredDirective);
        this.wzElement = "isRequiredDirective";
    }
    isRequiredDirective.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    isRequiredDirective.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    isRequiredDirective.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return isRequiredDirective;
})(directive);

_md.isRequiredDirective = isRequiredDirective;
// element isDeprecatedDirective
var isDeprecatedDirective = (function (directive) {
    _inherits(isDeprecatedDirective, directive);
    function isDeprecatedDirective(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(isDeprecatedDirective.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, isDeprecatedDirective);
        this.wzElement = "isDeprecatedDirective";
    }
    isDeprecatedDirective.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    isDeprecatedDirective.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    isDeprecatedDirective.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return isDeprecatedDirective;
})(directive);

_md.isDeprecatedDirective = isDeprecatedDirective;
// element skipDirective
var skipDirective = (function (directive) {
    _inherits(skipDirective, directive);
    function skipDirective(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(skipDirective.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, skipDirective);
        this.wzElement = "skipDirective";
    }
    skipDirective.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    skipDirective.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    skipDirective.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return skipDirective;
})(directive);

_md.skipDirective = skipDirective;
// element includeDirective
var includeDirective = (function (directive) {
    _inherits(includeDirective, directive);
    function includeDirective(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(includeDirective.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, includeDirective);
        this.wzElement = "includeDirective";
    }
    includeDirective.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    includeDirective.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    includeDirective.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return includeDirective;
})(directive);

_md.includeDirective = includeDirective;
// element operation
var operation = (function (basenode) {
    _inherits(operation, basenode);
    function operation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(operation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, operation);
        this.wzElement = "operation";
        // relation variable
        this.variables = [];
        // relation selectionSet
        this.selectionSet = null;
    }
    operation.prototype.getVariable = function(name) {
        var found = null;
        this.variables.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    operation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    operation.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    operation.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.variables.forEach(item => 
        
            items.push(item.toJson())
        )
        result['variables'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    operation.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'int') {
            return this.wzLoadToChildColl(child, _md.intVar, this.variables);
        }
        if (name === 'float') {
            return this.wzLoadToChildColl(child, _md.floatVar, this.variables);
        }
        if (name === 'string') {
            return this.wzLoadToChildColl(child, _md.stringVar, this.variables);
        }
        if (name === 'boolean') {
            return this.wzLoadToChildColl(child, _md.booleanVar, this.variables);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    operation.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    operation.prototype.wzVerify = function(ctx) {
        this.variables.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    operation.prototype.wzInitialize = function(ctx) {
        this.variables.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return operation;
})(basenode);

_md.operation = operation;
// element query
var query = (function (operation) {
    _inherits(query, operation);
    function query(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(query.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, query);
        this.wzElement = "query";
    }
    query.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    query.prototype.toJsonProperties = function(result) {
        _md.operation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    query.prototype.toJsonChildren = function(result) {
        _md.operation.prototype.toJsonChildren.call(this, result);
    }
    return query;
})(operation);

_md.query = query;
// element mutation
var mutation = (function (operation) {
    _inherits(mutation, operation);
    function mutation(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mutation.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mutation);
        this.wzElement = "mutation";
    }
    mutation.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mutation.prototype.toJsonProperties = function(result) {
        _md.operation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    mutation.prototype.toJsonChildren = function(result) {
        _md.operation.prototype.toJsonChildren.call(this, result);
    }
    return mutation;
})(operation);

_md.mutation = mutation;
// element subscription
var subscription = (function (operation) {
    _inherits(subscription, operation);
    function subscription(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(subscription.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, subscription);
        this.wzElement = "subscription";
    }
    subscription.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    subscription.prototype.toJsonProperties = function(result) {
        _md.operation.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    subscription.prototype.toJsonChildren = function(result) {
        _md.operation.prototype.toJsonChildren.call(this, result);
    }
    return subscription;
})(operation);

_md.subscription = subscription;
// element selectionSet
var selectionSet = (function (basenode) {
    _inherits(selectionSet, basenode);
    function selectionSet(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(selectionSet.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, selectionSet);
        this.wzElement = "selectionSet";
        // relation argument
        this.xarguments = [];
        // relation selection
        this.selections = [];
        // relation selectionSet
        this.selectionSet = null;
    }
    selectionSet.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    selectionSet.prototype.getSelection = function(name) {
        var found = null;
        this.selections.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    selectionSet.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    selectionSet.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    selectionSet.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.xarguments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['xarguments'] = items;
        items = [];
        this.selections.forEach(item => 
        
            items.push(item.toJson())
        )
        result['selections'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    selectionSet.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '.') {
            return this.wzLoadToChildColl(child, _md.field, this.selections);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.genericArgument, this.xarguments);
        }
        else if (name === '@') {
            return this.wzLoadToChildColl(child, _md.genericArgument, this.xarguments);
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.ifArgument, this.xarguments);
        }
        else if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.ifArgument, this.xarguments);
        }
        if (name === '...') {
            return this.wzLoadToChildColl(child, _md.fragmentSpread, this.selections);
        }
        if (name === '...on') {
            return this.wzLoadToChildColl(child, _md.inlineFragment, this.selections);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    selectionSet.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    selectionSet.prototype.wzVerify = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.selections.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    selectionSet.prototype.wzInitialize = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.selections.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return selectionSet;
})(basenode);

_md.selectionSet = selectionSet;
// element argument
var argument = (function (basenode) {
    _inherits(argument, basenode);
    function argument(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(argument.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, argument);
        this.wzElement = "argument";
        // relation value
        this.value = null;
    }
    argument.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    argument.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    argument.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.value != null) {
            result['value'] = this.value.toJson();
        }
        else {
            result['value'] = null;
        }
    }
    argument.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadOneToOne(child, _md.objectField, 'value');
        }
        if (name === '[') {
            return this.wzLoadOneToOne(child, _md.arrayValue, 'value');
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.objectValue, 'value');
        }
        if (name === 'id') {
            return this.wzLoadOneToOne(child, _md.IDValue, 'value');
        }
        if (name === 'int') {
            return this.wzLoadOneToOne(child, _md.intValue, 'value');
        }
        if (name === 'enum') {
            return this.wzLoadOneToOne(child, _md.enumValue, 'value');
        }
        if (name === 'float') {
            return this.wzLoadOneToOne(child, _md.floatValue, 'value');
        }
        if (name === 'string') {
            return this.wzLoadOneToOne(child, _md.stringValue, 'value');
        }
        if (name === 'boolean') {
            return this.wzLoadOneToOne(child, _md.booleanValue, 'value');
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    argument.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    argument.prototype.wzVerify = function(ctx) {
        if (this.value != null) {
            this.value.wzVerify(ctx);
        }
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    argument.prototype.wzInitialize = function(ctx) {
        if (this.value != null) {
            this.value.wzInitialize(ctx);
        }
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return argument;
})(basenode);

_md.argument = argument;
// element genericArgument
var genericArgument = (function (argument) {
    _inherits(genericArgument, argument);
    function genericArgument(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(genericArgument.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, genericArgument);
        this.wzElement = "genericArgument";
    }
    genericArgument.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    genericArgument.prototype.toJsonProperties = function(result) {
        _md.argument.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
    }
    genericArgument.prototype.toJsonChildren = function(result) {
        _md.argument.prototype.toJsonChildren.call(this, result);
    }
    genericArgument.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            this.defaultValue = child.v; return true;
        }
        ok = _md.argument.prototype.loadChild.call(this, child);
        return ok;
    }
    genericArgument.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return genericArgument;
})(argument);

_md.genericArgument = genericArgument;
// element ifArgument
var ifArgument = (function (argument) {
    _inherits(ifArgument, argument);
    function ifArgument(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ifArgument.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ifArgument);
        this.wzElement = "ifArgument";
    }
    ifArgument.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ifArgument.prototype.toJsonProperties = function(result) {
        _md.argument.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ifArgument.prototype.toJsonChildren = function(result) {
        _md.argument.prototype.toJsonChildren.call(this, result);
    }
    return ifArgument;
})(argument);

_md.ifArgument = ifArgument;
// element selection
var selection = (function (basenode) {
    _inherits(selection, basenode);
    function selection(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(selection.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, selection);
        this.wzElement = "selection";
    }
    selection.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    selection.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    selection.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
    }
    selection.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    selection.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return selection;
})(basenode);

_md.selection = selection;
// element field
var field = (function (selection) {
    _inherits(field, selection);
    function field(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(field.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, field);
        this.wzElement = "field";
        // relation argument
        this.xarguments = [];
        // relation selectionSet
        this.selectionSet = null;
    }
    field.prototype.getArgument = function(name) {
        var found = null;
        this.xarguments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    field.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    field.prototype.toJsonProperties = function(result) {
        _md.selection.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.alias)) {
            result["alias"] = this.alias;
        }
    }
    field.prototype.toJsonChildren = function(result) {
        _md.selection.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.xarguments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['xarguments'] = items;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    field.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.genericArgument, this.xarguments);
        }
        else if (name === '@') {
            return this.wzLoadToChildColl(child, _md.genericArgument, this.xarguments);
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'as') {
            this.alias = child.v; return true;
        }
        if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.ifArgument, this.xarguments);
        }
        else if (name === 'if') {
            return this.wzLoadToChildColl(child, _md.ifArgument, this.xarguments);
        }
        ok = _md.selection.prototype.loadChild.call(this, child);
        return ok;
    }
    field.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    field.prototype.wzVerify = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.selection.prototype.wzVerify.call(this, ctx);
    }
    field.prototype.wzInitialize = function(ctx) {
        this.xarguments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.selection.prototype.wzInitialize.call(this, ctx);
    }
    return field;
})(selection);

_md.field = field;
// element fragmentSpread
var fragmentSpread = (function (selection) {
    _inherits(fragmentSpread, selection);
    function fragmentSpread(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fragmentSpread.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fragmentSpread);
        this.wzElement = "fragmentSpread";
        // relation selectionSet
        this.selectionSet = null;
    }
    fragmentSpread.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fragmentSpread.prototype.toJsonProperties = function(result) {
        _md.selection.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fragmentSpread.prototype.toJsonChildren = function(result) {
        _md.selection.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    fragmentSpread.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        ok = _md.selection.prototype.loadChild.call(this, child);
        return ok;
    }
    fragmentSpread.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fragmentSpread.prototype.wzVerify = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.selection.prototype.wzVerify.call(this, ctx);
    }
    fragmentSpread.prototype.wzInitialize = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.selection.prototype.wzInitialize.call(this, ctx);
    }
    return fragmentSpread;
})(selection);

_md.fragmentSpread = fragmentSpread;
// element inlineFragment
var inlineFragment = (function (selection) {
    _inherits(inlineFragment, selection);
    function inlineFragment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(inlineFragment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, inlineFragment);
        this.wzElement = "inlineFragment";
        // relation selectionSet
        this.selectionSet = null;
    }
    inlineFragment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    inlineFragment.prototype.toJsonProperties = function(result) {
        _md.selection.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    inlineFragment.prototype.toJsonChildren = function(result) {
        _md.selection.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    inlineFragment.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        ok = _md.selection.prototype.loadChild.call(this, child);
        return ok;
    }
    inlineFragment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    inlineFragment.prototype.wzVerify = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.selection.prototype.wzVerify.call(this, ctx);
    }
    inlineFragment.prototype.wzInitialize = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.selection.prototype.wzInitialize.call(this, ctx);
    }
    return inlineFragment;
})(selection);

_md.inlineFragment = inlineFragment;
// element fragment
var fragment = (function (basenode) {
    _inherits(fragment, basenode);
    function fragment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fragment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fragment);
        this.wzElement = "fragment";
        // relation selectionSet
        this.selectionSet = null;
    }
    fragment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fragment.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.typeCondition)) {
            result["typeCondition"] = this.typeCondition;
        }
    }
    fragment.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.selectionSet != null) {
            result['selectionSet'] = this.selectionSet.toJson();
        }
        else {
            result['selectionSet'] = null;
        }
    }
    fragment.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.selectionSet, 'selectionSet');
        }
        if (name === 'on') {
            this.typeCondition = child.v; return true;
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    fragment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fragment.prototype.wzVerify = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzVerify(ctx);
        }
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    fragment.prototype.wzInitialize = function(ctx) {
        if (this.selectionSet != null) {
            this.selectionSet.wzInitialize(ctx);
        }
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return fragment;
})(basenode);

_md.fragment = fragment;
// element variable
var variable = (function (basenode) {
    _inherits(variable, basenode);
    function variable(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(variable.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, variable);
        this.wzElement = "variable";
    }
    variable.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    variable.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
    }
    variable.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
    }
    variable.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    variable.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return variable;
})(basenode);

_md.variable = variable;
// element stringVar
var stringVar = (function (variable) {
    _inherits(stringVar, variable);
    function stringVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stringVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stringVar);
        this.wzElement = "stringVar";
    }
    stringVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stringVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stringVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    stringVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'String';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return stringVar;
})(variable);

_md.stringVar = stringVar;
// element intVar
var intVar = (function (variable) {
    _inherits(intVar, variable);
    function intVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(intVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, intVar);
        this.wzElement = "intVar";
    }
    intVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    intVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    intVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    intVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'Int';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return intVar;
})(variable);

_md.intVar = intVar;
// element floatVar
var floatVar = (function (variable) {
    _inherits(floatVar, variable);
    function floatVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(floatVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, floatVar);
        this.wzElement = "floatVar";
    }
    floatVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    floatVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    floatVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    floatVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'Float';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return floatVar;
})(variable);

_md.floatVar = floatVar;
// element booleanVar
var booleanVar = (function (variable) {
    _inherits(booleanVar, variable);
    function booleanVar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(booleanVar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, booleanVar);
        this.wzElement = "booleanVar";
    }
    booleanVar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    booleanVar.prototype.toJsonProperties = function(result) {
        _md.variable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    booleanVar.prototype.toJsonChildren = function(result) {
        _md.variable.prototype.toJsonChildren.call(this, result);
    }
    booleanVar.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'Boolean';
        
        _md.variable.prototype.wzInitialize.call(this, ctx);
    }
    return booleanVar;
})(variable);

_md.booleanVar = booleanVar;
// element description
var description = (function (graphqlBase) {
    _inherits(description, graphqlBase);
    function description(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(description.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, description);
        this.wzElement = "description";
        // relation text
        this.texts = [];
    }
    description.prototype.addText = function(name, sourceLineInfo) {
        var retval = new _md.text(name, sourceLineInfo);
        retval.wzParent = this;
        this.texts.push(retval);
        return retval;
    }
    description.prototype.getText = function(name) {
        var found = null;
        this.texts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    description.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    description.prototype.toJsonProperties = function(result) {
        _md.graphqlBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    description.prototype.toJsonChildren = function(result) {
        _md.graphqlBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.texts.forEach(item => 
        
            items.push(item.toJson())
        )
        result['texts'] = items;
    }
    description.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.text, this.texts);
        }
        return false;
    }
    description.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    description.prototype.wzVerify = function(ctx) {
        this.texts.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.graphqlBase.prototype.wzVerify.call(this, ctx);
    }
    description.prototype.wzInitialize = function(ctx) {
        this.texts.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.graphqlBase.prototype.wzInitialize.call(this, ctx);
    }
    return description;
})(graphqlBase);

_md.description = description;
// element typeDef
var typeDef = (function (basenode) {
    _inherits(typeDef, basenode);
    function typeDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(typeDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, typeDef);
        this.wzElement = "typeDef";
        // relation description
        this.description = null;
    }
    typeDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    typeDef.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    typeDef.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.description != null) {
            result['description'] = this.description.toJson();
        }
        else {
            result['description'] = null;
        }
    }
    typeDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '\"\"\"') {
            return this.wzLoadOneToOne(child, _md.description, 'description');
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    typeDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    typeDef.prototype.wzVerify = function(ctx) {
        if (this.description != null) {
            this.description.wzVerify(ctx);
        }
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    typeDef.prototype.wzInitialize = function(ctx) {
        if (this.description != null) {
            this.description.wzInitialize(ctx);
        }
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return typeDef;
})(basenode);

_md.typeDef = typeDef;
// element schemaDef
var schemaDef = (function (typeDef) {
    _inherits(schemaDef, typeDef);
    function schemaDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(schemaDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, schemaDef);
        this.wzElement = "schemaDef";
        // relation operationType
        this.operationTypes = [];
    }
    schemaDef.prototype.getOperationType = function(name) {
        var found = null;
        this.operationTypes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    schemaDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    schemaDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    schemaDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.operationTypes.forEach(item => 
        
            items.push(item.toJson())
        )
        result['operationTypes'] = items;
    }
    schemaDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === ':query') {
            return this.wzLoadToChildColl(child, _md.queryType, this.operationTypes);
        }
        if (name === ':mutation') {
            return this.wzLoadToChildColl(child, _md.mutationType, this.operationTypes);
        }
        if (name === ':subscription') {
            return this.wzLoadToChildColl(child, _md.subscriptionType, this.operationTypes);
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    schemaDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    schemaDef.prototype.wzVerify = function(ctx) {
        this.operationTypes.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    schemaDef.prototype.wzInitialize = function(ctx) {
        this.operationTypes.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return schemaDef;
})(typeDef);

_md.schemaDef = schemaDef;
// element operationType
var operationType = (function (typeDef) {
    _inherits(operationType, typeDef);
    function operationType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(operationType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, operationType);
        this.wzElement = "operationType";
    }
    operationType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    operationType.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    operationType.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
    }
    operationType.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    operationType.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return operationType;
})(typeDef);

_md.operationType = operationType;
// element queryType
var queryType = (function (operationType) {
    _inherits(queryType, operationType);
    function queryType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(queryType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, queryType);
        this.wzElement = "queryType";
    }
    queryType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    queryType.prototype.toJsonProperties = function(result) {
        _md.operationType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    queryType.prototype.toJsonChildren = function(result) {
        _md.operationType.prototype.toJsonChildren.call(this, result);
    }
    return queryType;
})(operationType);

_md.queryType = queryType;
// element mutationType
var mutationType = (function (operationType) {
    _inherits(mutationType, operationType);
    function mutationType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(mutationType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, mutationType);
        this.wzElement = "mutationType";
    }
    mutationType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    mutationType.prototype.toJsonProperties = function(result) {
        _md.operationType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    mutationType.prototype.toJsonChildren = function(result) {
        _md.operationType.prototype.toJsonChildren.call(this, result);
    }
    return mutationType;
})(operationType);

_md.mutationType = mutationType;
// element subscriptionType
var subscriptionType = (function (operationType) {
    _inherits(subscriptionType, operationType);
    function subscriptionType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(subscriptionType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, subscriptionType);
        this.wzElement = "subscriptionType";
    }
    subscriptionType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    subscriptionType.prototype.toJsonProperties = function(result) {
        _md.operationType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    subscriptionType.prototype.toJsonChildren = function(result) {
        _md.operationType.prototype.toJsonChildren.call(this, result);
    }
    return subscriptionType;
})(operationType);

_md.subscriptionType = subscriptionType;
// element enumType
var enumType = (function (typeDef) {
    _inherits(enumType, typeDef);
    function enumType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(enumType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, enumType);
        this.wzElement = "enumType";
        // relation enumValue
        this.enumValues = [];
    }
    enumType.prototype.addEnumValue = function(name, sourceLineInfo) {
        var retval = new _md.enumValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.enumValues.push(retval);
        return retval;
    }
    enumType.prototype.getEnumValue = function(name) {
        var found = null;
        this.enumValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    enumType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    enumType.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    enumType.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.enumValues.forEach(item => 
        
            items.push(item.toJson())
        )
        result['enumValues'] = items;
    }
    enumType.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '.') {
            return this.wzLoadToChildColl(child, _md.enumValue, this.enumValues);
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    enumType.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    enumType.prototype.wzVerify = function(ctx) {
        this.enumValues.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    enumType.prototype.wzInitialize = function(ctx) {
        this.enumValues.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return enumType;
})(typeDef);

_md.enumType = enumType;
// element enumValue
var enumValue = (function (commentable) {
    _inherits(enumValue, commentable);
    function enumValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(enumValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, enumValue);
        this.wzElement = "enumValue";
    }
    enumValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    enumValue.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    enumValue.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return enumValue;
})(commentable);

_md.enumValue = enumValue;
// element genericArgument
var genericArgument = (function (argument) {
    _inherits(genericArgument, argument);
    function genericArgument(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(genericArgument.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, genericArgument);
        this.wzElement = "genericArgument";
    }
    genericArgument.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    genericArgument.prototype.toJsonProperties = function(result) {
        _md.argument.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
    }
    genericArgument.prototype.toJsonChildren = function(result) {
        _md.argument.prototype.toJsonChildren.call(this, result);
    }
    genericArgument.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            this.defaultValue = child.v; return true;
        }
        ok = _md.argument.prototype.loadChild.call(this, child);
        return ok;
    }
    genericArgument.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return genericArgument;
})(argument);

_md.genericArgument = genericArgument;
// element ifArgument
var ifArgument = (function (argument) {
    _inherits(ifArgument, argument);
    function ifArgument(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ifArgument.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ifArgument);
        this.wzElement = "ifArgument";
    }
    ifArgument.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ifArgument.prototype.toJsonProperties = function(result) {
        _md.argument.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ifArgument.prototype.toJsonChildren = function(result) {
        _md.argument.prototype.toJsonChildren.call(this, result);
    }
    return ifArgument;
})(argument);

_md.ifArgument = ifArgument;
// element value
var value = (function (commentable) {
    _inherits(value, commentable);
    function value(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(value.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, value);
        this.wzElement = "value";
    }
    value.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    value.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
    }
    value.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    value.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            this.defaultValue = child.v; return true;
        }
        if (name === 'type') {
            this.type = child.v; return true;
        }
        ok = _md.commentable.prototype.loadChild.call(this, child);
        return ok;
    }
    value.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return value;
})(commentable);

_md.value = value;
// element stringValue
var stringValue = (function (value) {
    _inherits(stringValue, value);
    function stringValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stringValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stringValue);
        this.wzElement = "stringValue";
        // relation text
        this.texts = [];
    }
    stringValue.prototype.addText = function(name, sourceLineInfo) {
        var retval = new _md.text(name, sourceLineInfo);
        retval.wzParent = this;
        this.texts.push(retval);
        return retval;
    }
    stringValue.prototype.getText = function(name) {
        var found = null;
        this.texts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    stringValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stringValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stringValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.texts.forEach(item => 
        
            items.push(item.toJson())
        )
        result['texts'] = items;
    }
    stringValue.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.text, this.texts);
        }
        ok = _md.value.prototype.loadChild.call(this, child);
        return ok;
    }
    stringValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    stringValue.prototype.wzVerify = function(ctx) {
        this.texts.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.value.prototype.wzVerify.call(this, ctx);
    }
    stringValue.prototype.wzInitialize = function(ctx) {
        this.texts.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'String';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return stringValue;
})(value);

_md.stringValue = stringValue;
// element intValue
var intValue = (function (value) {
    _inherits(intValue, value);
    function intValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(intValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, intValue);
        this.wzElement = "intValue";
    }
    intValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    intValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    intValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
    }
    intValue.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'Int';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return intValue;
})(value);

_md.intValue = intValue;
// element floatValue
var floatValue = (function (value) {
    _inherits(floatValue, value);
    function floatValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(floatValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, floatValue);
        this.wzElement = "floatValue";
    }
    floatValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    floatValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    floatValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
    }
    floatValue.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'Float';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return floatValue;
})(value);

_md.floatValue = floatValue;
// element booleanValue
var booleanValue = (function (value) {
    _inherits(booleanValue, value);
    function booleanValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(booleanValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, booleanValue);
        this.wzElement = "booleanValue";
    }
    booleanValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    booleanValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    booleanValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
    }
    booleanValue.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'Boolean';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return booleanValue;
})(value);

_md.booleanValue = booleanValue;
// element IDValue
var IDValue = (function (value) {
    _inherits(IDValue, value);
    function IDValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(IDValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, IDValue);
        this.wzElement = "IDValue";
    }
    IDValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    IDValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    IDValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
    }
    IDValue.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'ID';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return IDValue;
})(value);

_md.IDValue = IDValue;
// element enumValue
var enumValue = (function (value) {
    _inherits(enumValue, value);
    function enumValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(enumValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, enumValue);
        this.wzElement = "enumValue";
        // relation objectField
        this.objectFields = [];
    }
    enumValue.prototype.addObjectField = function(name, sourceLineInfo) {
        var retval = new _md.objectField(name, sourceLineInfo);
        retval.wzParent = this;
        this.objectFields.push(retval);
        return retval;
    }
    enumValue.prototype.getObjectField = function(name) {
        var found = null;
        this.objectFields.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    enumValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    enumValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    enumValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.objectFields.forEach(item => 
        
            items.push(item.toJson())
        )
        result['objectFields'] = items;
    }
    enumValue.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.objectField, this.objectFields);
        }
        ok = _md.value.prototype.loadChild.call(this, child);
        return ok;
    }
    enumValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    enumValue.prototype.wzVerify = function(ctx) {
        this.objectFields.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.value.prototype.wzVerify.call(this, ctx);
    }
    enumValue.prototype.wzInitialize = function(ctx) {
        this.objectFields.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'enum';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return enumValue;
})(value);

_md.enumValue = enumValue;
// element objectValue
var objectValue = (function (value) {
    _inherits(objectValue, value);
    function objectValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(objectValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, objectValue);
        this.wzElement = "objectValue";
        // relation objectField
        this.objectFields = [];
    }
    objectValue.prototype.addObjectField = function(name, sourceLineInfo) {
        var retval = new _md.objectField(name, sourceLineInfo);
        retval.wzParent = this;
        this.objectFields.push(retval);
        return retval;
    }
    objectValue.prototype.getObjectField = function(name) {
        var found = null;
        this.objectFields.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    objectValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    objectValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    objectValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.objectFields.forEach(item => 
        
            items.push(item.toJson())
        )
        result['objectFields'] = items;
    }
    objectValue.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.objectField, this.objectFields);
        }
        ok = _md.value.prototype.loadChild.call(this, child);
        return ok;
    }
    objectValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    objectValue.prototype.wzVerify = function(ctx) {
        this.objectFields.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.value.prototype.wzVerify.call(this, ctx);
    }
    objectValue.prototype.wzInitialize = function(ctx) {
        this.objectFields.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'object';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return objectValue;
})(value);

_md.objectValue = objectValue;
// element objectField
var objectField = (function (value) {
    _inherits(objectField, value);
    function objectField(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(objectField.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, objectField);
        this.wzElement = "objectField";
        // relation value
        this.value = null;
    }
    objectField.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    objectField.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    objectField.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.value != null) {
            result['value'] = this.value.toJson();
        }
        else {
            result['value'] = null;
        }
    }
    objectField.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadOneToOne(child, _md.objectField, 'value');
        }
        if (name === '[') {
            return this.wzLoadOneToOne(child, _md.arrayValue, 'value');
        }
        if (name === '{') {
            return this.wzLoadOneToOne(child, _md.objectValue, 'value');
        }
        if (name === 'id') {
            return this.wzLoadOneToOne(child, _md.IDValue, 'value');
        }
        if (name === 'int') {
            return this.wzLoadOneToOne(child, _md.intValue, 'value');
        }
        if (name === 'enum') {
            return this.wzLoadOneToOne(child, _md.enumValue, 'value');
        }
        if (name === 'float') {
            return this.wzLoadOneToOne(child, _md.floatValue, 'value');
        }
        if (name === 'string') {
            return this.wzLoadOneToOne(child, _md.stringValue, 'value');
        }
        if (name === 'boolean') {
            return this.wzLoadOneToOne(child, _md.booleanValue, 'value');
        }
        ok = _md.value.prototype.loadChild.call(this, child);
        return ok;
    }
    objectField.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    objectField.prototype.wzVerify = function(ctx) {
        if (this.value != null) {
            this.value.wzVerify(ctx);
        }
        _md.value.prototype.wzVerify.call(this, ctx);
    }
    objectField.prototype.wzInitialize = function(ctx) {
        if (this.value != null) {
            this.value.wzInitialize(ctx);
        }
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return objectField;
})(value);

_md.objectField = objectField;
// element arrayValue
var arrayValue = (function (value) {
    _inherits(arrayValue, value);
    function arrayValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(arrayValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, arrayValue);
        this.wzElement = "arrayValue";
        // relation value
        this.values = [];
    }
    arrayValue.prototype.getValue = function(name) {
        var found = null;
        this.values.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    arrayValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    arrayValue.prototype.toJsonProperties = function(result) {
        _md.value.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    arrayValue.prototype.toJsonChildren = function(result) {
        _md.value.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.values.forEach(item => 
        
            items.push(item.toJson())
        )
        result['values'] = items;
    }
    arrayValue.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.objectField, this.values);
        }
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.arrayValue, this.values);
        }
        if (name === '{') {
            return this.wzLoadToChildColl(child, _md.objectValue, this.values);
        }
        if (name === 'id') {
            return this.wzLoadToChildColl(child, _md.IDValue, this.values);
        }
        if (name === 'int') {
            return this.wzLoadToChildColl(child, _md.intValue, this.values);
        }
        if (name === 'enum') {
            return this.wzLoadToChildColl(child, _md.enumValue, this.values);
        }
        if (name === 'float') {
            return this.wzLoadToChildColl(child, _md.floatValue, this.values);
        }
        if (name === 'string') {
            return this.wzLoadToChildColl(child, _md.stringValue, this.values);
        }
        if (name === 'boolean') {
            return this.wzLoadToChildColl(child, _md.booleanValue, this.values);
        }
        ok = _md.value.prototype.loadChild.call(this, child);
        return ok;
    }
    arrayValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    arrayValue.prototype.wzVerify = function(ctx) {
        this.values.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.value.prototype.wzVerify.call(this, ctx);
    }
    arrayValue.prototype.wzInitialize = function(ctx) {
        this.values.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.graphql\.wizzi-override\lib\wizzi\schemas\graphql.wfschema.ittf
            utc time: Sat, 08 Apr 2023 04:30:16 GMT
        */
        this.type = 'array';
        
        _md.value.prototype.wzInitialize.call(this, ctx);
    }
    return arrayValue;
})(value);

_md.arrayValue = arrayValue;
// element nameType
var nameType = (function (basenode) {
    _inherits(nameType, basenode);
    function nameType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(nameType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, nameType);
        this.wzElement = "nameType";
    }
    nameType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    nameType.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    nameType.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
    }
    nameType.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    nameType.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return nameType;
})(basenode);

_md.nameType = nameType;
// element stringNameType
var stringNameType = (function (nameType) {
    _inherits(stringNameType, nameType);
    function stringNameType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(stringNameType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, stringNameType);
        this.wzElement = "stringNameType";
    }
    stringNameType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    stringNameType.prototype.toJsonProperties = function(result) {
        _md.nameType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    stringNameType.prototype.toJsonChildren = function(result) {
        _md.nameType.prototype.toJsonChildren.call(this, result);
    }
    return stringNameType;
})(nameType);

_md.stringNameType = stringNameType;
// element intNameType
var intNameType = (function (nameType) {
    _inherits(intNameType, nameType);
    function intNameType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(intNameType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, intNameType);
        this.wzElement = "intNameType";
    }
    intNameType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    intNameType.prototype.toJsonProperties = function(result) {
        _md.nameType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    intNameType.prototype.toJsonChildren = function(result) {
        _md.nameType.prototype.toJsonChildren.call(this, result);
    }
    return intNameType;
})(nameType);

_md.intNameType = intNameType;
// element floatNameType
var floatNameType = (function (nameType) {
    _inherits(floatNameType, nameType);
    function floatNameType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(floatNameType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, floatNameType);
        this.wzElement = "floatNameType";
    }
    floatNameType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    floatNameType.prototype.toJsonProperties = function(result) {
        _md.nameType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    floatNameType.prototype.toJsonChildren = function(result) {
        _md.nameType.prototype.toJsonChildren.call(this, result);
    }
    return floatNameType;
})(nameType);

_md.floatNameType = floatNameType;
// element booleanNameType
var booleanNameType = (function (nameType) {
    _inherits(booleanNameType, nameType);
    function booleanNameType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(booleanNameType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, booleanNameType);
        this.wzElement = "booleanNameType";
    }
    booleanNameType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    booleanNameType.prototype.toJsonProperties = function(result) {
        _md.nameType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    booleanNameType.prototype.toJsonChildren = function(result) {
        _md.nameType.prototype.toJsonChildren.call(this, result);
    }
    return booleanNameType;
})(nameType);

_md.booleanNameType = booleanNameType;
// element DateNameType
var DateNameType = (function (nameType) {
    _inherits(DateNameType, nameType);
    function DateNameType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(DateNameType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, DateNameType);
        this.wzElement = "DateNameType";
    }
    DateNameType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    DateNameType.prototype.toJsonProperties = function(result) {
        _md.nameType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    DateNameType.prototype.toJsonChildren = function(result) {
        _md.nameType.prototype.toJsonChildren.call(this, result);
    }
    return DateNameType;
})(nameType);

_md.DateNameType = DateNameType;
// element refNameType
var refNameType = (function (nameType) {
    _inherits(refNameType, nameType);
    function refNameType(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(refNameType.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, refNameType);
        this.wzElement = "refNameType";
    }
    refNameType.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    refNameType.prototype.toJsonProperties = function(result) {
        _md.nameType.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    refNameType.prototype.toJsonChildren = function(result) {
        _md.nameType.prototype.toJsonChildren.call(this, result);
    }
    return refNameType;
})(nameType);

_md.refNameType = refNameType;
// element implement
var implement = (function (commentable) {
    _inherits(implement, commentable);
    function implement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(implement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, implement);
        this.wzElement = "implement";
    }
    implement.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    implement.prototype.toJsonProperties = function(result) {
        _md.commentable.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    implement.prototype.toJsonChildren = function(result) {
        _md.commentable.prototype.toJsonChildren.call(this, result);
    }
    return implement;
})(commentable);

_md.implement = implement;
// element objectTypeDef
var objectTypeDef = (function (typeDef) {
    _inherits(objectTypeDef, typeDef);
    function objectTypeDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(objectTypeDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, objectTypeDef);
        this.wzElement = "objectTypeDef";
        // relation fieldDef
        this.fieldDefs = [];
    }
    objectTypeDef.prototype.addFieldDef = function(name, sourceLineInfo) {
        var retval = new _md.fieldDef(name, sourceLineInfo);
        retval.wzParent = this;
        this.fieldDefs.push(retval);
        return retval;
    }
    objectTypeDef.prototype.getFieldDef = function(name) {
        var found = null;
        this.fieldDefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    objectTypeDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    objectTypeDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    objectTypeDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.fieldDefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['fieldDefs'] = items;
    }
    objectTypeDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '.') {
            return this.wzLoadToChildColl(child, _md.fieldDef, this.fieldDefs);
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    objectTypeDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    objectTypeDef.prototype.wzVerify = function(ctx) {
        this.fieldDefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    objectTypeDef.prototype.wzInitialize = function(ctx) {
        this.fieldDefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return objectTypeDef;
})(typeDef);

_md.objectTypeDef = objectTypeDef;
// element inputValueDef
var inputValueDef = (function (typeDef) {
    _inherits(inputValueDef, typeDef);
    function inputValueDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(inputValueDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, inputValueDef);
        this.wzElement = "inputValueDef";
        // relation nameType
        this.nameType = null;
    }
    inputValueDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    inputValueDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.defaultValue)) {
            result["defaultValue"] = this.defaultValue;
        }
    }
    inputValueDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.nameType != null) {
            result['nameType'] = this.nameType.toJson();
        }
        else {
            result['nameType'] = null;
        }
    }
    inputValueDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '=') {
            this.defaultValue = child.v; return true;
        }
        if (name === ':int') {
            return this.wzLoadOneToOne(child, _md.intNameType, 'nameType');
        }
        else if (name === ':ref') {
            return this.wzLoadOneToOne(child, _md.refNameType, 'nameType');
        }
        if (name === ':date') {
            return this.wzLoadOneToOne(child, _md.DateNameType, 'nameType');
        }
        if (name === ':float') {
            return this.wzLoadOneToOne(child, _md.floatNameType, 'nameType');
        }
        if (name === ':string') {
            return this.wzLoadOneToOne(child, _md.stringNameType, 'nameType');
        }
        if (name === ':boolean') {
            return this.wzLoadOneToOne(child, _md.booleanNameType, 'nameType');
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    inputValueDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    inputValueDef.prototype.wzVerify = function(ctx) {
        if (this.nameType != null) {
            this.nameType.wzVerify(ctx);
        }
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    inputValueDef.prototype.wzInitialize = function(ctx) {
        if (this.nameType != null) {
            this.nameType.wzInitialize(ctx);
        }
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return inputValueDef;
})(typeDef);

_md.inputValueDef = inputValueDef;
// element fieldDef
var fieldDef = (function (typeDef) {
    _inherits(fieldDef, typeDef);
    function fieldDef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(fieldDef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, fieldDef);
        this.wzElement = "fieldDef";
        // relation nameType
        this.nameType = null;
        // relation inputValueDef
        this.inputValueDefs = [];
    }
    fieldDef.prototype.addInputValueDef = function(name, sourceLineInfo) {
        var retval = new _md.inputValueDef(name, sourceLineInfo);
        retval.wzParent = this;
        this.inputValueDefs.push(retval);
        return retval;
    }
    fieldDef.prototype.getInputValueDef = function(name) {
        var found = null;
        this.inputValueDefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    fieldDef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    fieldDef.prototype.toJsonProperties = function(result) {
        _md.typeDef.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    fieldDef.prototype.toJsonChildren = function(result) {
        _md.typeDef.prototype.toJsonChildren.call(this, result);
        var items, item;
        if (this.nameType != null) {
            result['nameType'] = this.nameType.toJson();
        }
        else {
            result['nameType'] = null;
        }
        items = [];
        this.inputValueDefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['inputValueDefs'] = items;
    }
    fieldDef.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.inputValueDef, this.inputValueDefs);
        }
        if (name === ':int') {
            return this.wzLoadOneToOne(child, _md.intNameType, 'nameType');
        }
        else if (name === ':ref') {
            return this.wzLoadOneToOne(child, _md.refNameType, 'nameType');
        }
        if (name === ':date') {
            return this.wzLoadOneToOne(child, _md.DateNameType, 'nameType');
        }
        if (name === ':float') {
            return this.wzLoadOneToOne(child, _md.floatNameType, 'nameType');
        }
        if (name === ':string') {
            return this.wzLoadOneToOne(child, _md.stringNameType, 'nameType');
        }
        if (name === ':boolean') {
            return this.wzLoadOneToOne(child, _md.booleanNameType, 'nameType');
        }
        ok = _md.typeDef.prototype.loadChild.call(this, child);
        return ok;
    }
    fieldDef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    fieldDef.prototype.wzVerify = function(ctx) {
        if (this.nameType != null) {
            this.nameType.wzVerify(ctx);
        }
        this.inputValueDefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.typeDef.prototype.wzVerify.call(this, ctx);
    }
    fieldDef.prototype.wzInitialize = function(ctx) {
        if (this.nameType != null) {
            this.nameType.wzInitialize(ctx);
        }
        this.inputValueDefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.typeDef.prototype.wzInitialize.call(this, ctx);
    }
    return fieldDef;
})(typeDef);

_md.fieldDef = fieldDef;
// element objectTypeExt
var objectTypeExt = (function (basenode) {
    _inherits(objectTypeExt, basenode);
    function objectTypeExt(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(objectTypeExt.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, objectTypeExt);
        this.wzElement = "objectTypeExt";
        // relation implement
        this.ximplements = [];
    }
    objectTypeExt.prototype.addImplement = function(name, sourceLineInfo) {
        var retval = new _md.implement(name, sourceLineInfo);
        retval.wzParent = this;
        this.ximplements.push(retval);
        return retval;
    }
    objectTypeExt.prototype.getImplement = function(name) {
        var found = null;
        this.ximplements.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    objectTypeExt.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    objectTypeExt.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    objectTypeExt.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.ximplements.forEach(item => 
        
            items.push(item.toJson())
        )
        result['ximplements'] = items;
    }
    objectTypeExt.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '&') {
            return this.wzLoadToChildColl(child, _md.implement, this.ximplements);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    objectTypeExt.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.graphqlModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    objectTypeExt.prototype.wzVerify = function(ctx) {
        this.ximplements.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    objectTypeExt.prototype.wzInitialize = function(ctx) {
        this.ximplements.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return objectTypeExt;
})(basenode);

_md.objectTypeExt = objectTypeExt;
_md.__tagElementMapping = { '+': 'text', '#': 'comment', '%': 'genericDirective', '%list': 'isListDirective', '%required': 'isRequiredDirective', '%deprecated': 'isDeprecatedDirective', '%skip': 'skipDirective', '%include': 'includeDirective', 'schema': 'schemaDef', ':query': 'queryType', ':mutation': 'mutationType', ':subscription': 'subscriptionType', ':enum': 'enumType', 'type': 'objectTypeDef', '@': 'inputValueDef', '.': 'fieldDef', '{': 'selectionSet', 'on': 'directiveLocation', 'if': 'ifArgument', 'string': 'stringVar', 'int': 'intVar', 'float': 'floatVar', 'boolean': 'booleanVar', '...': 'fragmentSpread', '...on': 'inlineFragment', 'ID': 'IDValue', 'enum': 'enumValue', '[': 'arrayValue', '\"\"\"': 'undefined', ':string': 'stringNameType', ':int': 'intNameType', ':float': 'floatNameType', ':boolean': 'booleanNameType', ':Date': 'DateNameType', ':ref': 'refNameType', '&': 'implement' };
// model/replaceUnknownElement( )
var graphqlModelException = (function () {
    function graphqlModelException(message, node, instance) {
        _classCallCheck(this, graphqlModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    graphqlModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: graphqlModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return graphqlModelException;
})();

_md.graphqlModelException = graphqlModelException;
var graphqlContext = (function () {
    function graphqlContext() {
        _classCallCheck(this, graphqlContext);
        this.validationErrors = [];
    }
    graphqlContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    graphqlContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    return graphqlContext;
})();

_md.graphqlContext = graphqlContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}

