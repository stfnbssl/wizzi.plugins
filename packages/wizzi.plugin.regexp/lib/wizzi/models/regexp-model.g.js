/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi\node_modules\wizzi-legacy-v5\lib\artifacts\js\module\gen\main.js
    primary source IttfDocument: c:\my\wizzi\stfnbssl\wizzi\packages\wizzi-core\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
    utc time: Thu, 02 Mar 2023 17:00:43 GMT
*/
'use strict';
// generated by v5-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
/**
     Schema wide declarations
*/
var builtInElements = {
    space: '\\s', 
    'not-space': '\\S', 
    word: '\\w', 
    'not-word': '\\W', 
    digit: '\\d', 
    'not-digit': '\\D', 
    'word-boundary': '\\b', 
    'not-word-boundary': '\\B', 
    tab: '\\t', 
    crlf: '\\r\\f', 
    'carriage-return': '\\r', 
    'form-feed': '\\f'
};
var _md = module.exports = {};
var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var regexpBase = (function () {
    function regexpBase(name, sourceLineInfo) {
        _classCallCheck(this, regexpBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    regexpBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    regexpBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    regexpBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
            }, true);
    }
    regexpBase.prototype.wzVerify = function() {
    }
    regexpBase.prototype.wzInitialize = function() {
    }
    regexpBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    regexpBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    regexpBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    regexpBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node);
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    regexpBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    regexpBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    regexpBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    regexpBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    regexpBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this);
        }
        fromColl.splice(index, 1);
    }
    regexpBase.prototype.error = function(message, node) {
        throw new _md.regexpModelException(message, node, this);
    }
    regexpBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    regexpBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach((item) => {
                children.push(item.toJson());
            });
            result.wzChildren = children;
        }
    }
    return regexpBase;
})();

_md.regexpBase = regexpBase;
/**
    element node
     A tree node with unlimited depth.
     Is the schema base node.
     In itself works as a comment line.
*/
var node = (function (regexpBase) {
    _inherits(node, regexpBase);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
        // relation node
        this.nodes = [];
    }
    node.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    node.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        });
        return found;
    }
    node.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    node.prototype.toJsonProperties = function(result) {
        _md.regexpBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    node.prototype.toJsonChildren = function(result) {
        _md.regexpBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.nodes.forEach((item) => {
            items.push(item.toJson());
        });
        result['nodes'] = items;
    }
    node.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'nodes') {
            return this.wzLoadToChildColl(child, _md.doubleBar, this.nodes);
        }
        else if (name === 'return this.wzLoadToChildColl(child, _md.doubleBar, this.nodes)') {
            return this.wzLoadToChildColl(child, _md.doubleBar, this.nodes);
        }
        else if (name === 'return this.wzLoadToChildColl(child, _md.doubleBar, this.nodes)') {
            return this.wzLoadToChildColl(child, _md.doubleBar, this.nodes);
        }
        if (name === '&') {
            return this.wzLoadToChildColl(child, _md.ampersand, this.nodes);
        }
        if (name === '(') {
            return this.wzLoadToChildColl(child, _md.paren, this.nodes);
        }
        if (name === '*') {
            return this.wzLoadToChildColl(child, _md.asterix, this.nodes);
        }
        if (name === '+') {
            return this.wzLoadToChildColl(child, _md.plus, this.nodes);
        }
        if (name === ':') {
            return this.wzLoadToChildColl(child, _md.colon, this.nodes);
        }
        if (name === '?') {
            return this.wzLoadToChildColl(child, _md.questionMark, this.nodes);
        }
        if (name === '[') {
            return this.wzLoadToChildColl(child, _md.bracket, this.nodes);
        }
        if (name === 'e') {
            return this.wzLoadToChildColl(child, _md.regexpElement, this.nodes);
        }
        if (name === '{') {
            return this.wzLoadToChildColl(child, _md.graph, this.nodes);
        }
        if (name === '|') {
            return this.wzLoadToChildColl(child, _md.bar, this.nodes);
        }
        if (name === '&&') {
            return this.wzLoadToChildColl(child, _md.doubleAmpersand, this.nodes);
        }
        if (name === '(:') {
            return this.wzLoadToChildColl(child, _md.parenColon, this.nodes);
        }
        if (name === '::') {
            return this.wzLoadToChildColl(child, _md.doubleColon, this.nodes);
        }
        if (name === '[?') {
            return this.wzLoadToChildColl(child, _md.bracketQuestionMark, this.nodes);
        }
        else if (name === '[+') {
            return this.wzLoadToChildColl(child, _md.bracketPlus, this.nodes);
        }
        else if (name === '[#') {
            return this.wzLoadToChildColl(child, _md.bracketHashmark, this.nodes);
        }
        else if (name === '[^') {
            return this.wzLoadToChildColl(child, _md.bracketCap, this.nodes);
        }
        if (name === '^$') {
            return this.wzLoadToChildColl(child, _md.capDollar, this.nodes);
        }
        if (name === 're') {
            return this.wzLoadToChildColl(child, _md.executableRegExp, this.nodes);
        }
        if (name === '###') {
            return this.wzLoadToChildColl(child, _md.node, this.nodes);
        }
        if (name === '(?=') {
            return this.wzLoadToChildColl(child, _md.parenQuestionMarkEqual, this.nodes);
        }
        else if (name === '(?!') {
            return this.wzLoadToChildColl(child, _md.parenQuestionMarkExlamationPoint, this.nodes);
        }
        if (name === '[&?') {
            return this.wzLoadToChildColl(child, _md.ampersandQuestionmark, this.nodes);
        }
        else if (name === '[&+') {
            return this.wzLoadToChildColl(child, _md.ampersandPlus, this.nodes);
        }
        else if (name === '[&#') {
            return this.wzLoadToChildColl(child, _md.ampersand, this.nodes);
        }
        if (name === 'test') {
            return this.wzLoadToChildColl(child, _md.test, this.nodes);
        }
        if (name === 'blank') {
            return this.wzLoadToChildColl(child, _md.blank, this.nodes);
        }
        if (name === 'regexp') {
            return this.wzLoadToChildColl(child, _md.regexp, this.nodes);
        }
        if (name === 'expected') {
            return this.wzLoadToChildColl(child, _md.expected, this.nodes);
        }
        return false;
    }
    node.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.regexpModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    node.prototype.wzVerify = function(ctx) {
        this.nodes.forEach((item) => {
            item.wzVerify(ctx);
        });
        _md.regexpBase.prototype.wzVerify.call(this, ctx);
    }
    node.prototype.wzInitialize = function(ctx) {
        this.nodes.forEach((item) => {
            item.wzInitialize(ctx);
        });
        _md.regexpBase.prototype.wzInitialize.call(this, ctx);
    }
    node.prototype.toRegExp = function(sb) {
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.toRegExp(sb);
        }
    }
    node.prototype.getRegExpString = function() {
        var sb = [];
        this.toRegExp(sb);
        return sb.join('');
    }
    return node;
})(regexpBase);

_md.node = node;
// element regexp
var regexp = (function (node) {
    _inherits(regexp, node);
    function regexp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(regexp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, regexp);
        this.wzElement = "regexp";
    }
    regexp.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    regexp.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    regexp.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    regexp.prototype.wzInitialize = function(ctx) {
        this.elements = {};
        this.executables = {};
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    regexp.prototype.exec = function(name, string) {
        if (this.executables[name]) {
            this.executables[name].exec(string);
        }
        else {
            console.log('Executable not found: ', name);
        }
    }
    regexp.prototype.execTests = function() {
        var results = [];
        for (var k in this.executables) {
            var i, i_items=this.executables[k].execTests(), i_len=this.executables[k].execTests().length, r;
            for (i=0; i<i_len; i++) {
                r = this.executables[k].execTests()[i];
                results.push(r);
            }
        }
        return results;
    }
    return regexp;
})(node);

_md.regexp = regexp;
// element executableRegExp
var executableRegExp = (function (node) {
    _inherits(executableRegExp, node);
    function executableRegExp(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(executableRegExp.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, executableRegExp);
        this.wzElement = "executableRegExp";
    }
    executableRegExp.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    executableRegExp.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    executableRegExp.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return executableRegExp;
})(node);

_md.executableRegExp = executableRegExp;
// element regexpElement
var regexpElement = (function (node) {
    _inherits(regexpElement, node);
    function regexpElement(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(regexpElement.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, regexpElement);
        this.wzElement = "regexpElement";
    }
    regexpElement.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    regexpElement.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    regexpElement.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return regexpElement;
})(node);

_md.regexpElement = regexpElement;
// element test
var test = (function (node) {
    _inherits(test, node);
    function test(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(test.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, test);
        this.wzElement = "test";
    }
    test.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    test.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    test.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    test.prototype.wzInitialize = function(ctx) {
        this.expected = null;
        if (this.nodes.length === 1 && this.nodes[0].wzElement === 'expected') {
            this.expected = this.nodes[0].toValue();
        }
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    test.prototype.isExpected = function(results) {
        if (this.expected == null) {
            return null;
        }
        if (!results) {
            if (this.expected === 'null') {
                return true;
            }
            else {
                return false;
            }
        }
        if (verify.isArray(this.expected)) {
            if (results.length != this.expected.length) {
                return false;
            }
            for (var i=0; i<results.length; i++) {
                if (results[i] !== this.expected[i]) {
                    return false;
                }
            }
            return true;
        }
        else {
            return JSON.stringify(results) === JSON.stringify(this.expected);
        }
    }
    return test;
})(node);

_md.test = test;
// element expected
var expected = (function (node) {
    _inherits(expected, node);
    function expected(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(expected.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, expected);
        this.wzElement = "expected";
        this.separator = ",";
    }
    expected.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    expected.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.separator)) {
            result["separator"] = this.separator;
        }
    }
    expected.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    expected.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'separator') {
            this.separator = child.v; return true;
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    expected.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.regexpModelException("Tag not recognized: " + item.n, item, this);
            }
        });
    }
    expected.prototype.toValue = function() {
        if (verify.isEmpty(this.wzName)) {
            if (this.nodes.length === 0) {
                return null;
            }
            else {
                return this.nodes[0].toValue().value;
            }
        }
        else {
            if (this.wzName === 'null') {
                return this.wzName;
            }
            return this.wzName.trim().split(this.separator);
        }
    }
    return expected;
})(node);

_md.expected = expected;
// element bracket
var bracket = (function (node) {
    _inherits(bracket, node);
    function bracket(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bracket.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bracket);
        this.wzElement = "bracket";
    }
    bracket.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bracket.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bracket.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return bracket;
})(node);

_md.bracket = bracket;
// element bracketQuestionMark
var bracketQuestionMark = (function (node) {
    _inherits(bracketQuestionMark, node);
    function bracketQuestionMark(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bracketQuestionMark.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bracketQuestionMark);
        this.wzElement = "bracketQuestionMark";
    }
    bracketQuestionMark.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bracketQuestionMark.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bracketQuestionMark.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return bracketQuestionMark;
})(node);

_md.bracketQuestionMark = bracketQuestionMark;
// element bracketPlus
var bracketPlus = (function (node) {
    _inherits(bracketPlus, node);
    function bracketPlus(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bracketPlus.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bracketPlus);
        this.wzElement = "bracketPlus";
    }
    bracketPlus.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bracketPlus.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bracketPlus.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return bracketPlus;
})(node);

_md.bracketPlus = bracketPlus;
// element bracketHashmark
var bracketHashmark = (function (node) {
    _inherits(bracketHashmark, node);
    function bracketHashmark(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bracketHashmark.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bracketHashmark);
        this.wzElement = "bracketHashmark";
    }
    bracketHashmark.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bracketHashmark.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bracketHashmark.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return bracketHashmark;
})(node);

_md.bracketHashmark = bracketHashmark;
// element ampersand
var ampersand = (function (node) {
    _inherits(ampersand, node);
    function ampersand(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ampersand.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ampersand);
        this.wzElement = "ampersand";
    }
    ampersand.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ampersand.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ampersand.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return ampersand;
})(node);

_md.ampersand = ampersand;
// element ampersandQuestionmark
var ampersandQuestionmark = (function (node) {
    _inherits(ampersandQuestionmark, node);
    function ampersandQuestionmark(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ampersandQuestionmark.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ampersandQuestionmark);
        this.wzElement = "ampersandQuestionmark";
    }
    ampersandQuestionmark.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ampersandQuestionmark.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ampersandQuestionmark.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return ampersandQuestionmark;
})(node);

_md.ampersandQuestionmark = ampersandQuestionmark;
// element ampersandPlus
var ampersandPlus = (function (node) {
    _inherits(ampersandPlus, node);
    function ampersandPlus(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ampersandPlus.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ampersandPlus);
        this.wzElement = "ampersandPlus";
    }
    ampersandPlus.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ampersandPlus.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ampersandPlus.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return ampersandPlus;
})(node);

_md.ampersandPlus = ampersandPlus;
// element ampersand
var ampersand = (function (node) {
    _inherits(ampersand, node);
    function ampersand(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(ampersand.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, ampersand);
        this.wzElement = "ampersand";
    }
    ampersand.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    ampersand.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    ampersand.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return ampersand;
})(node);

_md.ampersand = ampersand;
// element asterix
var asterix = (function (node) {
    _inherits(asterix, node);
    function asterix(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(asterix.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, asterix);
        this.wzElement = "asterix";
    }
    asterix.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    asterix.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    asterix.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return asterix;
})(node);

_md.asterix = asterix;
// element plus
var plus = (function (node) {
    _inherits(plus, node);
    function plus(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(plus.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, plus);
        this.wzElement = "plus";
    }
    plus.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    plus.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    plus.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return plus;
})(node);

_md.plus = plus;
// element questionMark
var questionMark = (function (node) {
    _inherits(questionMark, node);
    function questionMark(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(questionMark.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, questionMark);
        this.wzElement = "questionMark";
    }
    questionMark.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    questionMark.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    questionMark.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return questionMark;
})(node);

_md.questionMark = questionMark;
// element colon
var colon = (function (node) {
    _inherits(colon, node);
    function colon(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(colon.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, colon);
        this.wzElement = "colon";
    }
    colon.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    colon.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    colon.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return colon;
})(node);

_md.colon = colon;
// element doubleColon
var doubleColon = (function (node) {
    _inherits(doubleColon, node);
    function doubleColon(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(doubleColon.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, doubleColon);
        this.wzElement = "doubleColon";
    }
    doubleColon.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    doubleColon.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    doubleColon.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return doubleColon;
})(node);

_md.doubleColon = doubleColon;
// element bar
var bar = (function (node) {
    _inherits(bar, node);
    function bar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bar);
        this.wzElement = "bar";
    }
    bar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bar.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bar.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return bar;
})(node);

_md.bar = bar;
// element doubleBar
var doubleBar = (function (node) {
    _inherits(doubleBar, node);
    function doubleBar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(doubleBar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, doubleBar);
        this.wzElement = "doubleBar";
    }
    doubleBar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    doubleBar.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    doubleBar.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return doubleBar;
})(node);

_md.doubleBar = doubleBar;
// element doubleAmpersand
var doubleAmpersand = (function (node) {
    _inherits(doubleAmpersand, node);
    function doubleAmpersand(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(doubleAmpersand.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, doubleAmpersand);
        this.wzElement = "doubleAmpersand";
    }
    doubleAmpersand.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    doubleAmpersand.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    doubleAmpersand.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return doubleAmpersand;
})(node);

_md.doubleAmpersand = doubleAmpersand;
// element paren
var paren = (function (node) {
    _inherits(paren, node);
    function paren(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(paren.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, paren);
        this.wzElement = "paren";
    }
    paren.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    paren.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    paren.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return paren;
})(node);

_md.paren = paren;
// element graph
var graph = (function (node) {
    _inherits(graph, node);
    function graph(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(graph.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, graph);
        this.wzElement = "graph";
    }
    graph.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    graph.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    graph.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return graph;
})(node);

_md.graph = graph;
// element parenQuestionMarkEqual
var parenQuestionMarkEqual = (function (node) {
    _inherits(parenQuestionMarkEqual, node);
    function parenQuestionMarkEqual(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(parenQuestionMarkEqual.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, parenQuestionMarkEqual);
        this.wzElement = "parenQuestionMarkEqual";
    }
    parenQuestionMarkEqual.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    parenQuestionMarkEqual.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    parenQuestionMarkEqual.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return parenQuestionMarkEqual;
})(node);

_md.parenQuestionMarkEqual = parenQuestionMarkEqual;
// element parenQuestionMarkExlamationPoint
var parenQuestionMarkExlamationPoint = (function (node) {
    _inherits(parenQuestionMarkExlamationPoint, node);
    function parenQuestionMarkExlamationPoint(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(parenQuestionMarkExlamationPoint.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, parenQuestionMarkExlamationPoint);
        this.wzElement = "parenQuestionMarkExlamationPoint";
    }
    parenQuestionMarkExlamationPoint.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    parenQuestionMarkExlamationPoint.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    parenQuestionMarkExlamationPoint.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return parenQuestionMarkExlamationPoint;
})(node);

_md.parenQuestionMarkExlamationPoint = parenQuestionMarkExlamationPoint;
// element parenColon
var parenColon = (function (node) {
    _inherits(parenColon, node);
    function parenColon(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(parenColon.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, parenColon);
        this.wzElement = "parenColon";
    }
    parenColon.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    parenColon.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    parenColon.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return parenColon;
})(node);

_md.parenColon = parenColon;
// element bracketCap
var bracketCap = (function (node) {
    _inherits(bracketCap, node);
    function bracketCap(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(bracketCap.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, bracketCap);
        this.wzElement = "bracketCap";
    }
    bracketCap.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    bracketCap.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    bracketCap.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return bracketCap;
})(node);

_md.bracketCap = bracketCap;
// element capDollar
var capDollar = (function (node) {
    _inherits(capDollar, node);
    function capDollar(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(capDollar.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, capDollar);
        this.wzElement = "capDollar";
    }
    capDollar.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    capDollar.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    capDollar.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    return capDollar;
})(node);

_md.capDollar = capDollar;
// element blank
var blank = (function (node) {
    _inherits(blank, node);
    function blank(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(blank.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, blank);
        this.wzElement = "blank";
    }
    blank.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    blank.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    blank.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
    }
    blank.prototype.toRegExp = function(sb) {
        var num = verify.isNumber(this.wzName) ? verify.convert(this.wzName, 'integer') : 1;
        sb.push(new Array(num + 1).join(' '));
    }
    return blank;
})(node);

_md.blank = blank;
_md.__tagElementMapping = { '###': 'node', 're': 'executableRegExp', 'e': 'regexpElement', '[': 'bracket', '[?': 'bracketQuestionMark', '[+': 'bracketPlus', '[#': 'bracketHashmark', '&': 'ampersand', '[&?': 'ampersandQuestionmark', '[&+': 'ampersandPlus', '[&#': 'ampersand', '*': 'asterix', '+': 'plus', '?': 'questionMark', ':': 'colon', '::': 'doubleColon', '|': 'bar', '': 'doubleBar', '&&': 'doubleAmpersand', '(': 'paren', '{': 'graph', '(?=': 'parenQuestionMarkEqual', '(?!': 'parenQuestionMarkExlamationPoint', '(:': 'parenColon', '[^': 'bracketCap', '^$': 'capDollar' };
// model/replaceUnknownElement( )
var regexpModelException = (function () {
    function regexpModelException(message, node, instance) {
        _classCallCheck(this, regexpModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message);
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.error('message', this.message);
        this.stack = (new Error()).stack;
    }
    regexpModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: regexpModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return regexpModelException;
})();

_md.regexpModelException = regexpModelException;
var regexpContext = (function () {
    function regexpContext() {
        _classCallCheck(this, regexpContext);
        this.validationErrors = [];
    }
    regexpContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    regexpContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at);
    }
    return regexpContext;
})();

_md.regexpContext = regexpContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function wzInitialize() {
    var root = this.wzRoot();
    if (root.executables[this.wzName]) {
        throw new Error('Duplicated executableRegExp: ' + this.wzName);
    }
    root.executables[this.wzName] = this;
}
function exec(string) {
    var re = this.toRegExp();
    var result = re.exec(string);
    return result;
}
function execTests() {
    var results = [];
    var i, i_items=this.tests, i_len=this.tests.length, t;
    for (i=0; i<i_len; i++) {
        t = this.tests[i];
        var r = this.exec(t.wzName);
        results.push({
            name: this.wzName, 
            regexp: this.__regexp, 
            string: t.wzName, 
            result: this.named ? r.captures : r, 
            expected: t.expected, 
            isExpected: t.isExpected(this.named ? r.captures : r)
        });
    }
    return results;
}
function toRegExp() {
    if (!this.__regexp) {
        var sb = [];
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.toRegExp(sb);
        }
        this.__regexp = sb.join('');
    }
    if (this.named) {
        return verify.namedRegExp(new RegExp(this.__regexp, this.flags));
    }
    else {
        return verify.getAllRegExp(new RegExp(this.__regexp, this.flags));
    }
}
function wzInitialize() {
    var root = this.wzRoot();
    if (root.elements[this.wzName]) {
        throw new Error('Duplicated regexpElement: ' + this.wzName);
    }
    root.elements[this.wzName] = this;
}
function toRegExp(sb) {
    var i, i_items=this.nodes, i_len=this.nodes.length, item;
    for (i=0; i<i_len; i++) {
        item = this.nodes[i];
        if (i > 0) {
            sb.push(' ');
        }
        item.toRegExp(sb);
    }
}
function toValue() {
    var ret = {
        name: this.wzName, 
        value: []
    };
    var i, i_items=this.nodes, i_len=this.nodes.length, item;
    for (i=0; i<i_len; i++) {
        item = this.nodes[i];
        var v = item.toValue();
        ret.value.push(v.name + ( v.value ? ' ' + v.value : '' ));
    }
    return ret;
}
function toRegExp(sb) {
    nodeToRegExp(this, sb, '*');
}
function toRegExp(sb) {
    nodeToRegExp(this, sb, '+');
}
function toRegExp(sb) {
    var s = getReFromName(this);
    nodeToRegExp(this, sb, '?');
}
function toRegExp(sb) {
    var s = getReFromName(this);
    if (verify.isNotEmpty(s)) {
        sb.push(s);
    }
    else {
        sb.push('unknown colon wzName: ' + this.wzName);
    }
}
function toValue() {
    var v = verify.parseNameValue(this.wzName);
    return {
            name: v.name(), 
            value: v.value()
        };
}
function toRegExp(sb) {
    var l = this.nodes[0].getRegExpString();
    var r = this.nodes[1].getRegExpString();
    sb.push(enclose(l));
    sb.push('|');
    sb.push(enclose(r));
}
function toRegExp(sb) {
    var s = getReFromName(this);
    if (verify.isNotEmpty(s)) {
        sb.push('(' + s + ')');
    }
    else {
        s = getReFromChildren(this);
        if (verify.isNotEmpty(s)) {
            sb.push('(' + s + ')');
        }
    }
}
function toRegExp(sb) {
    var s = getReFromChildren(this);
    if (verify.isNotEmpty(s)) {
        sb.push(s);
    }
    sb.push('{' + this.wzName + '}');
}
function toValue() {
    var ret = {
        name: this.wzName, 
        value: {}
    };
    var i, i_items=this.nodes, i_len=this.nodes.length, item;
    for (i=0; i<i_len; i++) {
        item = this.nodes[i];
        var v = item.toValue();
        ret.value[v.name] = v.value;
    }
    return ret;
}
function toRegExp(sb) {
    nodeToRegExp(this, sb, '(?=');
}
function toRegExp(sb) {
    nodeToRegExp(this, sb, '(?!');
}
function toRegExp(sb) {
    var s = getReFromChildren(this);
    sb.push('(:' + '<' + this.wzName + '>' + s + ')');
}
function toRegExp(sb) {
    sb.push('[^');
    if (verify.isEmpty(this.wzName) === false) {
        sb.push(this.wzName);
    }
    else {
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.toRegExp(sb);
        }
    }
    sb.push(']');
}
function toRegExp(sb) {
    sb.push('^');
    var s = getReFromName(this);
    if (verify.isNotEmpty(s)) {
        sb.push(s);
    }
    else {
        var i, i_items=this.nodes, i_len=this.nodes.length, item;
        for (i=0; i<i_len; i++) {
            item = this.nodes[i];
            item.toRegExp(sb);
        }
    }
    sb.push('$');
}
function escape(text) {
    return verify.escapeRegExp(text);
}
function getElement(root, wzName) {
    if (verify.isEmpty(wzName)) {
        return null;
    }
    var re = /\<(\w+\-?\w+)\>/g;
    var match = re.exec(wzName);
    if (match != null) {
        var elName = match[1];
        if (builtInElements[elName]) {
            return [
                    match[0], 
                    builtInElements[elName], 
                    'builtIn'
                ];
        }
        var el = root.elements[elName];
        return [
                match[0], 
                el
            ];
    }
    else {
        return null;
    }
}
function getReFromName(node) {
    var s = node.wzName;
    if (verify.isEmpty(s)) {
        return null;
    }
    if (s.indexOf('<') < 0 && s.indexOf('-') > -1 && s.length === 3) {
        return '[' + escape(s) + ']';
    }
    else {
        var el = getElement(node.wzRoot(), s);
        if (el === null) {
            return escape(s);
        }
        else {
            if (el.length > 2 && el[2] === 'builtIn') {
                return verify.replaceAll(s, el[0], el[1]);
            }
            else {
                var sb = [];
                el[1].toRegExp(sb);
                return verify.replaceAll(s, el[0], sb.join(''));
            }
        }
    }
}
function getReFromChildren(node) {
    var sb = [];
    var i, i_items=node.nodes, i_len=node.nodes.length, item;
    for (i=0; i<i_len; i++) {
        item = node.nodes[i];
        item.toRegExp(sb);
    }
    return sb.join('');
}
function nodeToRegExp(node, sb, tag) {
    var s = getReFromName(node);
    if (verify.isNotEmpty(s)) {
        if (tag[0] === '(') {
            sb.push(tag + s + ')');
        }
        else {
            sb.push(enclose(s) + tag);
        }
    }
    else {
        s = getReFromChildren(node);
        if (verify.isNotEmpty(s)) {
            if (tag[0] === '(') {
                sb.push(tag + s + ')');
            }
            else {
                sb.push(enclose(s) + tag);
            }
        }
    }
}
function enclose(s) {
    if (numchars(s) < 2 || (s[0] === '(' && s.substr(-1) === ')') || (s[0] === '[' && s.substr(-1) === ']') || (s[0] === '^' && s.substr(-1) === '$')) {
        return s;
    }
    else {
        if (s.indexOf('[') > -1 && s.indexOf(']') > -1) {
            return '(?:' + s + ')';
        }
        else {
            return '[' + s + ']';
        }
    }
}
function numchars(s) {
    if (verify.isEmpty(s)) {
        return 0;
    }
    var count = 0;
    for (var i=0; i<s.length; i++) {
        if (s[i] != '\\') {
            count++;
        }
    }
    return count;
}

