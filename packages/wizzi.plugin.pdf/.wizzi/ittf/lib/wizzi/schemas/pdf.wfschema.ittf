wfschema pdf
    $
        var md = {
        };
    
    preserve-tags true
    mtree-is-preprocessed true
    unknown-element-replacer text
    
    e node
        r node/s
    
    e pdf : node
        is-root
    
    e xname : node
        tag name
    e section : node
    e h1 : node
    e h2 : node
    e color : node
    e fill : node
    e size : node
    e width : node
    e height : node
    e shading : node
    e highlight : node
    e xtype : node
        tag type
    e center : node
    e bullet_0 : node
    e tabStop : node
    e position : node
    e basedOn : node
    e next : node

    #
    #
    # Styles
    #
    e defaultStyleDef : node
        tag default-style-def
    e styleDef : node
        tag style-def
    e styles : node
    e style : node

    #
    #
    # Layout
    #
    e pageSize : node
        tag page-size
        # '4A0', '2A0', 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10',
        # 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10',
        # 'C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10',
        # 'RA0', 'RA1', 'RA2', 'RA3', 'RA4',
        # 'SRA0', 'SRA1', 'SRA2', 'SRA3', 'SRA4',
        # 'EXECUTIVE', 'FOLIO', 'LEGAL', 'LETTER', 'TABLOID'

    e pageOrientation : node
        tag page-orientation
        # portrait, landscape
  
    e pageMargins : node
        tag page-margins
        # [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins
        m wzinitialize
            var ss = this.wzName.split(/[\s,]+/)
            set this.wzName = ss.join(',')

    e margin : node
        m wzinitialize
            var ss = this.wzName.split(/[\s,]+/)
            if ss.length == 1
                set this.wzName = ss[0] + ',' + ss[0] + ',' + ss[0] + ',' + ss[0] 
            elif ss.length == 2
                set this.wzName = ss[0] + ',' + ss[1] + ',' + ss[0] + ',' + ss[1] 
            elif ss.length == 3
                set this.wzName = ss[0] + ',' + ss[1] + ',' + ss[2] + ',0'
            else
                set this.wzName = ss[0] + ',' + ss[1] + ',' + ss[2] + ',' + ss[3]
            log 'margin', this.wzName

    #
    #
    # Tables
    #
    e table : node
    e tr : node
    e td : node
    e headerRows : node
        tag header-rows
    e widths : node
        m wzinitialize
            var ss = this.wzName.split(/[\s,]+/)
            set this.wzName = ss.join(',')
    e layout : node
        # noBorders
        # headerLineOnly
        # lightHorizontalLines

    #
    #
    # Columns
    #
    e columns : node
    e columnGap : node
        tag column-gap

    #
    #
    # Text
    #
    e text : node
        tag +
    
    e emphasisMark : node
    
    e strike : node
    
    e doubleStrike : node
    
    e superScript : node
    
    e subScript : node
    
    e smallCaps : node
    
    e allCaps : node
    
    e smallCaps : node

    e font : node
        # string: name of the font
    
    e fontSize : node
        tag font-size
        # number: size of the font in pt
    
    e fontFeatures : node
        tag font-features
        # string[]: array of advanced typographic features supported in TTF fonts (supported features depend on font file)
    
    e lineHeight : node
        tag line-height
        # number: the line height (default: 1)

    e bold : node
        tag b
    e boldProp : node
        tag bold
    
    e italics : node
        tag i
    
    e italicsProp : node
        tag italics
    
    e underline : node
        tag u
    e underlineProp : node
        tag underline
    
    e alignment : node
        # string: (‘left’ or ‘center’ or ‘right’) the alignment of the text
    
    e characterSpacing : node
        tag character-spacing
        # number: size of the letter spacing in pt
    
    e color : node
        # string: the color of the text (color name e.g., ‘blue’ or hexadecimal color e.g., ‘#ff5500’)
    
    e background : node
        # string the background color of the text
    
    e markerColor : node
        tag marker-color
        # string: the color of the bullets in a buletted list
    
    e decoration : node
        # string: the text decoration to apply (‘underline’ or ‘lineThrough’ or ‘overline’)
    
    e decorationStyle : node
        tag decoration-style
        # string: the style of the text decoration (‘dashed’ or ‘dotted’ or ‘double’ or ‘wavy’)

    e noWrap : node
        tag no-wrap

    #
    #
    # Paragraph
    #
    e p : node
        # subitems are "+/text" nodes
    e stack : node
        # subitems are "p" nodes
    e break : node
        tag br

    #
    #
    # Lists
    #
    e ul : node
    e ol : node

    #
    #
    # Images
    #
    e image : node

    e imageDef : node
        a src
        a title
        tag image-def
    
    e imageRef : node
        tag image-ref