module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.pdf',
            name: 'document',
            schema: 'pdf',
            rootElement: '',
            checkSchema: true,
            isAsync: true,
        };
    gen( &md )
        $append imports
        $append main
            _ md.pdf
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        
        +
        const noindent
            {
                @ indent false
        +
        function respace
            param text
            set text = verify.replaceAll(text, '&nbsp;', ' ')
            return verify.replaceAll(text, '"', '\\"')
            
        +
        async-md( pdf )
            $$ loog"ctx.keys", Object.keys(ctx)
            $$ loog"ctx.values property", ctx.values
            $$ loog'tag pdf, nodes', model.nodes.length

            set ctx.values.pdfStack = []
            set ctx.values.pdfCounter = 0
            set ctx.values.pdfMainObject = 'pdf_MainObject'
            set ctx.values.mainObjectCreated = false
            set ctx.values.bulletLevel = 0
            
            var pdfNode = "pdf_doc_" + (++ctx.values.pdfCounter)
            set ctx.values.pdfMainDocumentDefinition = pdfNode
            _ ctx.values.pdfStack.push
                {
                    @ node pdfNode
                    @ arrayName null
            set ctx.values.pdfMainInternalObject = pdfNode
            
            _ ctx.w('const fs = require("fs");')
            _ ctx.w('const pdfmake = require("pdfmake");')
            _ ctx.w('')
            _ ctx.w('const ' + pdfNode + ' = { content: [], styles: {} };')
            _ md.genItems
                @ model.nodes
                @ ctx
                @ noindent
                a_cb()
                    _ ctx.w('')
                    _ ctx.w('// Make Pdf')
                    _ ctx.w('')
                    _ ctx.w('// Build document definition')
                    _ ctx.w('var now = new Date();')
                    _ ctx.w('var documentDefinition = ' + ctx.values.pdfMainDocumentDefinition + ';')
                    _ ctx.w('pdf_MainObject.sections.forEach(section => {')
                    _ ctx.w('    section.content.forEach(contentItem => {')
                    _ ctx.w('        documentDefinition.content.push(contentItem);')
                    _ ctx.w('    });')
                    _ ctx.w('    Object.assign({}, documentDefinition.styles, section.styles);')
                    _ ctx.w('});')
                    $if wzConfigIsDevelopment
                        _ ctx.w('')
                        _ ctx.w('// Dump for test')
                        _ ctx.w('    fs.writeFileSync(__dirname + "/' + model.wzName + '.json", JSON.stringify(documentDefinition, null, "\t"));')
                    _ ctx.w('')
                    _ ctx.w('// Set fonts')
                    _ ctx.w('var fonts = {')
                    _ ctx.w('	Roboto: {')
                    _ ctx.w('		normal: __dirname + "/fonts/Roboto-Regular.ttf",')
                    _ ctx.w('		bold: __dirname + "/fonts/Roboto-Medium.ttf",')
                    _ ctx.w('		italics: __dirname + "/fonts/Roboto-Italic.ttf",')
                    _ ctx.w('		bolditalics: __dirname + "/fonts/Roboto-MediumItalic.ttf"')
                    _ ctx.w('	}')
                    _ ctx.w('};')
                    _ ctx.w('')
                    _ ctx.w('// Create document')
                    _ ctx.w('// old var printer = new pdfmake(fonts);')
                    _ ctx.w('pdfmake.addFonts(fonts);')
                    _ ctx.w('// old var pdfDoc = printer.createPdfKitDocument(documentDefinition);')
                    _ ctx.w('// old pdfDoc.pipe(fs.createWriteStream(__dirname + "/' + (model.wzName || 'created') + '.pdf"));')
                    _ ctx.w('// old pdfDoc.end();')
                    _ ctx.w('var pdf = pdfmake.createPdf(documentDefinition);')
                    _ ctx.w('// old pdfDoc.pipe(fs.createWriteStream(__dirname + "/' + (model.wzName || 'created') + '.pdf"));')
                    _ ctx.w('pdf.write(__dirname + "/' + (model.wzName || 'created') + '.pdf").then(() => {');
                    _ ctx.w('    console.log(new Date() - now);');
                    _ ctx.w('}, err => {');
                    _ ctx.w('    console.error(err);');
                    _ ctx.w('    });');
                    _ ctx.w('console.log("DONE written", new Date() - now)')
                    r_cb()
        +
        async-md( section )
            $$ loog'tag section, value', model.wzName
            
            var pdfParent = ctx.values.pdfStack[ctx.values.pdfStack.length-1]
            var pdfNode = "pdf_sect_" + (++ctx.values.pdfCounter)
            _ ctx.values.pdfStack.push
                {
                    @ node pdfNode
                    @ arrayName "content"
            _ ctx.w('const ' + pdfNode + ' = { content: [], styles: {} };')
            _ md.genItems
                @ model.nodes
                @ ctx
                @ noindent
                a_cb()
                    if ctx.values.mainObjectCreated == false
                        # _ ctx.w('const ' + ctx.values.pdfMainObject + ' = new pdf.Document(' + ctx.values.pdfMainInternalObject + ');')
                        _ ctx.w('const ' + ctx.values.pdfMainObject + ' = { sections : [] };')
                        set ctx.values.mainObjectCreated = true
                    _ ctx.w(pdfNode + ".content.push({ text: ' ', pageBreak: 'after'});")
                    _ ctx.w(ctx.values.pdfMainObject + '.sections.push(' + pdfNode + ');')
                    _ ctx.values.pdfStack.pop()
                    r_cb()
        +
        objectNode.js( p, text )   
            _ ctx.w(pdfNode + '.text = [];')
            if !verify.isEmpty(model.wzName)
                _ ctx.w(pdfNode + '.text.push("' + respace(model.wzName) + '");')
            $append close
                if pdfParentArrayName != null
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        objectNode.js( columns, columns )   
            _ ctx.w(pdfNode + '.columns = [];')
            $append close
                if pdfParentArrayName != null
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        objectNode.js( stack, stack )   
            _ ctx.w(pdfNode + '.stack = [];')
            $append close
                if pdfParentArrayName != null
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        objectNode.js( image )
            _ ctx.w(pdfNode + '.image = "' + model.wzName + '";')
            $append close
                if pdfParentArrayName != null            
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        async-md( imageDef )
            if ctx.values.mainObjectCreated == false
                _ ctx.w('const ' + ctx.values.pdfMainObject + ' = new pdf.Document(' + ctx.values.pdfMainInternalObject + ');')
                set ctx.values.mainObjectCreated = true
            _ ctx.w('const ' + model.wzName + ' = pdf.Media.addImage(')
            # _ ctx.w('  ' + ctx.values.pdfMainObject + ', 300, 300,')
            _ ctx.w('  ' + ctx.values.pdfMainObject + ',')
            _ ctx.w('  fs.readFileSync("' + verify.replaceAll(model.src, '\\', '\\\\') + '")')
            _ ctx.w(');')
            r_cb()

        async-md( imageRef )
            var pdfParent = ctx.values.pdfStack[ctx.values.pdfStack.length-1]
            _ ctx.w(pdfParent + '.children.push(' + model.wzName + ');')
            r_cb()

        +
        headings( 1 )
        headings( 2 )
        headings( 3 )
        headings( 4 )
        headings( 5 )
        headings( 6 )

        textNode.js( text )
        
        textNode.js( bold )
            _ ctx.w(pdfNode + '.bold = true;')
        textNode.js( italics ) 
            _ ctx.w(pdfNode + '.italics = true;')
        textNode.js( underline ) 
            _ ctx.w(pdfNode + '.underline = true;')

        textNode.js( a )
            _ ctx.w(pdfNode + '.decoration = "underline";')
            if verify.isNotEmpty(model.href)
                _ ctx.w(pdfNode + '.link = "' + model.href + '";')
            elif verify.isNotEmpty(model.page)
                _ ctx.w(pdfNode + '.linkToPage = "' + model.page + '";')
            elif verify.isNotEmpty(model.destination)
                _ ctx.w(pdfNode + '.linkToDestination = "' + model.destination + '";')

        $*
        textNode.js( json )
            var tab = model.tab || '2'
            _ ctx.w('// json')
            _ ctx.w(pdfNode + '.text = JSON.stringify(JSON.parse(' + pdfNode + '.text), null, ' + tab + ');')
            var lines = parseIndentedJSONLines            
        *$

        async-md( json )
            var tab = model.tab || '2'
            var tabN = parseInt(tab)
            _ ctx.w('// json')
            pdfNode.js( txt )
            _ ctx.w('const ' + pdfNode + ' = {};')
            _ ctx.w(pdfNode + '.stack = []');
            var prettyJSON
                _ JSON.stringify
                    _ JSON.parse
                        @ model.wzName
                    @ null
                    @ tabN
            var lines
                _ parseIndentedJSONLines
                    @ prettyJSON
            foreach line in lines
                var escapedLine
                    _ verify.replaceAll
                        _ verify.replaceAll
                            @ line.lineText
                            @ '\\'
                            @ '\\\\'
                        @ '"'
                        @ '\\"'
                _ ctx.w(pdfNode + '.stack.push({')
                _ ctx.w('  text:"' + escapedLine + '", margin: [' + line.indentation*4 + ',0,0,0]')
                _ ctx.w('});')
            if pdfParentArrayName != null
                _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')                
            else
                _ ctx.w(pdfParent + '.push(' + pdfNode + ');')
            _ ctx.values.pdfStack.pop()
            r_cb()
        
        nodeProperty.js( pageOrientation, pageOrientation, string )
        nodeProperty.js( pageBreak, pageBreak, string )
        nodeProperty.js( pageSize, pageSize, string )
        nodeProperty.js( pageMargins, pageMargins, array )
        nodeProperty.js( boldProp, bold, true )
        nodeProperty.js( italicsProp, italics, true )
        nodeProperty.js( underlineProp, underline, true )
        nodeProperty.js( emphasisMark, emphasisMark, true )
        nodeProperty.js( strike, strike, true )
        nodeProperty.js( doubleStrike, doubleStrike, true )
        nodeProperty.js( superScript, superScript, true )
        nodeProperty.js( subScript, subScript, true )
        nodeProperty.js( smallCaps, smallCaps, true )
        nodeProperty.js( allCaps, allCaps, true )
        nodeProperty.js( font, font, string )
        nodeProperty.js( fontSize, fontSize )

        nodeProperty.js( xbreak, break, true )
        nodeProperty.js( size, size )
        nodeProperty.js( color, color, string )
        nodeProperty.js( background, background, string )
        nodeProperty.js( fill, background, string )
        nodeProperty.js( xname, name, string )
        nodeProperty.js( highlight, highlight, string )
        nodeProperty.js( style, style, string )
        nodeProperty.js( next, next, string )
        nodeProperty.js( basedOn, basedOn, string )
        nodeProperty.js( before, before )
        nodeProperty.js( after, after )
        nodeProperty.js( line, line )
        nodeProperty.js( link, link, string )
        nodeProperty.js( linkText, text, string )
        nodeProperty.js( value, value, string )
        nodeProperty.js( space, space )
        nodeProperty.js( height, height )
        nodeProperty.js( margin, margin, array )
        nodeProperty.js( width, width )
        nodeProperty.js( widths, table.widths, array )
        nodeProperty.js( headerRows, table.headerRows )
        nodeProperty.js( layout, layout, string )
        nodeProperty.js( noWrap, noWrap, true )
        nodeProperty.js( columnGap, columnGap )
        
        nodePropertyChoice.js( xtype)
            if model.wzParent.wzElement == 'shading'
                _ ctx.w(pdfParent + '.type = pdf.ShadingType.' + model.wzName + ';')
            elif model.wzParent.wzElement == 'width'
                _ ctx.w(pdfParent + '.type = pdf.WidthType.' + model.wzName + ';')
            elif model.wzParent.wzElement == 'tabStop'
                _ ctx.w(pdfParent + '.type = pdf.TabStopType.' + model.wzName + ';')
            elif model.wzParent.wzElement == 'underline'
                _ ctx.w(pdfParent + '.type = pdf.UnderlineType.' + model.wzName + ';')
            elif model.wzParent.wzElement == 'hyperlinkDef'
                if model.wzName && model.wzName.length > 0
                    _ ctx.w(pdfParent + '.type = pdf.HyperlinkType.' + model.wzName + ';')
                else
                    _ ctx.w(pdfParent + '.type = pdf.HyperlinkType.EXTERNAL;')
            else
                _ ctx.w(pdfParent + '.type = "' + model.wzName + '";')
        
        nodePropertyChoice.js( position )
            if model.wzParent.wzElement == 'tabStop'
                if verify.isNumber(model.wzName)
                    _ ctx.w(pdfParent + '.position = ' + model.wzName + ';')
                else
                    _ ctx.w(pdfParent + '.position = pdf.TabStopPosition.' + model.wzName + ';')
            else
                _ ctx.w(pdfParent + '.position = ' + model.wzName + ';')

        nodePropertyChoice.js( alignment )
            _ ctx.w(pdfParent + '.alignment = "' + model.wzName + '";')
        
        nodePropertyChoice.js( hyperlinkRef )
            _ ctx.w(pdfParent + '.children.push(new pdf.HyperlinkRef("' + model.wzName + '"));')

        $*
        async-md( xtype )
            var pdfParent = ctx.values.pdfStack[ctx.values.pdfStack.length-1]
            if model.wzParent.wzElement == 'shading'
                _ ctx.w(pdfParent + '.type = pdf.ShadingType.' + model.wzName + ';')
            elif model.wzParent.wzElement == 'width'
                _ ctx.w(pdfParent + '.type = pdf.WidthType.' + model.wzName + ';')
            else
                _ ctx.w(pdfParent + '.type = "' + model.wzName + '";')
            r_cb()
        *$
        +
        async-md( font )

            pdfNode.js( fnt )
            _ ctx.w('const ' + pdfNode + ' = {};')
        
            _ md.genItems
                @ model.nodes
                @ ctx
                @ noindent
                a_cb()
                    _ ctx.w(pdfParent + '.font = ' + pdfNode + ';')
                    _ ctx.values.pdfStack.pop()
                    r_cb()

        +
        async-md( shading )

            pdfNode.js( shd )
            _ ctx.w('const ' + pdfNode + ' = {};')
        
            _ md.genItems
                @ model.nodes
                @ ctx
                @ noindent
                a_cb()
                    _ ctx.w(pdfParent + '.shading = ' + pdfNode + ';')
                    _ ctx.values.pdfStack.pop()
                    r_cb()

        objectNode.js( table, body )
            _ ctx.w(pdfNode + '.table = { body: [] };')
            $append close
                if pdfParentArrayName != null
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')                
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        objectNode.js( tr, tds )
            _ ctx.w(pdfNode + '.tds = [];')
            $append close
                _ ctx.w('if (' + pdfNode + '.tds.length > 0) {' +  pdfParent + '.table.body.push(' + pdfNode + '.tds); }')

        arrayNode.js( td )
            if verify.isNotEmpty(model.wzName)
                _ ctx.w(pdfNode + '.push("' + respace(model.wzName) + '");')
            $append close
                _ ctx.w(pdfParent + '.tds.push(' + pdfNode + ');')

        $*
        objectNode.js( td, items )
            _ ctx.w(pdfNode + '.items = [];')
            if !verify.isEmpty(model.wzName)
                _ ctx.w(pdfNode + '.items.push("' + respace(model.wzName) + '");')
            $append close
                if verify.isEmpty(model.wzName)
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')
                _ ctx.w(pdfParent + '.tds.push(' + pdfNode + '.items);')
        *$

        objectNode.js( underline )
            $append close
                _ ctx.w(pdfNode + '.underline = ' + pdfNode + ';')

        objectNode.js( styles )
            $append close
                _ ctx.w(pdfParent + '.styles = ' + pdfNode + ';')

        objectNode.js( xdefault )
            $append close
                _ ctx.w(pdfParent + '.default = ' + pdfNode + ';')

        objectNode.js( run )
            $append close
                _ ctx.w(pdfParent + '.run = ' + pdfNode + ';')
        
        objectNode.js( tabStop )
            $append close
                _ ctx.w(pdfParent + '.tabStops.push(' + pdfNode + ');')

        objectNode.js( styleDef )
            if model.wzParent.wzElement == 'paragraphStyles'
                _ ctx.w(pdfNode + '.id = "' + model.wzName + '";')
            $append close
                if model.wzParent.wzElement == 'xdefault'
                    _ ctx.w(pdfParent + '.' + model.wzName + ' = ' + pdfNode + ';')
                else
                    _ ctx.w(pdfParent + '.styles["' + model.wzName + '"] = ' + pdfNode + ';')

        objectNode.js( defaultStyleDef )
            $append close
                _ ctx.w(pdfParent + '.defaultStyle = ' + pdfNode + ';')

        objectNode.js( spacing )
            $append close
                _ ctx.w(pdfParent + '.spacing = ' + pdfNode + ';')

        objectNode.js( hyperlinks )
            $append close
                _ ctx.w(pdfParent + '.hyperlinks = ' + pdfNode + ';')

        objectNode.js( hyperlinkDef )
            $append close
                _ ctx.w(pdfParent + '.' + model.wzName + ' = ' + pdfNode + ';')

        objectNode.js( border )
            $append close
                _ ctx.w(pdfParent + '.border = ' + pdfNode + ';')


        $$ objectNodeSimple.js( border )
        objectNodeSimple.js( top )
        objectNodeSimple.js( left )
        objectNodeSimple.js( right )
        objectNodeSimple.js( bottom )

        arrayNode.js( paragraphStyles )
            $append close
                _ ctx.w(pdfParent + '.paragraphStyles = ' + pdfNode + ';')

        objectNode.js( ul, ul )
            _ ctx.w(pdfNode + '.ul = [];')
            $append close
                if pdfParentArrayName != null            
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        objectNode.js( ol, ol )
            _ ctx.w(pdfNode + '.ol = [];')
            $append close
                if pdfParentArrayName != null            
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        objectNode.js( li, text )
            _ ctx.w(pdfNode + '.text = [];')
            if model.wzName.length > 0
                _ ctx.w(pdfNode + '.text.push("' + respace(model.wzName) + '");')
            $append close
                # _ ctx.w(pdfParent + '.children.push(' + pdfNode + 'Obj);')
                if pdfParentArrayName != null                
                    _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')                
                else
                    _ ctx.w(pdfParent + '.push(' + pdfNode + ');')

        async-md( svg )
            log '***** known model', model.wzElement, model.svgInclude
            if model.svgInclude
                log '***** known model', model.svgInclude.wzElement, model.svgInclude.get_svg
                if model.svgInclude.get_svg
                    $*
                    return
                        _ included_writers.writeIncludeSvg
                            @ ctx
                            @ model
                            a_cb( notUsed )
                                r_cb( true )
                    *$
                    pdfNode.js( svg )                
                    _ ctx.w('const ' + pdfNode + ' = {};')
                    _ md.genItems
                        @ model.nodes
                        @ ctx
                        @ noindent
                        a_cb()
                            _ model.svgInclude.get_svg
                                a_cb( svgModel )
                                    $$ loogmyname, 'svgModel', svgModel
                                    _ ctx.wizziFactory.generateArtifact
                                        @ svgModel
                                        @ 'generated from html model'
                                        @ 'svg/document'
                                        {
                                            @ forHtmlSvgElement true
                                        a_cb( artifactText )
                                            $$ loogmyname, 'svg module artifactText', artifactText
                                            var escapedSvg
                                                _ verify.replaceAll
                                                    _ verify.replaceAll
                                                        @ artifactText
                                                        @ '\n'
                                                        @ ''
                                                    @ '"'
                                                    @ '&quot;'
                                            _ ctx.w(pdfNode + '.svg = "' + escapedSvg + '"')
                                            _ ctx.w(pdfNode + '.width = ' + (model.width || 600)  + ';')
                                            _ ctx.w(pdfNode + '.height = ' + (model.height || 400) + ';')
                                            if pdfParentArrayName != null
                                                _ ctx.w(pdfParent + '["' + pdfParentArrayName + '"].push(' + pdfNode + ');')                
                                            else
                                                _ ctx.w(pdfParent + '.push(' + pdfNode + ');')
                                            _ ctx.values.pdfStack.pop()
                                            r_cb()
                else
                    r_cb( false )
            else
                r_cb( false )

    function parseIndentedJSONLines
        param prettyJSON
        const lines = prettyJSON.split(/\r?\n/)
        return 
            _ lines.map
                => 
                    param line
                    const match = line.match(/^(\s*)/)
                        # Match leading whitespace
                    const leadingSpaces
                        iif match
                            then match[1].length
                            else 0
                    const indentation = leadingSpaces
                    return 
                        { 
                            @ lineText line.trim()
                            @ indentation