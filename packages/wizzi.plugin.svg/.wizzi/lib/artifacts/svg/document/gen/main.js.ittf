module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.svg',
            name: 'document',
            schema: 'svg',
            rootElement: '',
            checkSchema: true,
            isAsync: true,
        };
    gen( &md )
        $append imports
            var included_writers = require('./included_writers')
        $append main
            _ md.svg
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        async-md( svg )
            _ ctx.w('<svg>')
            _ md.genItems
                @ model.nodes
                @ ctx
                {
                    @ indent true
                a_cb()
                    _ ctx.w('</svg>')
                    r_cb()
        async-md( rect )
            _ ctx.write('<rect ')
            _ ctx.write('x=' + model.x + ', ')
            _ ctx.write('y=' + model.y + ', ')
            _ ctx.write('width=' + model.width + ', ')
            _ ctx.write('height=' + model.height)
            if model.nodes && model.nodes.length > 0
                _ ctx.write('>')
                _ md.genItems
                    @ model.nodes
                    @ ctx
                    {
                        @ indent true
                    a_cb()
                        _ ctx.w('</rect>')
                        r_cb()
            else
                _ ctx.w(' />')
                r_cb()
        $include includes
        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval
