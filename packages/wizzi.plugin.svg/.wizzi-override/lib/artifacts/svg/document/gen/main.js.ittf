module wizzi.plugin.svg.lib.artifacts.svg.document.gen.main
    kind es6
    $
        // isAsync: false is important!!!
        var md = {
            plugin: 'wizzi.plugin.svg',
            name: 'document',
            schema: 'svg',
            checkSchema: true,
            isAsync: false,
        };

	# Language artifact that targets
	# the Scalable Vector Graphics (SVG) 1.1 (Second Edition) specification.
	# It implements a minimal set of elements
	#
	# This is a code write based artifact generator.
	#

    gen( &md )
        $append imports
            # gen also has a 'lineparser' function from wizzi-utils
            var myLineParser = require('../../../utils/lineParser')
            var included_writers = require('./included_writers')
        $append main
            if false
                # this for md.checkSchema: false
                # allow generations from non root elements
                _ md.myGetGenItem
                    @ ctx
                    (
                        @ model
                        a_cb( )
                            if ctx.artifactGenerationErrors.length > 0
                                r_cb_err( ctx.artifactGenerationErrors )
                            else
                                # generation OK
                                r_cb( ctx )
            else
                # this for md.checkSchema: true
                _ md.svg
                    @ model
                    @ ctx
                    a_cb( )
                        if ctx.artifactGenerationErrors.length > 0
                            r_cb_err( ctx.artifactGenerationErrors )
                        else
                            # generation OK
                            r_cb( ctx )
        
        async-md( svg )
            if ctx.values.forCssImage || ctx.values.forHtmlSvgElement
            else
                _ ctx.w('<?xml version="1.0"?>')
            _ writeBeginTag
                @ ctx
                @ 'svg'
            _ ctx.write(" xmlns='http://www.w3.org/2000/svg'")
            _ writeAttributes(model, ctx)
            _ writeCloseBegin
                @ ctx
            _ md.myGenItems
                @ model.elements
                @ ctx
                {
                    @ indent true
                a_cb( notUsed )
                    _ writeEndTag
                        @ ctx
                        @ 'svg'
                    _ callback(null, true)
        
        async-md( standardElement )
            # loog '***** standard element', model.wzElement
            _ writeBeginTag
                @ ctx
                @ model.wzTag
            _ writeAttributes(model, ctx)
            if model.elements.length > 0
                _ writeCloseBegin
                    @ ctx
                if model.wzName && model.wzName.length > 0
                    _ ctx.write(model.wzName)
                _ md.myGenItems
                    @ model.elements
                    @ ctx
                    {
                        @ indent true
                    a_cb( notUsed )
                        _ writeEndTag
                            @ ctx
                            @ model.wzTag
                        return
                            _ callback
            else
                _ ctx.write
                    @ closeSym(ctx)
                _ ctx.write
                    @ (model.wzName && model.wzName.length > 0 ? model.wzName : '')
                _ writeEndTag
                    @ ctx
                    @ model.wzTag
                return
                    _ callback

        #
            async-md( linearGradient )
                _ writeBeginTag
                    @ ctx
                    @ 'linearGradient'
                _ writeAttributes(model, ctx)
                _ writeCloseBegin
                    @ ctx
                # TODO
                _ writeEndTag
                    @ ctx
                    @ 'linearGradient'
                    _ callback(null, true)

        set md.myGenItems
            function
                param elements
                param ctx
                param options
                param callback
                var
                    decl opt = options || {}
                    decl from = opt.from || 0
                    decl indent = typeof opt.indent === 'undefined' ? true : opt.indent

                if indent
                    _ ctx.indent()

                var goelements = []
                for var i = from; i < elements.length; i++
                    _ goelements.push(elements[i])

                _ async.mapSeries
                    @ goelements
                    _ md.myGetGenItem
                        @ ctx
                    a_cb( notUsed )
                        if indent
                            _ ctx.deindent()
                        return
                            _ callback
        
        set md.myGetGenItem
            function
                param ctx
                return
                    function
                        param model
                        param callback
                        if md[model.wzElement]
                            # loog '***** known element', model.wzElement
                            _ md[model.wzElement]
                                @ model
                                @ ctx
                                a_cb( done )
                                    if done
                                        # ok, processed
                                        return
                                            _ callback
                                    else
                                        return
                                            _ md.standardElement
                                                @ model
                                                @ ctx
                                                @ callback
                        else
                            return
                                _ md.standardElement
                                    @ model
                                    @ ctx
                                    @ callback

        function writeAttributes
            param model
            param ctx
            var v
            foreach a in model.getAttributes()
                set v = encodeValue(ctx, a.value)
                _ ctx.write
                    @ " " + a.name + "='" + v + "'"

            if model.attributes
                foreach a in model.attributes
                    var p = myLineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ ctx.write
                            @ " " + p.name() + "='" + p.value() + "'"
                    else
                        _ ctx.write
                            @ " " + p.name()

            var styles = model.getStyleAttributes()
            if styles.length > 0
                var sb = []
                foreach style in styles
                    set v = encodeValue(ctx, style.value)
                    _ sb.push
                        @ style.tag + ':' + v + ';'
                _ ctx.write
                    @ " style='" + sb.join('') + "'"
        
        function encodeValue
            param ctx
            param value
            if ctx.values.forCssImage
                var v = verify.replaceAll(value, '%','%25') 
                return verify.replaceAll(v, '#','%23') 
            else
                return value

        function openSym
            param ctx
            return ctx.values.forCssImage ? '%3C' : '<'

        function closeSym
            param ctx
            return ctx.values.forCssImage ? '%3E' : '>'

        function writeBeginTag
            param ctx
            param name
            _ ctx.write
                @ openSym(ctx) + name

        function writeCloseBegin
            param ctx
            if ctx.values.forCssImage
                _ ctx.write
                    @ closeSym(ctx)
            else
                _ ctx.w
                    @ closeSym(ctx)

        function writeEndTag
            param ctx
            param name
            if name
                _ __w
                    @ ctx
                    @ openSym(ctx) + '/' + name + closeSym(ctx)
            else
                _ __w
                    @ ctx
                    @ '/' + closeSym(ctx)

        function __w
            param ctx
            param text
            if ctx.values.forCssImage
                _ ctx.write(text)
            else
                _ ctx.w(text)

        $include includes

        +
        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        +
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        +
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval

