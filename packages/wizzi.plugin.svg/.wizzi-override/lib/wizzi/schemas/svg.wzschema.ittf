wzschema svg

	# Language schema that targets
	# the Scalable Vector Graphics (SVG) 1.1 (Second Edition) specification.
	# It implements a minimal set of elements, but see the genericAttribute and
    # genericElement schema elements for the way to overcome limitations.

	mtree-is-preprocessed true

    # TODO export-to json is for test only
    export-to json

	$
		/*
			We use jswizzi to build the value context : 'presentationAttributes' that will
			be referenced below, in the template nodes that define the styles attribute of the
			svg.
		*/
		var x_presentationAttributes = 'alignment-baseline,baseline-shift,clip,clip-path,clip-rule,' + 
			'color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,' +
			'cursor,direction,display,dominant-baseline,enable-background,/*fill,*/fill-opacity,fill-rule,' +
			'filter,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,' +
			'font-style,font-variant,font-weight,glyph-orientation-horizontal,glyph-orientation-vertical,' +
			'image-rendering,kerning,letter-spacing,lighting-color,marker-end,marker-mid,marker-start,' +
			'mask,/*opacity,*/overflow,pointer-events,shape-rendering,/*stop-color,stop-opacity,stroke,*/'+ 
			'stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,' +
			'stroke-opacity,stroke-width,text-anchor,text-decoration,text-rendering,unicode-bidi,' +
			'visibility,word-spacing,writing-mode';
		var a_presentationAttributes = x_presentationAttributes.split(',');
		var presentationAttributes = [], len = a_presentationAttributes.length, item, i;
		for (i=0; i<len; i++) {
			item = a_presentationAttributes[i];
			presentationAttributes.push({ name: _.dashToCamelCase(item), tag: item });
		}
	
	declare
		var styles
			[
				$foreach pa in presentationAttributes
					{
						@ name '${pa.name}'
						@ tag '${pa.tag}'

	e comment
		tag #
		r comment/s
	
	e element
		# attributes common to all svg elements
		a id
		a href
		a rotate
        a class
        a_tag( dataName, data-name
        a transform
		a xmlns
        a xmlns:*
        a xlink
        a xlink:*
        a aria-*
        a data-*
		a_tag( xmlBase, xml:base
		a_tag( xmlLang, xml:lang
		a_tag( xmlSpace, xml:space
		a_tag(pathLength, path-length)
			# This attribute lets specify the total length for the path, in user units.
			# Value type: <number> ; Default value: none; Animatable: yes
        a fill
		a role
        a stroke
        a_tag(strokeWidth, stroke-width)
        a opacity

		$foreach pa in presentationAttributes
			a ${pa.name}
				$if pa.tag !== pa.name
					tag ${pa.tag}
		
		r comment/s
		r attribute/s
		r element/s

		svg/getAttrs( 
			\b id;class;dataName;href;rotate;transform;xmlns;xmlBase;xmlLang;xmlSpace;pathLength;
            \ fill;stroke;strokeWidth;opacity
			\b )

		m getStyleAttributes
			var ret = []
			foreach style in styles
				if typeof(this[style.name]) !== 'undefined' && this[style.name] != null
					_ ret.push
						{
							@ name style.name
							@ tag style.tag
							@ value this[style.name]
			return ret

	e attribute
		# Used for Svg element attributes not declared in this schema.
		# The wzName must contain a name-value pair separated by a blank (value is optional).
		# Name is the attribute name and value, if not empty, is the attribute value.

		tag @
	
	e rect : element

		a x
			# This attribute determines the x coordinate of the rect.
			# Value type: <length>|<percentage> ; Default value: 0; Animatable: yes
		a y
			# This attribute determines the y coordinate of the rect.
			# Value type: <length>|<percentage> ; Default value: 0; Animatable: yes
		a width
			# This attribute determines the width of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
		a height
			# This attribute determines the height of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
		a rx
			# This attribute determines the horizontal corner radius of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes
		a ry
			# This attribute determines the vertical corner radius of the rect.
			# Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes

		svg/getAttrs( x;y;width;height;rx;ry, element )

	e svg : rect
		is-root
		a viewBox
            tag viewBox|view-box
			# This attribute defines the bound of the SVG viewport for the current SVG fragment.
			# Value type: <list-of-numbers> ; Default value: none; Animatable: yes
		a_tag( preserveAspectRatio, preserve-aspect-ratio )
			# This attribute defines how the svg fragment must be deformed if it is embedded in a container with a different aspect ratio.
			# Value type: (none| xMinYMin| xMidYMin| xMaxYMin| xMinYMid| xMidYMid| xMaxYMid| xMinYMax| xMidYMax| xMaxYMax) (meet|slice)? ; Default value: xMidYMid meet; Animatable: yes
		a version
        a alt
        a focusable 
		svg/getAttrs( width;height;viewBox;preserveAspectRatio;version, element )

	e line : element
		a x1
		a y1
		a x2
		a y2

		svg/getAttrs( x1;y1;x2;y2;, element )

	e polyline : element
		a points
		
		svg/getAttrs( points, element )

	
	e polygon : element
		a points

		svg/getAttrs( points:pathLength, element )

	e circle : element
		a cx
		a cy
		a r

		svg/getAttrs( cx;cy;r, element )

	e ellipse : element
		a cx
		a cy
		a rx
		a ry

		svg/getAttrs( cx;cy;rx;ry, element )

	e path : element
		a d
		a fillOpacity
			tag fill-opacity

		svg/getAttrs( d;fillOpacity, element )

	e text : element
		a x
		a y
		a fontFamily
			tag font-family
		a fontSize
			tag font-size
        a fontWeight
            tag font-weight
        a textAnchor
            tag text-anchor
		
        svg/getAttrs( x;y;fontFamily;fontSize;fontWeight;textAnchor, element )

	e textPath : element

	e tspan : element
		a x
		a y
		a dx
		a dy

		svg/getAttrs( x;y;dx;dy , element )

	e a : element
		# link
		# a
			# href http://tecfa.unige.ch
			# rect
				# fill #00FF00
				# stroke #00FF00
				# width 300
				# height 40
				# ry 5
				# rx 5
				# y 80
				# x 50
			# text TECFA POWER 1 click away
				# x 100
				# y 110
				# stroke #000099
				# fill #000099
				# font-size 24
		$$ svg/getAttrs( transform, element )

	e g : element
		# grouping
		$$ svg/getAttrs( transform, element )

	e image : rect
		$$ svg/getAttrs( transform, rect )

	e title : element

	e altGlyph : element
	e altGlyphDef : element
	e altGlyphItem : element
	e animate : element
	e animateColor : element
	e animateMotion : element
	e animateTransform : element
	e clipPath : element
		$$ svg/getAttrs( transform, element )
	e color-profile : element
	e cursor : element
	e defs : element
		$$ svg/getAttrs( transform, element )
	e desc : element
	e feBlend : element
	e feColorMatrix : element
	e feComponentTransfer : element
	e feComposite : element
	e feConvolveMatrix : element
	e feDiffuseLighting : element
	e feDisplacementMap : element
	e feDistantLight : element
	e feFlood : element
	e feFuncA : element
	e feFuncB : element
	e feFuncG : element
	e feFuncR : element
	e feGaussianBlur : element
	e feImage : element
	e feMerge : element
	e feMergeNode : element
	e feMorphology : element
	e feOffset : element
	e fePointLight : element
	e feSpecularLighting : element
	e feSpotLight : element
	e feTile : element
	e feTurbulence : element
	e filter : element
	e font : element
	e font-face : element
	e font-face-format : element
	e font-face-name : element
	e font-face-src : element
	e font-face-uri : element
	e foreignObject : element
		$$ svg/getAttrs( transform, element )
	e glyph : element
	e glyphRef : element
	e hkern : element
	e linearGradient : line
		tag linear-gradient
        a gradientUnits
	e marker : element
	e mask : element
	e metadata : element
	e missing-glyph : element
	e mpath : element
	e pattern : element
        a progressLines
        $$ a_tag( viewBox, viewBox|view-box )
        a width
        a height
        a patternUnits
        a patternTransform
	e radialGradient : element
        a cx
        a cy
        a r
        a gradientUnits
        a gradientTransform 
        svg/getAttrs( cx;cy;r;gradientUnits;gradientTransform, element )
	e script : element
	e set : element
	e stop : element
		a style
		a offset
		a stopColor
			tag stop-color
		a stopOpacity
			tag stop-opacity
		svg/getAttrs( style;offset;stopColor;stopOpacity, element )
	e stroke-width : element
    e style : element
	e switch : element
		$$ svg/getAttrs( transform, element )
	e symbol : element
        a width
        a height
		a viewBox
            tag viewBox|view-box
			# This attribute defines the bound of the SVG viewport for the current SVG fragment.
			# Value type: <list-of-numbers> ; Default value: none; Animatable: yes
		a_tag( preserveAspectRatio, preserve-aspect-ratio )
			# This attribute defines how the svg fragment must be deformed if it is embedded in a container with a different aspect ratio.
			# Value type: (none| xMinYMin| xMidYMin| xMaxYMin| xMinYMid| xMidYMid| xMaxYMid| xMinYMax| xMidYMax| xMaxYMax) (meet|slice)? ; Default value: xMidYMid meet; Animatable: yes
		svg/getAttrs( width;height;viewBox;preserveAspectRatio, element )
	e tref : element
	e use : element
		$$ svg/getAttrs( transform, element )
        a y
        a x
        a width
        a height
        a transform
        a xlink:href
		svg/getAttrs( x;y;xlink_href, element )

	e view : element
	e vkern : element

    e jsInclude : element
        tag ::script
        include js module

    e cssInclude : element
        tag ::style
        include css css

	# TODO this should become function
	m extractAttributes
		param element
		param names_string
		param attrs
		if !attrs
			set attrs = []
		if verify.isNotEmpty(names_string)
			var names = names_string.split(';')
			foreach name in names
				if typeof(element[name]) !== 'undefined' && element != null
					var nameAttr = name
					if name == 'xlink_href'
						set nameAttr = 'xlink:href'
					elif name == 'fillOpacity'
						set nameAttr = 'fill-opacity'
					_ attrs.push
						{
							@ name nameAttr
							@ value element[name]
		return attrs