module wizzi-web@${wzCtx.version}.lib.artifacts.css.document.gen.main
	kind jsfile

    $include versions

	var util = require('util')
	var async = require('async')
    var postcss = require("postcss")
    var colorFunction = require("postcss-color-function")    
	
	var myname = 'css.document.main'

	var md = module.exports = {}
	set md.stm = {}
	
	var rule = require('./rule')
	_ rule.load(md)

	set md.gen
		function
			param model
			param ctx
			param callback

			# loog 'model', util.inspect(model, { depth: 3 })
			# loog 'enter', myname

            _ main_init
                @ model
                @ ctx

			set ctx.__comment_level = 0

			_ md.getGenItem
				@ ctx
				(
					@ model
					f_cb()
						# loog 'exit', myname
                        try
                            var postCssResult
                                _ postcss
                                    ._ use
                                        _ colorFunction
                                            { 
                                                @ preserveCustomProps true
                                    ._ process
                                        _ ctx.getContent
                                    . css
                        catch ex
                            if ex.name === 'CssSyntaxError'
                                r_cb(ctx)
                                
                        _ ctx.hydrate
                            {
                                [ lines
                                    {
                                        @ indentValue 0
                                        [ text
                                            @ postCssResult                        
						r_cb(ctx)

	async/md-gen-item( )

			var stm = md.stm[model.wzElement]
			if stm
				_ stm
					@ model
					@ ctx
					@ callback
			else 
				# this is an abnormal end
				throw ctx.error(myname + '. Unknown tag/element: ' + model.wzTag + '/' + model.wzElement, model)

	async/md-gen-items( )
		$$ params: items, ctx, options

		var
			decl opt = options || {}
			decl from = opt.from || 0
			decl indent = typeof opt.indent === 'undefined' ? true : opt.indent

		if indent
			_ ctx.indent()

		var goitems = []
		for var i = from; i < items.length; i++
			_ goitems.push(items[i])

		_ async.mapSeries
			@ goitems
			_ md.getGenItem
				@ ctx
			f_cb()
				if indent
					_ ctx.deindent()
				_ process.nextTick
					@ callback

	async/md-stm( css )
		
		# css is container only
		if model.charset
			_ ctx.write('@charset "' + model.charset + '";')
		_ emitResources(model.resources, ctx)
		_ md.genItems
			@ model.statements
			@ ctx
			{
				@ indent false
			f_cb()
                _ md.genItems
                    @ model.rules
                    @ ctx
                    {
                        @ indent false
                    @ callback

	async/md-stm( statement )
        _ ctx.w(model.wzName)
        r_cb()

    function main_init
		param model
		param ctx

        # loog 'css.document.gen.main, ctx.values', ctx.values, !!ctx.values.noGeneratorComments
		
		if (!!ctx.values.noGeneratorComments) == false
			_ ctx.w('/*')
			_ ctx.w('    artifact generator: ' + __filename)
            _ ctx.w('    package: wizzi-web@${versions['wizzi-web@next']}')
			_ ctx.w('    primary source IttfDocument: ' + model.wzSourceFilepath('f1'))
			if (!!ctx.values.isPackageDeploy) == false
				_ ctx.w('    utc time: ' + new Date().toUTCString())
			_ ctx.w('*/')

	function emitResources
		param requestedResources
		param ctx

		if requestedResources.length > 0 && ctx.values.cssResources
			var resourceRepo = ctx.values.cssResources
			_ resourceRepo.clearCssDependencies()
			foreach item in requestedResources
				_ resourceRepo.addCssDependency(item.wzName)
			_ resourceRepo.emitCssDependencies(ctx)
