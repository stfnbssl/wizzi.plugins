module wizzi-web@${wzCtx.version}.lib.artifacts.css2.document.gen
	kind jsfile

    $
        var md = {
            plugin: 'wizzi-web',
            name: 'document',
            schema: 'css',
            checkSchema: true,
            isAsync: true,
            useStmNamespace: true,
        };

    common/v07/artifacts/gen(&md)
        $append imports
            var postcss = require("postcss")
            var colorFunction = require("postcss-color-function")
            var rule = require('./rule')

        $append loads
	        _ rule.load(md)

        $append main
			set ctx.__comment_level = 0
			_ md.genItem
                @ model
				@ ctx
                a_cb()
                    # loog 'exit', myname
                    try
                        var postCssResult
                            _ postcss
                                ._ use
                                    _ colorFunction
                                        { 
                                            @ preserveCustomProps true
                                ._ process
                                    _ ctx.getContent
                                . css
                    catch ex
                        if ex.name === 'CssSyntaxError'
                            return
                                _ callback
                                    _ error
                                        @ 'CssSyntaxError'
                                        @ 'gen.postcss()'
                                        @ ex.toString()
                                        @ model
                                        @ ex
                            
                    _ ctx.hydrate
                        {
                            [ lines
                                {
                                    @ indentValue 0
                                    [ text
                                        @ postCssResult                        
                    _ callback(null, ctx)

	async/md-stm( css )
		
		# css is container only
		if model.charset
			_ ctx.write('@charset "' + model.charset + '";')
		_ emitResources(model.resources, ctx)
        _ md.stm.defaults
            @ model
            @ ctx
            a_cb()
                # loog 'css,after defaults', ctx.getContent()
                _ md.genItems
                    @ model.rules
                    @ ctx
                    {
                        @ indent false
                    @ callback

	async/md-stm( defaults )
        var items = []
        if model.useNormalize
            _ items.push('normalize.css')
        _ async.mapSeries
            @ items
            =>
                param item
                param callback
                # loog 'defaults,appendFile', item
                _ ctx.appendFile
                    _ path.join
                        @ __dirname
                        @ 'defaults'
                        @ item
                r_cb()
            @ callback

    function emitResources
		param requestedResources
		param ctx

		if requestedResources.length > 0 && ctx.values.cssResources
			var resourceRepo = ctx.values.cssResources
			_ resourceRepo.clearCssDependencies()
			foreach item in requestedResources
				_ resourceRepo.addCssDependency(item.wzName)
			_ resourceRepo.emitCssDependencies(ctx)
