module
	kind jsfile
	+
	var myname = 'html.document.include_writers'
	+
	var verify = require('wizzi-utils').verify
	+
	var md = module.exports = {}

	set md.writeIncludeCssLegacy
		function
			param ctx
			param model
			param callback
			_ model.get_css
				a_cb( cssModel )
					$$ loogmyname, 'cssModel.rules', cssModel.rules
					if cssModel.rules.length == 0 && verify.isEmpty(cssModel.wzName) == false
						$$ loogmyname, 1
						_ ctx.w('<link href="' + cssModel.wzName + '" rel="stylesheet" />')
						_ callback
					else
						$$ loogmyname, 2
						_ md.generateCssArtifact
							@ ctx
							@ cssModel
							a_cb( artifactText )
								_ ctx.w('<style>')
								_ ctx.indent
								_ ctx.writeAligned(artifactText)
								_ ctx.deindent
								_ ctx.w('</style>')
								_ callback

	set md.generateCssArtifact
		function
			param ctx
			param cssModel
			param callback
			$$ loogmyname, 3
			$$ loogmyname, 'cssModel', cssModel, 'cssModel.rules', cssModel.rules
			_ ctx.wizziFactory.generateArtifact
				@ cssModel
				@ 'generated from html model'
				@ 'css/document'
				{
					@ forHtmlStyle true
				a_cb( artifactText )
					$$ loogmyname, 'css artifactText', artifactText
					r_cb(artifactText)

	set md.writeIncludeCss
		function
			param ctx
			param element
			param callback
			$$ loogmyname, 'enter writeIncludeJs'
			_ element.get_css
				a_cb( cssModel )
					$$ loogmyname, 'cssModel', cssModel
					_ ctx.wizziFactory.generateArtifact
						@ cssModel
						@ 'generated from html model'
						@ 'css/document'
						{
							@ forHtmlStyle true
							@ noGeneratorComments true
						a_cb( artifactText )
							$$ loogmyname, 'css module artifactText', artifactText
							_ ctx.indent
							_ ctx.writeAligned(artifactText)
							_ ctx.deindent
							return
								_ callback

	set md.writeIncludeJs
		function
			param ctx
			param element
			param callback
			$$ loogmyname, 'enter writeIncludeJs'
			_ element.get_js
				a_cb( jsModel )
					$$ loogmyname, 'jsModel', jsModel
					_ ctx.wizziFactory.generateArtifact
						@ jsModel
						@ 'generated from html model'
						@ 'js/module'
						{
							@ forHtmlScript true
							@ noUseStrict true
							@ noGeneratorComments true
						a_cb( artifactText )
							$$ loogmyname, 'js module artifactText', artifactText
							_ ctx.indent
							_ ctx.writeAligned(artifactText)
							_ ctx.deindent
							return
								_ callback

	set md.writeIncludeSvg
		function
			param ctx
			param element
			param callback
			$$ loogmyname, 'enter writeIncludeSvg'
			_ element.get_svg
				a_cb( svgModel )
					$$ loogmyname, 'svgModel', svgModel
					_ ctx.wizziFactory.generateArtifact
						@ svgModel
						@ 'generated from html model'
						@ 'svg/document'
						{
							@ forHtmlSvgElement true
						a_cb( artifactText )
							$$ loogmyname, 'svg module artifactText', artifactText
							_ ctx.indent
							_ ctx.writeAligned(artifactText)
							_ ctx.deindent
							return
								_ callback

	set md.writeIncludeJson
		function
			param ctx
			param element
			param callback
			$$ loogmyname, 'enter writeIncludeSvg'
			_ element.get_json
				a_cb( jsonModel )
					$$ loogmyname, 'jsonModel', jsonModel
					_ ctx.wizziFactory.generateArtifact
						@ jsonModel
						@ 'generated from html model'
						@ 'json/document'
						{
							@ forHtmlJson true
						a_cb( artifactText )
							$$ loogmyname, 'json module artifactText', artifactText
							_ ctx.indent
							_ ctx.writeAligned(artifactText)
							_ ctx.deindent
							return
								_ callback
