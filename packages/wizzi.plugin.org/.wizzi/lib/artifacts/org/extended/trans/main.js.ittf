module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.org',
            name: 'extended',
            schema: 'org',
            checkSchema: true
        };
    trans( &md )
        $append main
            set transformedModel
                {
            foreach item in model.items
                _ doitem
                    @ item
                    @ transformedModel
    function doitem
        param parent
        param resultObj
        var f = functors[parent.wzElement]
        if f
            _ f
                @ parent
                @ resultObj
    var functors = {}
    set functors.namespace
        function
            param parent
            param resultObj
            set resultObj.ns = parent.wzName
            log 'functors.namespace'
            foreach child in parent.items
                if child.wzElement == "author"
                    set resultObj.ns_author = child.wzName
                else
                    _ doitem
                        @ child
                        @ resultObj
            set resultObj.ns = 'global'
            set resultObj.ns_author = 'global'
    set functors.getQualified
        function
            param ns
            param name
            return name.indexOf('.') > -1 ? name : (ns || 'global') + '.' + name
