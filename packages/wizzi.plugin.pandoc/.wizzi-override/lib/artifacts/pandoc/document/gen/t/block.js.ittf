$group
    # https://hackage.haskell.org/package/pandoc-types-1.23/docs/Text-Pandoc-Definition.html#t:Block
    #
    # Plain [Inline]	                                                Plain text, not a paragraph
    # Para [Inline]	                                                    Paragraph
    # LineBlock [[Inline]]	                                            Multiple non-breaking lines
    # CodeBlock Attr Text	                                            Code block (literal) with attributes
    # RawBlock Format Text                                              Raw block
    # BlockQuote [Block]	                                            Block quote (list of blocks)
    # OrderedList ListAttributes [[Block]]	                            Ordered list (attributes and a list of items, each a list of blocks)
    # BulletList [[Block]]	                                            Bullet list (list of items, each a list of blocks)
    # DefinitionList [([Inline], [[Block]])]                            Definition list. Each list item is a pair consisting of a term (a list of inlines) and one or more definitions (each a list of blocks)
    # Header Int Attr [Inline]	                                        Header - level (integer) and text (inlines)
    # HorizontalRule	                                                Horizontal rule
    # Table Attr Caption [ColSpec] TableHead [TableBody] TableFoot	    Table, with attributes, caption, optional short caption, column alignments and widths (required), table head, table bodies, and table foot
    # Figure Attr Caption [Block]	                                    Figure, with attributes, caption, and content (list of blocks)
    # Div Attr [Block]	                                                Generic block container with attributes

    # Attr = (Text, [Text], [(Text, Text)])                             identifier, classes, key-value pairs
    
    async-md( plain )
        # Plain [Inline]
        pandocNodeInit()
            [ jsonInlines
        var jsonObject
            {
                @ t "Plain"
                @ c pandocNode.jsonInlines
        _ processText
            @ model
            @ ctx
            a_cb()
                pandocNodeExec()
                    _ parentPandocNode.jsonBlocks.push
                        @ jsonObject                        
    
    async-md( paragraph )
        pandocNodeInit( paragraph )
            [ jsonInlines
        var jsonObject
            {
                @ t "Para"
                @ c pandocNode.jsonInlines
        _ processText
            @ model
            @ ctx
            a_cb()
                pandocNodeExec()
                    _ parentPandocNode.jsonBlocks.push
                        @ jsonObject                        

    async-md( lineBlock )
        pandocNodeInit()
            [ jsonInlines
        var jsonObject
            {
                @ t "LineBlock"
                [ c 
                    @ pandocNode.jsonInlines
        _ processText
            @ model
            @ ctx
            a_cb()
                pandocNodeExec()
                    _ parentPandocNode.jsonBlocks.push
                        @ jsonObject                        

    async-md( codeBlock )
        pandocNodeInit()
            @ jsonAttr defaultAttr()
            @ jsonText null
        var jsonObject
            {
                @ t "CodeBlock"
                [ c 
                    [
                        @ pandocNode.jsonAttr
                    [
                        @ pandocNode.jsonText
        _ parentPandocNode.jsonBlocks.push
            @ jsonObject                        

    $include ./lists

    heading( h1 )
    heading( h2 )
    heading( h3 )
    heading( h4 )
    heading( h5 )
    heading( h6 )

    async-md( hr )
        pandocNodeInit()
        const jsonObject
            {
                @ t "HorizontalRule"
        _ pandocNode.jsonInlines.push
            @ jsonObject

    $include ./tables

    async-md( figure )
        # Figure Attr Caption [Block]
        # TODO jsonCaption
        pandocNodeInit()
            @ jsonAttr defaultAttr()
            { jsonCaption
            [ jsonBlocks
        var jsonObject
            {
                @ t "Figure"
                [ c
                    @ pandocNode.jsonAttr
                    @ pandocNode.caption
                    @ pandocNode.jsonBlocks
        pandocNodeExec()
            _ parentPandocNode.jsonBlocks.push
                @ jsonObject                        

    async-md( div )
        # Div Attr [Block]
        pandocNodeInit()
            @ jsonAttr defaultAttr()
            [ jsonBlocks
        var jsonObject
            {
                @ t "Div"
                [ c
                    @ pandocNode.jsonAttr
                    @ pandocNode.jsonBlocks
        pandocNodeExec()
            _ parentPandocNode.jsonBlocks.push
                @ jsonObject                        


                