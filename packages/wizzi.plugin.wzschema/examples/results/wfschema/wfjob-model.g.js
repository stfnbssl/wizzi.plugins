/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    package: wizzi-js@0.7.13
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var wfjobBase = (function () {
    function wfjobBase(name, sourceLineInfo) {
        _classCallCheck(this, wfjobBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    wfjobBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    wfjobBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    wfjobBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    wfjobBase.prototype.wzVerify = function() {
    }
    wfjobBase.prototype.wzInitialize = function() {
    }
    wfjobBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    wfjobBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    wfjobBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    wfjobBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    wfjobBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    wfjobBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    wfjobBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    wfjobBase.prototype.error = function(message, node) {
        throw new _md.wfjobModelException(message, node, this);
    }
    wfjobBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    wfjobBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach(item => 
            
                children.push(item.toJson())
            )
            result.wzChildren = children;
        }
    }
    return wfjobBase;
})();

_md.wfjobBase = wfjobBase;

// element wfjob
var wfjob = (function (wfjobBase) {
    _inherits(wfjob, wfjobBase);
    function wfjob(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(wfjob.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, wfjob);
        this.wzElement = "wfjob";
        // The base path for the source models used by this "wfjob".
        // The base folder path for the generated artifacts.
        // A short description of the job.
        // relation comment
        this.comments = [];
        // relation xrequire
        this.requires = [];
        // relation model
        this.models = [];
        // relation line
        this.lines = [];
        // relation production
        this.productions = [];
        // relation execFile
        this.execFiles = [];
    }
    wfjob.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    wfjob.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wfjob.prototype.addXrequire = function(name, sourceLineInfo) {
        var retval = new _md.xrequire(name, sourceLineInfo);
        retval.wzParent = this;
        this.requires.push(retval);
        return retval;
    }
    wfjob.prototype.getXrequire = function(name) {
        var found = null;
        this.requires.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wfjob.prototype.addModel = function(name, sourceLineInfo) {
        var retval = new _md.model(name, sourceLineInfo);
        retval.wzParent = this;
        this.models.push(retval);
        return retval;
    }
    wfjob.prototype.getModel = function(name) {
        var found = null;
        this.models.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wfjob.prototype.addLine = function(name, sourceLineInfo) {
        var retval = new _md.line(name, sourceLineInfo);
        retval.wzParent = this;
        this.lines.push(retval);
        return retval;
    }
    wfjob.prototype.getLine = function(name) {
        var found = null;
        this.lines.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wfjob.prototype.addProduction = function(name, sourceLineInfo) {
        var retval = new _md.production(name, sourceLineInfo);
        retval.wzParent = this;
        this.productions.push(retval);
        return retval;
    }
    wfjob.prototype.getProduction = function(name) {
        var found = null;
        this.productions.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wfjob.prototype.addExecFile = function(name, sourceLineInfo) {
        var retval = new _md.execFile(name, sourceLineInfo);
        retval.wzParent = this;
        this.execFiles.push(retval);
        return retval;
    }
    wfjob.prototype.getExecFile = function(name) {
        var found = null;
        this.execFiles.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    wfjob.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    wfjob.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.modelsBaseFolder)) {
            result["modelsBaseFolder"] = this.modelsBaseFolder;
        }
        if (!isEmpty(this.destBaseFolder)) {
            result["destBaseFolder"] = this.destBaseFolder;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
    }
    wfjob.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
        items = [];
        this.requires.forEach(item => 
        
            items.push(item.toJson())
        )
        result['requires'] = items;
        items = [];
        this.models.forEach(item => 
        
            items.push(item.toJson())
        )
        result['models'] = items;
        items = [];
        this.lines.forEach(item => 
        
            items.push(item.toJson())
        )
        result['lines'] = items;
        items = [];
        this.productions.forEach(item => 
        
            items.push(item.toJson())
        )
        result['productions'] = items;
        items = [];
        this.execFiles.forEach(item => 
        
            items.push(item.toJson())
        )
        result['execFiles'] = items;
    }
    wfjob.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'line') {
            return this.wzLoadToChildColl(child, _md.line, this.lines);
        }
        if (name === 'model') {
            return this.wzLoadToChildColl(child, _md.model, this.models);
        }
        if (name === 'title') {
            this.title = child.v; return true;
        }
        if (name === 'require') {
            return this.wzLoadToChildColl(child, _md.xrequire, this.requires);
        }
        if (name === 'execfile') {
            return this.wzLoadToChildColl(child, _md.execFile, this.execFiles);
        }
        if (name === 'exec-file') {
            return this.wzLoadToChildColl(child, _md.execFile, this.execFiles);
        }
        if (name === 'production') {
            return this.wzLoadToChildColl(child, _md.production, this.productions);
        }
        if (name === 'dest-base-folder') {
            this.destBaseFolder = child.v; return true;
        }
        else if (name === 'dest_base_folder') {
            this.destBaseFolder = child.v; return true;
        }
        if (name === 'models-base-folder') {
            this.modelsBaseFolder = child.v; return true;
        }
        else if (name === 'models_base_folder') {
            this.modelsBaseFolder = child.v; return true;
        }
        return false;
    }
    wfjob.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    wfjob.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.requires.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.models.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.lines.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.productions.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.execFiles.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    wfjob.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.requires.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.models.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.lines.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.productions.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.execFiles.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return wfjob;
})(wfjobBase);

_md.wfjob = wfjob;
// element comment
var comment = (function (wfjobBase) {
    _inherits(comment, wfjobBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    return comment;
})(wfjobBase);

_md.comment = comment;
// element xrequire
var xrequire = (function (wfjobBase) {
    _inherits(xrequire, wfjobBase);
    function xrequire(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(xrequire.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, xrequire);
        this.wzElement = "xrequire";
    }
    xrequire.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    xrequire.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    xrequire.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    return xrequire;
})(wfjobBase);

_md.xrequire = xrequire;
// element model
var model = (function (wfjobBase) {
    _inherits(model, wfjobBase);
    function model(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(model.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, model);
        this.allowedFORMATS = [ "json", "xml", "js"];
        this.FORMAT_JSON = "json";
        this.FORMAT_XML = "xml";
        this.FORMAT_JS = "js";
        this.wzElement = "model";
        //
        //
        //
        //
        //
        // relation modelRef
        // References to "model" instances acting as data context during this "model" evaluation.
        // A "model" is referenced by its name.
        this.modelRefs = [];
        // relation comment
        this.comments = [];
    }
    model.FORMAT_JSON = "json";
    
    model.FORMAT_XML = "xml";
    
    model.FORMAT_JS = "js";
    
    model.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    model.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    model.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    model.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    model.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    model.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
        if (!isEmpty(this.exportName)) {
            result["exportName"] = this.exportName;
        }
    }
    model.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.modelRefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['modelRefs'] = items;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    model.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'src') {
            this.src = child.v; return true;
        }
        if (name === 'format') {
            this.format = child.v; return true;
        }
        if (name === 'schema') {
            this.schema = child.v; return true;
        }
        if (name === 'modelref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'dump-file') {
            this.dumpFile = child.v; return true;
        }
        else if (name === 'dump_file') {
            this.dumpFile = child.v; return true;
        }
        if (name === 'model-ref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'export-name') {
            this.exportName = child.v; return true;
        }
        else if (name === 'export_name') {
            this.exportName = child.v; return true;
        }
        return false;
    }
    model.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    model.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("model", "format", this.format, this.allowedFORMATS, this);
        this.modelRefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    model.prototype.wzInitialize = function(ctx) {
        this.modelRefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return model;
})(wfjobBase);

_md.model = model;
// element modelRef
var modelRef = (function (wfjobBase) {
    _inherits(modelRef, wfjobBase);
    function modelRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelRef);
        this.wzElement = "modelRef";
        //
        // relation transformer
        // A model may have one or more transformers.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelCollection
        // TODO This is a one-to-one relation, not yet implemented.
        // Single items of a collection contained in the "model" may act as a context property
        // for artifacts where each collection item generates a separate artifact.
        this.modelCollections = [];
        // relation comment
        this.comments = [];
    }
    modelRef.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    modelRef.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelRef.prototype.addModelCollection = function(name, sourceLineInfo) {
        var retval = new _md.modelCollection(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelCollections.push(retval);
        return retval;
    }
    modelRef.prototype.getModelCollection = function(name) {
        var found = null;
        this.modelCollections.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelRef.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    modelRef.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelRef.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.exportName)) {
            result["exportName"] = this.exportName;
        }
    }
    modelRef.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.transformers.forEach(item => 
        
            items.push(item.toJson())
        )
        result['transformers'] = items;
        items = [];
        this.modelCollections.forEach(item => 
        
            items.push(item.toJson())
        )
        result['modelCollections'] = items;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    modelRef.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'modelcoll') {
            return this.wzLoadToChildColl(child, _md.modelCollection, this.modelCollections);
        }
        if (name === 'model-coll') {
            return this.wzLoadToChildColl(child, _md.modelCollection, this.modelCollections);
        }
        if (name === 'export-name') {
            this.exportName = child.v; return true;
        }
        else if (name === 'export_name') {
            this.exportName = child.v; return true;
        }
        if (name === 'transformer') {
            return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
        }
        return false;
    }
    modelRef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    modelRef.prototype.wzVerify = function(ctx) {
        this.transformers.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.modelCollections.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    modelRef.prototype.wzInitialize = function(ctx) {
        this.transformers.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.modelCollections.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\wfjob.wfschema.ittf
        */
        
        // loog 'this.modelCollection.wzName', this.modelCollection.wzName
        
        // loog 'this.collName', this.collName
        
        // loog 'this.collItemName', this.collItemName
        if (this.modelCollections.length > 0) {
            this.modelCollection = this.modelCollections[0];
            this.collName = this.modelCollection.wzName;
            this.collItemName = this.modelCollection.itemName;
            this.collPathTemplateValues = [];
            var i, i_items=this.modelCollection.pathTemplateValues, i_len=this.modelCollection.pathTemplateValues.length, item;
            for (i=0; i<i_len; i++) {
                item = this.modelCollection.pathTemplateValues[i];
                this.collPathTemplateValues.push({
                    token: item.token, 
                    attribute: item.attribute, 
                    function: item.function
                 })
            }
        }
        
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelRef;
})(wfjobBase);

_md.modelRef = modelRef;
// element modelCollection
var modelCollection = (function (wfjobBase) {
    _inherits(modelCollection, wfjobBase);
    function modelCollection(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(modelCollection.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, modelCollection);
        this.wzElement = "modelCollection";
        // The export name of a collection item when acting as a context property.
        // relation pathTemplateValue
        this.pathTemplateValues = [];
        // relation comment
        this.comments = [];
    }
    modelCollection.prototype.addPathTemplateValue = function(name, sourceLineInfo) {
        var retval = new _md.pathTemplateValue(name, sourceLineInfo);
        retval.wzParent = this;
        this.pathTemplateValues.push(retval);
        return retval;
    }
    modelCollection.prototype.getPathTemplateValue = function(name) {
        var found = null;
        this.pathTemplateValues.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelCollection.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    modelCollection.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    modelCollection.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    modelCollection.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.itemName)) {
            result["itemName"] = this.itemName;
        }
    }
    modelCollection.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.pathTemplateValues.forEach(item => 
        
            items.push(item.toJson())
        )
        result['pathTemplateValues'] = items;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    modelCollection.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'item-name') {
            this.itemName = child.v; return true;
        }
        else if (name === 'item_name') {
            this.itemName = child.v; return true;
        }
        if (name === 'pathtemplatevalue') {
            return this.wzLoadToChildColl(child, _md.pathTemplateValue, this.pathTemplateValues);
        }
        if (name === 'path-template-value') {
            return this.wzLoadToChildColl(child, _md.pathTemplateValue, this.pathTemplateValues);
        }
        return false;
    }
    modelCollection.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    modelCollection.prototype.wzVerify = function(ctx) {
        this.pathTemplateValues.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    modelCollection.prototype.wzInitialize = function(ctx) {
        this.pathTemplateValues.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return modelCollection;
})(wfjobBase);

_md.modelCollection = modelCollection;
// element pathTemplateValue
var pathTemplateValue = (function (wfjobBase) {
    _inherits(pathTemplateValue, wfjobBase);
    function pathTemplateValue(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(pathTemplateValue.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, pathTemplateValue);
        this.wzElement = "pathTemplateValue";
        //
        //
        //
        // relation comment
        this.comments = [];
    }
    pathTemplateValue.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    pathTemplateValue.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    pathTemplateValue.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    pathTemplateValue.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.attribute)) {
            result["attribute"] = this.attribute;
        }
        if (!isEmpty(this.function)) {
            result["function"] = this.function;
        }
        if (!isEmpty(this.token)) {
            result["token"] = this.token;
        }
    }
    pathTemplateValue.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    pathTemplateValue.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'token') {
            this.token = child.v; return true;
        }
        if (name === 'function') {
            this.function = child.v; return true;
        }
        if (name === 'attribute') {
            this.attribute = child.v; return true;
        }
        return false;
    }
    pathTemplateValue.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    pathTemplateValue.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    pathTemplateValue.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return pathTemplateValue;
})(wfjobBase);

_md.pathTemplateValue = pathTemplateValue;
// element transformer
var transformer = (function (wfjobBase) {
    _inherits(transformer, wfjobBase);
    function transformer(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(transformer.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, transformer);
        this.wzElement = "transformer";
        //
        // relation comment
        this.comments = [];
    }
    transformer.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    transformer.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    transformer.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    transformer.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.dumpFile)) {
            result["dumpFile"] = this.dumpFile;
        }
    }
    transformer.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    transformer.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'dump-file') {
            this.dumpFile = child.v; return true;
        }
        else if (name === 'dump_file') {
            this.dumpFile = child.v; return true;
        }
        return false;
    }
    transformer.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    transformer.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    transformer.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return transformer;
})(wfjobBase);

_md.transformer = transformer;
// element artifact
var artifact = (function (wfjobBase) {
    _inherits(artifact, wfjobBase);
    function artifact(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(artifact.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, artifact);
        this.allowedFORMATS = [ "json", "xml", "js"];
        this.FORMAT_JSON = "json";
        this.FORMAT_XML = "xml";
        this.FORMAT_JS = "js";
        this.wzElement = "artifact";
        //
        //
        //
        //
        //
        this.isCompile = false;
        //
        this.isWfJob = false;
        //
        this.isWfModelType = false;
        //
        //
        //
        //
        // No artifact should be emitted. Front matter properties are collected.
        this.noOutput = false;
        // relation transformer
        // When the artifact source is an Ittf document, the loaded WizziModel may need
        // one or more transformations before being passed to the artifact generator.
        // Transformers are chained and the output of a transformation
        // is the input for the next one.
        this.transformers = [];
        // relation modelRef
        // References to 'model/s' acting as context objects.
        // In case of a final artifact must not be declared.
        this.modelRefs = [];
        // relation comment
        this.comments = [];
    }
    artifact.FORMAT_JSON = "json";
    
    artifact.FORMAT_XML = "xml";
    
    artifact.FORMAT_JS = "js";
    
    artifact.prototype.addTransformer = function(name, sourceLineInfo) {
        var retval = new _md.transformer(name, sourceLineInfo);
        retval.wzParent = this;
        this.transformers.push(retval);
        return retval;
    }
    artifact.prototype.getTransformer = function(name) {
        var found = null;
        this.transformers.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    artifact.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    artifact.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    artifact.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    artifact.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    artifact.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    artifact.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.src)) {
            result["src"] = this.src;
        }
        if (!isEmpty(this.ignore)) {
            result["ignore"] = this.ignore;
        }
        if (!isEmpty(this.schema)) {
            result["schema"] = this.schema;
        }
        if (!isEmpty(this.format)) {
            result["format"] = this.format;
        }
        result["isCompile"] = this.isCompile;
        result["isWfJob"] = this.isWfJob;
        result["isWfModelType"] = this.isWfModelType;
        if (!isEmpty(this.generator)) {
            result["generator"] = this.generator;
        }
        if (!isEmpty(this.destPath)) {
            result["destPath"] = this.destPath;
        }
        if (!isEmpty(this.extension)) {
            result["extension"] = this.extension;
        }
        if (!isEmpty(this.collection)) {
            result["collection"] = this.collection;
        }
        result["noOutput"] = this.noOutput;
    }
    artifact.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.transformers.forEach(item => 
        
            items.push(item.toJson())
        )
        result['transformers'] = items;
        items = [];
        this.modelRefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['modelRefs'] = items;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    artifact.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'src') {
            this.src = child.v; return true;
        }
        if (name === 'format') {
            this.format = child.v; return true;
        }
        if (name === 'ignore') {
            this.ignore = child.v; return true;
        }
        if (name === 'schema') {
            this.schema = child.v; return true;
        }
        if (name === 'modelref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'dest-path') {
            this.destPath = child.v; return true;
        }
        else if (name === 'dest_path') {
            this.destPath = child.v; return true;
        }
        if (name === 'extension') {
            this.extension = child.v; return true;
        }
        if (name === 'generator') {
            this.generator = child.v; return true;
        }
        if (name === 'is-wf-job') {
            this.isWfJob = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_wf_job') {
            this.isWfJob = parseboolean(child.v, true, child); return true;
        }
        if (name === 'model-ref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'no-output') {
            this.noOutput = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'no_output') {
            this.noOutput = parseboolean(child.v, true, child); return true;
        }
        if (name === 'collection') {
            this.collection = child.v; return true;
        }
        if (name === 'is-compile') {
            this.isCompile = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_compile') {
            this.isCompile = parseboolean(child.v, true, child); return true;
        }
        if (name === 'transformer') {
            return this.wzLoadToChildColl(child, _md.transformer, this.transformers);
        }
        if (name === 'is-wf-model-type') {
            this.isWfModelType = parseboolean(child.v, true, child); return true;
        }
        else if (name === 'is_wf_model_type') {
            this.isWfModelType = parseboolean(child.v, true, child); return true;
        }
        return false;
    }
    artifact.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    artifact.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("artifact", "format", this.format, this.allowedFORMATS, this);
        this.transformers.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.modelRefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    artifact.prototype.wzInitialize = function(ctx) {
        this.transformers.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.modelRefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return artifact;
})(wfjobBase);

_md.artifact = artifact;
// element line
var line = (function (wfjobBase) {
    _inherits(line, wfjobBase);
    function line(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(line.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, line);
        this.wzElement = "line";
        // The source folder of the artifact templates of this line.
        //
        // relation artifact
        // The artifacts of the "line"
        this.artifacts = [];
        // relation comment
        this.comments = [];
    }
    line.prototype.addArtifact = function(name, sourceLineInfo) {
        var retval = new _md.artifact(name, sourceLineInfo);
        retval.wzParent = this;
        this.artifacts.push(retval);
        return retval;
    }
    line.prototype.getArtifact = function(name) {
        var found = null;
        this.artifacts.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    line.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    line.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    line.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    line.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.cwdFolder)) {
            result["cwdFolder"] = this.cwdFolder;
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    line.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.artifacts.forEach(item => 
        
            items.push(item.toJson())
        )
        result['artifacts'] = items;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    line.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'artifact') {
            return this.wzLoadToChildColl(child, _md.artifact, this.artifacts);
        }
        if (name === 'cwd-folder') {
            this.cwdFolder = child.v; return true;
        }
        else if (name === 'cwd_folder') {
            this.cwdFolder = child.v; return true;
        }
        if (name === 'dest-folder') {
            this.destFolder = child.v; return true;
        }
        else if (name === 'dest_folder') {
            this.destFolder = child.v; return true;
        }
        return false;
    }
    line.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    line.prototype.wzVerify = function(ctx) {
        this.artifacts.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    line.prototype.wzInitialize = function(ctx) {
        this.artifacts.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return line;
})(wfjobBase);

_md.line = line;
// element lineRef
var lineRef = (function (wfjobBase) {
    _inherits(lineRef, wfjobBase);
    function lineRef(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(lineRef.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, lineRef);
        this.wzElement = "lineRef";
        // relation comment
        this.comments = [];
    }
    lineRef.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    lineRef.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    lineRef.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    lineRef.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.dummy)) {
            result["dummy"] = this.dummy;
        }
    }
    lineRef.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    lineRef.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'dummy') {
            this.dummy = child.v; return true;
        }
        return false;
    }
    lineRef.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    lineRef.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    lineRef.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return lineRef;
})(wfjobBase);

_md.lineRef = lineRef;
// element production
var production = (function (wfjobBase) {
    _inherits(production, wfjobBase);
    function production(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(production.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, production);
        this.wzElement = "production";
        // The destination folder of the generated artifacts.
        // relation modelRef
        // References to the context WizziWodels used by this "production".
        this.modelRefs = [];
        // relation lineRef
        // References to the "line(s)" to be generated.
        this.lineRefs = [];
        // relation comment
        this.comments = [];
    }
    production.prototype.addModelRef = function(name, sourceLineInfo) {
        var retval = new _md.modelRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.modelRefs.push(retval);
        return retval;
    }
    production.prototype.getModelRef = function(name) {
        var found = null;
        this.modelRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    production.prototype.addLineRef = function(name, sourceLineInfo) {
        var retval = new _md.lineRef(name, sourceLineInfo);
        retval.wzParent = this;
        this.lineRefs.push(retval);
        return retval;
    }
    production.prototype.getLineRef = function(name) {
        var found = null;
        this.lineRefs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    production.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    production.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    production.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    production.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.destFolder)) {
            result["destFolder"] = this.destFolder;
        }
    }
    production.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.modelRefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['modelRefs'] = items;
        items = [];
        this.lineRefs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['lineRefs'] = items;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    production.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'lineref') {
            return this.wzLoadToChildColl(child, _md.lineRef, this.lineRefs);
        }
        if (name === 'line-ref') {
            return this.wzLoadToChildColl(child, _md.lineRef, this.lineRefs);
        }
        if (name === 'modelref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'model-ref') {
            return this.wzLoadToChildColl(child, _md.modelRef, this.modelRefs);
        }
        if (name === 'dest-folder') {
            this.destFolder = child.v; return true;
        }
        else if (name === 'dest_folder') {
            this.destFolder = child.v; return true;
        }
        return false;
    }
    production.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    production.prototype.wzVerify = function(ctx) {
        this.modelRefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.lineRefs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    production.prototype.wzInitialize = function(ctx) {
        this.modelRefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.lineRefs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\wfjob.wfschema.ittf
        */
        this.wfjob = this.wzParent;
        var i, i_items=this.modelRefs, i_len=this.modelRefs.length, modelRef;
        for (i=0; i<i_len; i++) {
            modelRef = this.modelRefs[i];
            // loog 'production.wzinitialize.modelRef', modelRef.wzName
            var model = this.wfjob.getModel(modelRef.wzName);
            if (model == null) {
                this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
            }
            modelRef.___model = model;
        }
        this.lines = [];
        var i, i_items=this.lineRefs, i_len=this.lineRefs.length, lineRef;
        for (i=0; i<i_len; i++) {
            lineRef = this.lineRefs[i];
            // loog 'production.wzinitialize.lineRef', lineRef.wzName
            var line = this.wfjob.getLine(lineRef.wzName);
            if (line == null) {
                this.error('line ' + lineRef.wzName + ' not found.', lineRef);
            }
            this.lines.push(line);
            var j, j_items=line.artifacts, j_len=line.artifacts.length, artifact;
            for (j=0; j<j_len; j++) {
                artifact = line.artifacts[j];
                // loog 'production.wzinitialize.artifact', artifact.wzName
                var k, k_items=artifact.modelRefs, k_len=artifact.modelRefs.length, modelRef;
                for (k=0; k<k_len; k++) {
                    modelRef = artifact.modelRefs[k];
                    // loog 'production.wzinitialize.artifact.modelRef', modelRef.wzName
                    var model = this.wfjob.getModel(modelRef.wzName);
                    if (model == null) {
                        this.error('Model ' + modelRef.wzName + ' not found.', modelRef);
                    }
                    modelRef.___model = model;
                }
            }
        }
        
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return production;
})(wfjobBase);

_md.production = production;
// element env
var env = (function (wfjobBase) {
    _inherits(env, wfjobBase);
    function env(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(env.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, env);
        this.allowedTYPES = [ "string", "boolean", "number"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_NUMBER = "number";
        this.wzElement = "env";
        this.type = "string";
    }
    env.TYPE_STRING = "string";
    
    env.TYPE_XBOOLEAN = "boolean";
    
    env.TYPE_NUMBER = "number";
    
    env.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    env.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.__name)) {
            result["__name"] = this.__name;
        }
        if (!isEmpty(this.__value)) {
            result["__value"] = this.__value;
        }
    }
    env.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    env.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === '__name') {
            this.__name = child.v; return true;
        }
        if (name === '__value') {
            this.__value = child.v; return true;
        }
        return false;
    }
    env.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    env.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("env", "type", this.type, this.allowedTYPES, this);
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    env.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\wfjob.wfschema.ittf
        */
        var nv = verify.parseNameValue(this.wzName);
        this.__name = nv.name;
        this.__value = verify.convert(nv.value, this.type);
        
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return env;
})(wfjobBase);

_md.env = env;
// element arg
var arg = (function (wfjobBase) {
    _inherits(arg, wfjobBase);
    function arg(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(arg.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, arg);
        this.allowedTYPES = [ "string", "boolean", "number"];
        this.TYPE_STRING = "string";
        this.TYPE_XBOOLEAN = "boolean";
        this.TYPE_NUMBER = "number";
        this.wzElement = "arg";
        this.type = "string";
    }
    arg.TYPE_STRING = "string";
    
    arg.TYPE_XBOOLEAN = "boolean";
    
    arg.TYPE_NUMBER = "number";
    
    arg.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    arg.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.type)) {
            result["type"] = this.type;
        }
        if (!isEmpty(this.__name)) {
            result["__name"] = this.__name;
        }
        if (!isEmpty(this.__value)) {
            result["__value"] = this.__value;
        }
    }
    arg.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
    }
    arg.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === 'type') {
            this.type = child.v; return true;
        }
        if (name === '__name') {
            this.__name = child.v; return true;
        }
        if (name === '__value') {
            this.__value = child.v; return true;
        }
        return false;
    }
    arg.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    arg.prototype.wzVerify = function(ctx) {
        ctx.verifyEnum("arg", "type", this.type, this.allowedTYPES, this);
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    arg.prototype.wzInitialize = function(ctx) {
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\wfjob.wfschema.ittf
        */
        var nv = verify.parseNameValue(this.wzName);
        if (nv.value && nv.value.length > 0) {
            this.__name = nv.name;
            this.__value = verify.convert(nv.value, this.type);
        }
        else {
            this.__value = verify.convert(nv.name, this.type);
        }
        
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return arg;
})(wfjobBase);

_md.arg = arg;
// element execFile
var execFile = (function (wfjobBase) {
    _inherits(execFile, wfjobBase);
    function execFile(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(execFile.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, execFile);
        this.wzElement = "execFile";
        // The path to the executable.
        // A short description of the execution.
        // Current working directory of the child process.
        // Default: 'utf8'
        // Default: 0
        this.timeout = 0;
        // relation arg
        this.args = [];
        // relation env
        this.envs = [];
        // relation comment
        this.comments = [];
    }
    execFile.prototype.addArg = function(name, sourceLineInfo) {
        var retval = new _md.arg(name, sourceLineInfo);
        retval.wzParent = this;
        this.args.push(retval);
        return retval;
    }
    execFile.prototype.getArg = function(name) {
        var found = null;
        this.args.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    execFile.prototype.addEnv = function(name, sourceLineInfo) {
        var retval = new _md.env(name, sourceLineInfo);
        retval.wzParent = this;
        this.envs.push(retval);
        return retval;
    }
    execFile.prototype.getEnv = function(name) {
        var found = null;
        this.envs.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    execFile.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    execFile.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    execFile.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    execFile.prototype.toJsonProperties = function(result) {
        _md.wfjobBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
        if (!isEmpty(this.exePath)) {
            result["exePath"] = this.exePath;
        }
        if (!isEmpty(this.title)) {
            result["title"] = this.title;
        }
        if (!isEmpty(this.cwd)) {
            result["cwd"] = this.cwd;
        }
        if (!isEmpty(this.encoding)) {
            result["encoding"] = this.encoding;
        }
        result["timeout"] = this.timeout;
        if (!isEmpty(this.__options)) {
            result["__options"] = this.__options;
        }
        if (!isEmpty(this.__args)) {
            result["__args"] = this.__args;
        }
    }
    execFile.prototype.toJsonChildren = function(result) {
        _md.wfjobBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.args.forEach(item => 
        
            items.push(item.toJson())
        )
        result['args'] = items;
        items = [];
        this.envs.forEach(item => 
        
            items.push(item.toJson())
        )
        result['envs'] = items;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    execFile.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === 'arg') {
            return this.wzLoadToChildColl(child, _md.arg, this.args);
        }
        if (name === 'cwd') {
            this.cwd = child.v; return true;
        }
        if (name === 'env') {
            return this.wzLoadToChildColl(child, _md.env, this.envs);
        }
        if (name === 'title') {
            this.title = child.v; return true;
        }
        if (name === '__args') {
            this.__args = child.v; return true;
        }
        if (name === 'timeout') {
            this.timeout = parseinteger(child.v, null, child); return true;
        }
        if (name === 'exe-path') {
            this.exePath = child.v; return true;
        }
        else if (name === 'exe_path') {
            this.exePath = child.v; return true;
        }
        else if (name === 'encoding') {
            this.encoding = child.v; return true;
        }
        if (name === '__options') {
            this.__options = child.v; return true;
        }
        return false;
    }
    execFile.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.wfjobModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    execFile.prototype.wzVerify = function(ctx) {
        this.args.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.envs.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.wfjobBase.prototype.wzVerify.call(this, ctx);
    }
    execFile.prototype.wzInitialize = function(ctx) {
        this.args.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.envs.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\wfjob.wfschema.ittf
        */
        var options = {};
        if (this.cwd && this.cwd.length > 0) {
            options.cwd = this.cwd;
        }
        if (this.encoding && this.encoding.length > 0) {
            options.encoding = this.encoding;
        }
        if (this.timeout > 0) {
            options.timeout = this.timeout;
        }
        if (this.envs.length > 0) {
            var envObj = {};
            var i, i_items=this.envs, i_len=this.envs.length, env;
            for (i=0; i<i_len; i++) {
                env = this.envs[i];
                envObj[env.__name] = env.__value;
            }
            options.env = envObj;
        }
        this.__options = options;
        this.__args = [];
        var i, i_items=this.args, i_len=this.args.length, arg;
        for (i=0; i<i_len; i++) {
            arg = this.args[i];
            this.__args.push(arg.__value);
        }
        
        _md.wfjobBase.prototype.wzInitialize.call(this, ctx);
    }
    return execFile;
})(wfjobBase);

_md.execFile = execFile;
_md.__tagElementMapping = { '#': 'comment', 'require': 'xrequire', 'exec-file': 'execFile', 'execfile': 'execFile', 'model-ref': 'modelRef', 'modelref': 'modelRef', 'model-coll': 'modelCollection', 'modelcoll': 'modelCollection', 'path-template-value': 'pathTemplateValue', 'pathtemplatevalue': 'pathTemplateValue', 'line-ref': 'lineRef', 'lineref': 'lineRef' };
// model/replaceUnknownElement( )
var wfjobModelException = (function () {
    function wfjobModelException(message, node, instance) {
        _classCallCheck(this, wfjobModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    wfjobModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: wfjobModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return wfjobModelException;
})();

_md.wfjobModelException = wfjobModelException;
var wfjobContext = (function () {
    function wfjobContext() {
        _classCallCheck(this, wfjobContext);
        this.validationErrors = [];
    }
    wfjobContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    wfjobContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    wfjobContext.prototype.verifyEnum = function(valueType, valueName, value, allowed, node) {
        if (value && allowed.indexOf(value) < 0) {
            var allowedStr = 'allowed: ' + allowed.join(', ');
            this.validationErrors.push(valueType + ' ' + valueName + ' has an invalid value: ' + value + ' ' + allowedStr + '. At ' + (node.wzSourceLineInfo ? node.wzSourceLineInfo.toString(node) : 'location unavailable'))
        }
    }
    return wfjobContext;
})();

_md.wfjobContext = wfjobContext;
function parsestring(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    return value;
}
function parseboolean(value, defaultValue, node) {
    if (isEmpty( value )) {
        return defaultValue;
    }
    if (!isBoolean(value)) {
        throw new wfjobModelException('Must be a boolean value (\"true\" or \"false\"), got:' + value, node);
    }
    return value === 'true' ? true : false;
}
function parseinteger(value, defaultValue, node) {
    if (isEmpty(value)) {
        return defaultValue;
    }
    if (!isInt(value)) {
        throw new wfjobModelException('Must be an int value, got:' + value, node);
    }
    return parseInt(value, 10);
}
function isString(value) {
    return (typeof value === 'string' || value instanceof String);
}
function isEmpty(value) {
    return !isString( value ) || value.length === 0;
}
function isBoolean(value) {
    return value === 'true' || value === 'false';
}
function isArray(value) {
    return Object.prototype.toString.call( value ) === '[object Array]';
}
function isNumber(value) {
    return !isArray( value ) && (value - parseFloat( value ) + 1) >= 0;
}
function isInt(value) {
    return isNumber( value );
}

