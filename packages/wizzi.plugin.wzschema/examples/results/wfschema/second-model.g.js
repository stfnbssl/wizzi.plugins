/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    package: wizzi-js@0.7.13
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\lib\artifacts\wfschema\model\gen\ittf\wfschema-model.js.ittf
*/
'use strict';
// generated by v6-wizzi-js.artifacts.js.module.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var util = require('util');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var wzutils = require('wizzi-utils');
var verify = wzutils.verify;
var beta = require('tau');

//

/*
    artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
    package: wizzi-js@0.7.13
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\second.wfschema.ittf
*/
function Hello() {
    console.log("Hello world", __filename);
}


var _md = module.exports = {};

var wzSourceLineInfo = (function () {
    function wzSourceLineInfo(row, col, sourceKey) {
        _classCallCheck(this, wzSourceLineInfo);
        this.row = row;
        this.col = col;
        this.sourceKey = sourceKey;
    }
    wzSourceLineInfo.prototype.toString = function(instance) {
        if (instance) {
            return 'row: ' + this.row + ', col: ' + this.col + ', file: ' + instance.wzSourceFilepath(this.sourceKey);
        }
        else {
            return 'row: ' + this.row + ', col: ' + this.col + ', sourceKey: ' + this.sourceKey;
        }
    }
    return wzSourceLineInfo;
})();

_md.wzSourceLineInfo = wzSourceLineInfo;
var secondBase = (function () {
    function secondBase(name, sourceLineInfo) {
        _classCallCheck(this, secondBase);
        this.wzName = name || '';
        this.wzParent = null;
        this.wzSourceLineInfo = sourceLineInfo;
        this.wzChildren = [];
    }
    secondBase.prototype.wzRoot = function() {
        return this.wzParent == null ? this : this.wzParent.wzRoot();
    }
    secondBase.prototype.wzSourceFilepath = function(sourceKey) {
        var sk = sourceKey || this.wzSourceLineInfo.sourceKey;
        return this.wzRoot().loadHistory.getIttfDocumentUri(sk);
    }
    secondBase.prototype.wzSourceErrorLines = function(node, message) {
        return this.wzRoot().loadHistory.getIttfDocumentErrorLines(node.u, {
                row: node.r, 
                col: node.c, 
                description: message
             }, true);
    }
    secondBase.prototype.wzVerify = function() {
    }
    secondBase.prototype.wzInitialize = function() {
    }
    secondBase.prototype.wzInitializeAsync = function(ctx, callback) {
        callback(null);
    }
    secondBase.prototype.wzAddChild = function(node) {
        node.wzParent = this;
        this.wzChildren.push(node);
    }
    secondBase.prototype.wzAddChildToColl = function(node, coll) {
        node.wzParent = this;
        node.wzMoved = true;
        coll.push(node);
    }
    secondBase.prototype.wzMoveChildToColl = function(node, coll, fromColl) {
        var index = fromColl.indexOf(node);
        if (index < 0) {
            this.error('wzMoveChildToColl error. The from collection does not contain the node.', node)
        }
        fromColl.splice(index, 1);
        this.wzAddChildToColl(node, coll);
    }
    secondBase.prototype.wzLoadToChildColl = function(child, type, coll) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        coll.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    secondBase.prototype.wzCreateChildColl = function(tag, name, type, coll) {
        var item = new type(name, this.wzSourceLineInfo);
        item.wzTag = tag;
        item.wzParent = this;
        item.wzCreated = true;
        coll.push(item);
        return item;
    }
    secondBase.prototype.wzLoadToChildren = function(child, type) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        item.wzTag = child.n;
        item.wzParent = this;
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        this.wzChildren.push(item);
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    secondBase.prototype.wzLoadOneToOne = function(child, type, fieldName) {
        var item = new type(child.v, new wzSourceLineInfo(child.r, child.c, child.u));
        if (child.wzMTreeData) {
            item.wzMTreeData = child.wzMTreeData;
        }
        item.wzParent = this;
        this[fieldName] = item;
        if (item.loadFromNode) {
            item.loadFromNode(child);
        }
        return true;
    }
    secondBase.prototype.wzRemove = function(fromColl) {
        var index = fromColl.indexOf(this);
        if (index < 0) {
            this.error('wzRemove error. The from collection does not contain the node.', this)
        }
        fromColl.splice(index, 1);
    }
    secondBase.prototype.error = function(message, node) {
        throw new _md.secondModelException(message, node, this);
    }
    secondBase.prototype.toJsonProperties = function(result) {
        result.wzElement = this.wzElement;
        result.wzTag = this.wzTag;
        result.wzName = this.wzName;
    }
    secondBase.prototype.toJsonChildren = function(result) {
        if (this.wzChildren.length > 0) {
            var children = [];
            this.wzChildren.forEach(item => 
            
                children.push(item.toJson())
            )
            result.wzChildren = children;
        }
    }
    return secondBase;
})();

_md.secondBase = secondBase;

// element comment
var comment = (function (secondBase) {
    _inherits(comment, secondBase);
    function comment(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(comment.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, comment);
        this.wzElement = "comment";
        // relation comment
        this.comments = [];
    }
    comment.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    comment.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    comment.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    comment.prototype.toJsonProperties = function(result) {
        _md.secondBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    comment.prototype.toJsonChildren = function(result) {
        _md.secondBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    comment.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        return false;
    }
    comment.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.secondModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    comment.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.secondBase.prototype.wzVerify.call(this, ctx);
    }
    comment.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.secondBase.prototype.wzInitialize.call(this, ctx);
    }
    return comment;
})(secondBase);

_md.comment = comment;
// element directive
var directive = (function (secondBase) {
    _inherits(directive, secondBase);
    function directive(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(directive.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, directive);
        this.wzElement = "directive";
        // relation comment
        this.comments = [];
    }
    directive.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    directive.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    directive.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    directive.prototype.toJsonProperties = function(result) {
        _md.secondBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    directive.prototype.toJsonChildren = function(result) {
        _md.secondBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
    }
    directive.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        return false;
    }
    directive.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.secondModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    directive.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.secondBase.prototype.wzVerify.call(this, ctx);
    }
    directive.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.secondBase.prototype.wzInitialize.call(this, ctx);
    }
    return directive;
})(secondBase);

_md.directive = directive;
// element directiveA
var directiveA = (function (directive) {
    _inherits(directiveA, directive);
    function directiveA(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(directiveA.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, directiveA);
        this.wzElement = "directiveA";
    }
    directiveA.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    directiveA.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    directiveA.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return directiveA;
})(directive);

_md.directiveA = directiveA;
// element directiveB
var directiveB = (function (directive) {
    _inherits(directiveB, directive);
    function directiveB(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(directiveB.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, directiveB);
        this.wzElement = "directiveB";
    }
    directiveB.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    directiveB.prototype.toJsonProperties = function(result) {
        _md.directive.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    directiveB.prototype.toJsonChildren = function(result) {
        _md.directive.prototype.toJsonChildren.call(this, result);
    }
    return directiveB;
})(directive);

_md.directiveB = directiveB;
// element basenode
var basenode = (function (secondBase) {
    _inherits(basenode, secondBase);
    function basenode(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(basenode.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, basenode);
        this.wzElement = "basenode";
        // relation comment
        this.comments = [];
        // relation directive
        this.directives = [];
    }
    basenode.prototype.addComment = function(name, sourceLineInfo) {
        var retval = new _md.comment(name, sourceLineInfo);
        retval.wzParent = this;
        this.comments.push(retval);
        return retval;
    }
    basenode.prototype.getComment = function(name) {
        var found = null;
        this.comments.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    basenode.prototype.getDirective = function(name) {
        var found = null;
        this.directives.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    basenode.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    basenode.prototype.toJsonProperties = function(result) {
        _md.secondBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    basenode.prototype.toJsonChildren = function(result) {
        _md.secondBase.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.comments.forEach(item => 
        
            items.push(item.toJson())
        )
        result['comments'] = items;
        items = [];
        this.directives.forEach(item => 
        
            items.push(item.toJson())
        )
        result['directives'] = items;
    }
    basenode.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        if (name === '#') {
            return this.wzLoadToChildColl(child, _md.comment, this.comments);
        }
        if (name === '@') {
            return this.wzLoadToChildColl(child, _md.directiveA, this.directives);
        }
        if (name === '§') {
            return this.wzLoadToChildColl(child, _md.directiveB, this.directives);
        }
        return false;
    }
    basenode.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.secondModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    basenode.prototype.wzVerify = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzVerify(ctx)
        )
        this.directives.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.secondBase.prototype.wzVerify.call(this, ctx);
    }
    basenode.prototype.wzInitialize = function(ctx) {
        this.comments.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        this.directives.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.secondBase.prototype.wzInitialize.call(this, ctx);
    }
    return basenode;
})(secondBase);

_md.basenode = basenode;
// element node
var node = (function (basenode) {
    _inherits(node, basenode);
    function node(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(node.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, node);
        this.wzElement = "node";
        // relation node
        this.nodes = [];
    }
    node.prototype.addNode = function(name, sourceLineInfo) {
        var retval = new _md.node(name, sourceLineInfo);
        retval.wzParent = this;
        this.nodes.push(retval);
        return retval;
    }
    node.prototype.getNode = function(name) {
        var found = null;
        this.nodes.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    node.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    node.prototype.toJsonProperties = function(result) {
        _md.basenode.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    node.prototype.toJsonChildren = function(result) {
        _md.basenode.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.nodes.forEach(item => 
        
            items.push(item.toJson())
        )
        result['nodes'] = items;
    }
    node.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === '-') {
            return this.wzLoadToChildColl(child, _md.node, this.nodes);
        }
        if (name === 'second') {
            return this.wzLoadToChildColl(child, _md.second, this.nodes);
        }
        ok = _md.basenode.prototype.loadChild.call(this, child);
        return ok;
    }
    node.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.secondModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    node.prototype.wzVerify = function(ctx) {
        this.nodes.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.basenode.prototype.wzVerify.call(this, ctx);
    }
    node.prototype.wzInitialize = function(ctx) {
        this.nodes.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        _md.basenode.prototype.wzInitialize.call(this, ctx);
    }
    return node;
})(basenode);

_md.node = node;
// element second
var second = (function (node) {
    _inherits(second, node);
    function second(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(second.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, second);
        this.wzElement = "second";
        // relation kind
        this.kinds = [];
    }
    second.prototype.getKind = function(name) {
        var found = null;
        this.kinds.forEach(function(item) {
            found = found || (item.wzName === name ? item : null);
        })
        return found;
    }
    second.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    second.prototype.toJsonProperties = function(result) {
        _md.node.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    second.prototype.toJsonChildren = function(result) {
        _md.node.prototype.toJsonChildren.call(this, result);
        var items, item;
        items = [];
        this.kinds.forEach(item => 
        
            items.push(item.toJson())
        )
        result['kinds'] = items;
    }
    second.prototype.loadChild = function(child) {
        var ok = false, name = child.n.toLowerCase();
        if (name === 'k1') {
            return this.wzLoadToChildColl(child, _md.kind1, this.kinds);
        }
        else if (name === 'k2') {
            return this.wzLoadToChildColl(child, _md.kind2, this.kinds);
        }
        ok = _md.node.prototype.loadChild.call(this, child);
        return ok;
    }
    second.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.secondModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    second.prototype.wzVerify = function(ctx) {
        this.kinds.forEach(item => 
        
            item.wzVerify(ctx)
        )
        _md.node.prototype.wzVerify.call(this, ctx);
    }
    second.prototype.wzInitialize = function(ctx) {
        this.kinds.forEach(item => 
        
            item.wzInitialize(ctx)
        )
        
        /*
            artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
            package: wizzi-js@0.7.13
            primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\second.wfschema.ittf
        */
        console.log("Hello", __filename);
        this.initialize = 'Whaao!';
        
        _md.node.prototype.wzInitialize.call(this, ctx);
    }
    return second;
})(node);

_md.second = second;
// element kind
var kind = (function (secondBase) {
    _inherits(kind, secondBase);
    function kind(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(kind.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, kind);
        this.wzElement = "kind";
    }
    kind.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    kind.prototype.toJsonProperties = function(result) {
        _md.secondBase.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    kind.prototype.toJsonChildren = function(result) {
        _md.secondBase.prototype.toJsonChildren.call(this, result);
    }
    kind.prototype.loadChild = function(child) {
        var name = child.n.toLowerCase();
        return false;
    }
    kind.prototype.loadFromNode = function(node) {
        node.children.forEach((item) => {
        
            var loaded = this.loadChild(item);
            if (!loaded) {
                throw new _md.secondModelException("Tag not recognized: " + item.n, item, this);
            }
        }
        )
    }
    return kind;
})(secondBase);

_md.kind = kind;
// element kind1
var kind1 = (function (kind) {
    _inherits(kind1, kind);
    function kind1(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(kind1.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, kind1);
        this.wzElement = "kind1";
    }
    kind1.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    kind1.prototype.toJsonProperties = function(result) {
        _md.kind.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    kind1.prototype.toJsonChildren = function(result) {
        _md.kind.prototype.toJsonChildren.call(this, result);
    }
    return kind1;
})(kind);

_md.kind1 = kind1;
// element kind2
var kind2 = (function (kind) {
    _inherits(kind2, kind);
    function kind2(name, sourceLineInfo) {
        _get(Object.getPrototypeOf(kind2.prototype), 'constructor', this).call(this, name,sourceLineInfo);
        _classCallCheck(this, kind2);
        this.wzElement = "kind2";
    }
    kind2.prototype.toJson = function() {
        var result = {};
        this.toJsonProperties(result);
        this.toJsonChildren(result);
        return result;
    }
    kind2.prototype.toJsonProperties = function(result) {
        _md.kind.prototype.toJsonProperties.call(this, result);
        if (this.__jsonProps) {
            for (var k in this.__jsonProps) {
                result[k] = this.__jsonProps[k];
            }
        }
    }
    kind2.prototype.toJsonChildren = function(result) {
        _md.kind.prototype.toJsonChildren.call(this, result);
    }
    return kind2;
})(kind);

_md.kind2 = kind2;
_md.__tagElementMapping = { '#': 'comment', '@': 'directiveA', '§': 'directiveB', '-': 'node', 'k1': 'kind1', 'k2': 'kind2' };
// model/replaceUnknownElement( )
var secondModelException = (function () {
    function secondModelException(message, node, instance) {
        _classCallCheck(this, secondModelException);
        // VIA 14/2/21 (pollutes log) set this.node = node
        // VIA 14/2/21 (pollutes log) set this.instance = instance
        if (node && instance) {
            this.message = message + ', wzElement: ' + node.wzElement + ', wzName:' + (node.wzName || '') + ', row:' + node.r + ', col:' + node.c + ', source:' + instance.wzSourceFilepath(node.u);
            this.errorLines = instance.wzSourceErrorLines(node, message)
            ;
        }
        else if (instance) {
            this.message = message + instance.wzSourceLineInfo.toString(instance);
        }
        else {
            this.message = message;
        }
        console.log("[31m%s[0m", 'message', this.message);
        this.stack = (new Error()).stack;
    }
    secondModelException.prototype.toString = function() {
        var msg = [];
        msg.push(chalk.red('Error: ' + this.message));
        msg.push(chalk.red('  name: secondModelException'));
        if (this.node) {
            msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c));
        }
        if (this.instance) {
            if (this.node) {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)));
            }
            else {
                msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)));
            }
        }
        else {
            msg.push(chalk.yellow('  uri: unknown'));
        }
        if (this.errorLines) {
            var i, i_items=this.errorLines, i_len=this.errorLines.length, line;
            for (i=0; i<i_len; i++) {
                line = this.errorLines[i];
                msg.push(chalk.yellow('  ' + line));
            }
        }
        return msg.join('\n');
    }
    return secondModelException;
})();

_md.secondModelException = secondModelException;
var secondContext = (function () {
    function secondContext() {
        _classCallCheck(this, secondContext);
        this.validationErrors = [];
    }
    secondContext.prototype.schemaIsValid = function() {
        return this.validationErrors.length == 0;
    }
    secondContext.prototype.addError = function(message, node) {
        var at = node ? ' At ' + node.wzSourceLineInfo.toString(node) : '';
        this.validationErrors.push(message + at)
    }
    return secondContext;
})();

_md.secondContext = secondContext;
function methodX(alpha) {
    
    /*
        artifact generator: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\node_modules\wizzi-js\lib\artifacts\js\module\gen\main.js
        package: wizzi-js@0.7.13
        primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi.plugins\packages\wizzi.plugin.wzschema\examples\ittf\second.wfschema.ittf
    */
    console.log('Bye', __filename);
    
}

