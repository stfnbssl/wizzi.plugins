$group

	#
		# The method called by 'wizzi.wizziFactory.generateModelDoms'
		#
		# params
		#   { wfschemaWizziModel
		#     # The model loaded from the 'SCHEMA_NAME.wfschema.ittf' source document.
		#     [ requires
		#     [ exportTos
		#     [ elements
		
	m loadFromWizziModel
		param wfschemaWizziModel
        param ctx
        param callback

        $$ loog '-----------------> enter loadFromWizziModel'
        _ exec_loadFromWizziModel_asyncs
            @ wfschemaWizziModel
            @ ctx
            a_cb()
                $$ loog 'wfschema-boot.wfschemaWizziModel loaded', 'err', err

                set this.wzName = wfschemaWizziModel.wzName
                set this.unknownElementReplacer = wfschemaWizziModel.unknownElementReplacer || false
                set this.mTreeIsPreprocessed = wfschemaWizziModel.mTreeIsPreprocessed || false

                $$ loog 'wfschema-boot.importComments done'
                _ this.importComments(wfschemaWizziModel)
                
                foreach requireFrom in wfschemaWizziModel.requires
                    var require = this.addRequire(requireFrom.wzName)
                    if requireFrom.declareVar && requireFrom.declareVar.length > 0
                        set require.declareVar = requireFrom.declareVar
                    if requireFrom.invoke && requireFrom.invoke.length > 0
                        set require.invoke = requireFrom.invoke
                    set require.kind = requireFrom.kind
                

                _ this.importDeclares(wfschemaWizziModel)
                $$ loog 'wfschema-boot.importDeclares done'
                _ this.importMethods(wfschemaWizziModel)
                $$ loog 'wfschema-boot.importMethods done'

                foreach eFrom in wfschemaWizziModel.elements
                    var element = this.addElement(eFrom.wzName)
                    _ element.importComments(eFrom)
                    _ element.importRestricts(eFrom)
                    set element.tagInternal = eFrom.tagInternal
                    set element.super = eFrom.super
                    set element.isAbstract = eFrom.isAbstract
                    set element.isRoot = eFrom.isRoot
                    set element.xmlTagInternal = eFrom.xmlTagInternal
                    set element.tagType = eFrom.tagType
                    set element.acceptAnyTag = eFrom.acceptAnyTag
                    if schemautil.isNotEmpty(eFrom.acceptAnyTag)
                        var anyTags = eFrom.acceptAnyTag.split('/')
                        set element.acceptAnyTag = anyTags[0]
                        set element.acceptAnyTagCollection = anyTags[1]
                    set element.nameIsRequired = eFrom.nameIsRequired
                    set element.addToChildren = eFrom.addToChildren
                    set element.suppressCollectionEmit = eFrom.suppressCollectionEmit
                    
                    foreach aFrom in eFrom.attributes
                        var attribute = element.addAttribute(aFrom.wzName)
                        _ attribute.importComments(aFrom)
                        _ attribute.importRestricts(aFrom)
                        set attribute.tagInternal = aFrom.tagInternal
                        set attribute.xmlTagInternal = aFrom.xmlTagInternal
                        set attribute.type = aFrom.type
                        set attribute.default = aFrom.default
                        set attribute.isRequired = aFrom.isRequired
                        set attribute.isDataType = aFrom.isDataType
                        set attribute.defaultWhenDeclared = aFrom.defaultWhenDeclared
                    
                    foreach rFrom in eFrom.relations
                        var relation = element.addRelation(rFrom.wzName)
                        _ relation.importComments(rFrom)
                        set relation.noGetMethod = rFrom.noGetMethod
                        set relation.hasAddOnce = rFrom.hasAddOnce
                        set relation.isOneToOne = rFrom.isOneToOne

                    foreach iFrom in eFrom.includes
                        var include = element.addInclude(iFrom.wzName)
                        _ include.importComments(rFrom)

                    _ element.importMethods(eFrom)

                foreach exportTo in wfschemaWizziModel.exportTos
                    _ this.addExportTo(exportTo.wzName)

                var ctx
                    {
                        @ error
                            function
                                param msg
                                param node
                                throw new Error(msg + '\n' + util.inspect(node, { depth: 2}))

                _ this.wzSetup(ctx);
                _ this.wzVerify(ctx);
                _ this.wzInitialize(ctx);
                
                r_cb()

	function exec_loadFromWizziModel_asyncs
		param wfschemaWizziModel
        param ctx
        param callback
        const jsIncludes
            _ collectJsIncludes
                @ wfschemaWizziModel
        $$ loog 'exec_loadFromWizziModel_asyncs.jsIncludes', jsIncludes.length
        _ async.map
            @ jsIncludes
            function
                param item
                param callback
                _ item.get_js
                    a_cb( wizziModel )
                        set item.__wizziModel = wizziModel
                        $$ loog '==================> statementFrom.get_js.wizziModel', wizziModel.wzElement, wizziModel.wzName, Object.keys(wizziModel)
                        _ ctx.wizziFactory.generateArtifact
                            @ wizziModel
                            @ 'generated from wfschema model'
                            @ 'js/module'
                            {
                            a_cb( artifactText )
                                $$ loog '==================> statementFrom.get_js.artifactText', artifactText
                                const lines = artifactText.split('\n')
                                set item.__codeLines = []
                                foreach line in lines
                                    if line.trim() == "'use strict';"
                                    else
                                        _ item.__codeLines.push
                                            @ line
                                r_cb( item.__codeLines )
            =>
                param err
                param result
                if err
                    error err
                    _ callback
                        @ err
                r_cb( result )
            @ callback

    function collectJsIncludes
        param wfschemaWizziModel
        $$ loog 'wfschema-boot', 'collectJsIncludes', 'Object.keys(wfschemaWizziModel)', Object.keys(wfschemaWizziModel)
        const ret = []
		foreach declareFrom in wfschemaWizziModel.declares
			foreach statementFrom in declareFrom.statements
                if statementFrom.get_js
                    _ ret.push
                        @ statementFrom
        foreach methodFrom in wfschemaWizziModel.methods
            # loog 'methodFrom.wzName', methodFrom.wzName
            foreach statementFrom in methodFrom.statements
                $$ loog 'statementFrom.wzName', statementFrom.wzElement, statementFrom.wzName, statementFrom.get_js
                if statementFrom.get_js
                    _ ret.push
                        @ statementFrom
        foreach eFrom in wfschemaWizziModel.elements
            # loog 'eFrom.wzName', eFrom.wzName
            foreach methodFrom in eFrom.methods
                # loog 'methodFrom.wzName', methodFrom.wzName
                foreach statementFrom in methodFrom.statements
                    # loog 'statementFrom.wzName', statementFrom.wzElement, statementFrom.wzName, statementFrom.get_js
                    if statementFrom.get_js
                        $$ loog 'wfschema-boot.collectJsIncludes.method', methodFrom.wzName, 'statement', statementFrom.wzName
                        _ ret.push
                            @ statementFrom
        return ret

    m toJson        
        return
            {
			    @ name this.name
                @ wzElement this.wzElement
			    @ elements this.elements
                @ declares this.declares
                @ methods this.methods
                @ requires this.requires
                @ requiredModules this.requiredModules
                @ requiredFunctions this.requiredFunctions
                @ exportTos this.exportTos
                @ preserveTags this.preserveTags
                @ mTreeIsPreprocessed this.mTreeIsPreprocessed
                @ rootElement this.rootElement




	
