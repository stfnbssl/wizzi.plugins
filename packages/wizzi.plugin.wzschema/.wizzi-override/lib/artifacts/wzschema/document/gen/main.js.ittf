module
    kind es6
    $
        var md = {
            plugin: 'wizzi.plugin.wzschema',
            name: 'document',
            schema: 'wzschema',
            checkSchema: true,
            isAsync: true,
        };
    gen( &md )
        $append imports
            var included_writers = require('./included_writers')
        $append main
            _ md.wzschema
                @ model
                @ ctx
                a_cb( )
                    if ctx.artifactGenerationErrors.length > 0
                        r_cb_err( ctx.artifactGenerationErrors )
                    else
                        # generation OK
                        r_cb( ctx )
        
        async-md( wzschema )
            xml-dump-el-open( wzschema )
            _ ctx.w('>')
            _md_gen_items( elements, indent )
                xml-dump-el-close( wzschema )
                r_cb()
        
        async-md( element )
            xml-dump-el-open( element )
            xml-dump-attr( super )
            xml-dump-attr( tag )
            xml-dump-attr( isRoot, last )
            _md_gen_items( attributes, indent )
                _md_gen_items( relations, indent )
                    xml-dump-el-close( element )
                    r_cb()
        
        async-md( attribute )
            xml-dump-el-open( attribute )
            xml-dump-attr( tag )
            xml-dump-attr( type )
            xml-dump-attr( default )
            xml-dump-attr( defaultWhenDeclared, last )
            xml-dump-el-close( attribute )
            r_cb()
        
        async-md( relation )
            xml-dump-el-open( relation )
            xml-dump-attr( type, last )
            xml-dump-el-close( relation )
            r_cb()
        
        $include includes
        
        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval
