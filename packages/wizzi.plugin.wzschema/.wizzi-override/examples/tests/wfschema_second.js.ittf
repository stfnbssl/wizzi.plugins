module
    kind es6
    $
        var md = {
            name: 'wfschema_second',
        };
    v08/examples/plugin( &md )
        $append imports
            var secondFactory = require('../results/wfschema/second-factory.g')

        $append plugins
            [ items
                @ './index.js'
                @ 'wizzi-js'
            @ pluginsBaseFolder
                _ path.resolve
                    @ __dirname
                    @ '..'
                    @ '..'
        
        let arg = process.argv[2]
        const moduleName = arg && arg.length > 0 ? arg : 'first'
        _ executeLoadIttfDocuments
            [
                @ moduleName
            a_cb_no_throw( result )
                if err
                    error 'wfschema_second.examples.executeLoadIttfDocuments.err', err
                    error 'wfschema_second.examples.executeLoadIttfDocuments.err.toString()', err.toString()
                    if err.inner
                        error 'wfschema_second.examples.executeLoadIttfDocuments.err.inner.toString()', err.inner.toString()
                else
        function executeLoadIttfDocuments
            param modules
            param callback
            _ async.mapSeries
                @ modules
                =>
                    param module
                    param callback
                    log 'wfschema_second.example.executeLoadIttfDocuments.module: ' + module
                    var ittfDocumentUri
                        _ path.join
                            @ __dirname
                            @ 'ittf'
                            @ module + '.second.ittf'
                    var outputPath
                        _ path.join
                            @ __dirname
                            @ 'results'
                            @ module + '.second.json'
                    _ loadMTree
                        @ ittfDocumentUri
                        {
                        a_cb( mTree )
                            log 'wfschema_second.example.executeLoadIttfDocuments.mTree: ', mTree
                            _ createWizziFactory
                                {
                                a_cb( wf )
                                    var loadModel
                                        _ secondFactory.createLoadModel
                                            {
                                                { options
                                                    @ loadFromMTree true
                                                @ verify verify
                                                @ errors wizzi.errors
                                                @ wizziFactory wf
                                    _ loadModel
                                        @ mTree
                                        {
                                        a_cb( wizziModel )
                                            # log 'wfschema_second.example.executeLoadIttfDocuments.wizziModel: ', Object.keys(wizziModel), wizziModel.wzElement
                                            log 'wfschema_second.example.executeLoadIttfDocuments.wizziModel: ', wizziModel
                                            _ file.write
                                                @ outputPath
                                                _ stringify
                                                    _ wizziModel.toJson
                                                    @ null
                                                    @ 4
                                            r_cb( )
                @ callback
