$group

	class ${schema.wzId}ModelException
		ctor
			param message
			param node
			param instance
            # VIA 14/2/21 (pollutes log) set this.node = node
            # VIA 14/2/21 (pollutes log) set this.instance = instance
			if node && instance
				set this.message = message + 
					\b ', wzElement: ' + node.wzElement + 
					\b ', wzName:' + (node.wzName || '') + 
					\b ', row:' + node.r + 
					\b ', col:' + node.c + 
					\b ', source:' + instance.wzSourceFilepath(node.u) 
				set this.errorLines
					_ instance.wzSourceErrorLines
						@ node 
						@ message
			elif instance
				set this.message = message + instance.wzSourceLineInfo.toString(instance)
			else 
				set this.message = message 
			error 'message', this.message
			set this.stack = (new Error()).stack
			
        m toString
            var msg = []
            _ msg.push(chalk.red('Error: ' + this.message))
            _ msg.push(chalk.red('  name: ${schema.wzId}ModelException'))
            if this.node
                _ msg.push(chalk.yellow('  row: ' + this.node.r + ', col: ' + this.node.c))
            if this.instance
                if this.node
                    _ msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceFilepath(this.node.u)))
                else
                    _ msg.push(chalk.yellow('  uri: ' + this.instance.wzSourceLineInfo.toString(this.instance)))
            else
                _ msg.push(chalk.yellow('  uri: unknown'))
            if this.errorLines
                foreach line in this.errorLines
                    _ msg.push(chalk.yellow('  ' + line))
            return msg.join('\n')

	set _md.${schema.wzId}ModelException = ${schema.wzId}ModelException