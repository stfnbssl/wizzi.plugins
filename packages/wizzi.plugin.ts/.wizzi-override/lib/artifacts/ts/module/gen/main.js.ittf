module wizzi.plugin.ts@${wzCtx.version}.lib.artifacts.ts.module.gen.main
    kind es6
    
    $include versions

    $
        var md = {
            plugin: 'wizzi.plugin.ts',
            name: 'document',
            schema: 'ts',
            rootElement: 'xmodule',
            checkSchema: true,
            isAsync: true,
        };
    
    gen( &md )
        $append imports
            var statement = require('./statement')
            # old var wzIife = require('./wziife')
        $append main
            set ctx.__ecma = 'es6'
            set ctx.__jskind = 'react'

            _ main_init
                @ model
                @ ctx

            repeater(1, model.statements)
                _ statement.gen
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment(1)
                $append next
                    if ctx.artifactGenerationErrors.length > 0
                        return
                            _ callback(ctx.artifactGenerationErrors)
                    else
                        r_cb( ctx )

        function main_init
            param model
            param ctx
            
            $$ loogmyname, 'ctx.values', ctx.values
            if (!!ctx.values.noGeneratorComments) == false
                _ ctx.w('/*')
                _ ctx.w('    artifact generator: ' + __filename)
                _ ctx.w('    package: @wizzi/plugin.ts@${versions['@wizzi/plugin.tss@next']}')
                _ ctx.w('    primary source IttfDocument: ' + model.wzSourceFilepath('f1'))
                $if wzConfigIsPackageDeploy == false
                    _ ctx.w('    utc time: ' + new Date().toUTCString())
                _ ctx.w('*/')

        var noattrs
            [
                @ 'wzTag'
                @ 'wzName'
                @ 'wzElement'
                @ 'wzParent'
                @ 'wzSourceLineInfo'
                @ '___exportName'
        
        function isAttrValue
            param a
            param v
            if noattrs.indexOf(a) > -1
                return false
            if v == null || verify.isArray(v) || verify.isObject(v) || verify.isFunction(v)
                return false
            return true
        
        function getAttrs
            param e
            var retval = []
            for var a in e
                if isAttrValue(a, e[a])
                    _ retval.push({ name: verify.replaceAll(a, '_', '-'), value: e[a] })
                elif a.substr(0, 3) === 'ng-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'data-'
                    _ retval.push({ name: a, value: e[a] })
                elif a.substr(0, 5) === 'aria-'
                    _ retval.push({ name: a, value: e[a] })
            if e.attributes
                foreach a in e.attributes
                    var p = lineParser.parseNameValueRaw(a.wzName, a)
                    if p.hasValue()
                        _ retval.push({ name: p.name(), value: p.value() })
                    else
                        _ retval.push({ name: p.name() })
            return retval
