module
    kind jsfile

	# var verify = require('./verify')
    var verify = require('@wizzi/utils').helpers.verify

	var myname = 'wizzi-js.artifacts.js.module.codegen.util.stm'

	var md
        set module.exports =
            { 
    
	$include parents-of-top-statements
	$include fb-html-supported-tags
	
	set md.isChildOf
        function 
            param model
            param parent
            if !model.wzParent
                return false
            return model.wzParent.wzElement == parent

	set md.isDescendentOf
        function 
            param model
            param ancestor
            if !model.wzParent
                return false
            if model.wzParent.wzElement == ancestor
                return true
            return 
                _ md.isDescendentOf
                    @ model.wzParent
                    @ ancestor
    
	set md.isTopStatement
        function 
            param model
			param ctx
            if !model.wzParent
                return true
			if ctx.arrowFunctionNoGraphs
				return false
            var prnElement = model.wzParent.wzElement
            if prnElement == 'arrowfunction' && md.isImplicitReturn(model.wzParent)
                return false
            return parents_of_top_statements.indexOf(prnElement) > - 1
    
	set md.isDeclare
        function 
            param model
            if !model.wzParent
                return false
            return ['xvar'].indexOf(model.wzParent.wzElement) > -1
    
	set md.isObjectProperty
        function 
            param model
            if !model.wzParent
                return false
            return ['jsObject', 'state'].indexOf(model.wzParent.wzElement) > -1
    
	set md.isEnumValue
        function 
            param model
            if !model.wzParent
                return false
            return ['typeEnum'].indexOf(model.wzParent.wzElement) > -1

	set md.writeComments
        function
            param model
            param ctx
            param newline
            var temp = []
            var written = false
            var indented = false
            foreach item in model.statements
                if item.wzElement == 'comment' || item.wzElement == 'commentmultiline'
                    $*
                    if newline && !written
                        _ ctx.w
                    *$
                    $$ TODO implement ctx.lf_w(..) (line feed + w)
                    $$ 7/5/24 _ ctx.w
                    _ __writeComments
                        @ item
                        @ ctx
                        @ item.wzElement == 'commentmultiline'
                    set written = true
                    if item.wzName.indexOf('@ts-ignore') > -1 
                        # loog '§§§ stm.writeComments', model.wzName
                        _ ctx.w $$ added 6/8/24
                        set ctx.__inlineNext = false $$ changed from true to false 6/8/24
                    else
                        set ctx.__inlineNext = false
                elif item.wzElement == 'commentForReference'
                    _ ctx.w('/// ' + item.wzName)
                elif item.wzElement == 'inlineMultilineComment'
		            _ ctx.w('/** ' + item.wzName + ' */')
                else
                    _ temp.push(item)
            set model.statements = temp
            return model

	function __writeComments
		param model
        param ctx
        param multi
        # loog '__writeComments-model', model
        if multi || model.statements.length > 0
            _ ctx.w('/**')
            _ ctx.indent
            set ctx.__inside_comment = true
            if verify.isNotEmpty(model.wzName)
                _ ctx.w('* ' + model.wzName)
            foreach item in model.statements
                _ __writeCommentLine
                    @ item
                    @ ctx
        else
            _ ctx.w('// ' + model.wzName)
        if multi || model.statements.length > 0
            _ ctx.deindent
            set ctx.__inside_comment = false
            _ ctx.w('*/')

    function __writeCommentLine            
		param model
        param ctx
        _ ctx.w((ctx.__inside_comment ? '* ' : '// ') + model.wzName)
        if model.statements.length > 0
            _ ctx.indent
            foreach item in model.statements
                _ __writeCommentLine
                    @ item
                    @ ctx
            _ ctx.deindent

	set md.writeComments_template
        function
            param model
            param ctx
            param newline
            param newlineindent
            var temp = []
            var written = false
            var indented = false
            foreach item in model.statements
                if item.wzElement == 'comment'
                    if newline && !written
                        if newlineindent
                            _ ctx.indent
                            set indented = true
                        _ ctx.w
                    _ ctx.w('// ' + item.wzName)
                    set written = true
                    if item.wzName.indexOf('@ts-ignore') > -1 
                        # loog '§§§ stm.writeComments', model.wzName
                        set ctx.__inlineNext = true
                    else
                        set ctx.__inlineNext = false
                else
                    _ temp.push(item)
            set model.statements = temp
            return indented
	
    set md.isComment
        function
            param model
            return ['comment', 'commentmultiline'].indexOf(model.wzElement) > -1

	set md.nonCommentStatements
        function
            param model
            var ret = []
            if model.statements
                foreach item in model.statements
                    if md.isComment(item) == false
                        _ ret.push(item)
            if model.jsPropertyOrValues
                foreach item in model.jsPropertyOrValues
                    if md.isComment(item) == false
                        _ ret.push(item)
            return ret

	set md.commentStatements
        function
            param model
            var ret = []
            if model.statements
                foreach item in model.statements
                    if md.isComment(item) == true
                        _ ret.push(item)
            if model.jsPropertyOrValues
                foreach item in model.jsPropertyOrValues
                    if md.isComment(item) == true
                        _ ret.push(item)
            return ret

    set md.isBlockStatement
        function 
            param model
            return ['xif','xfor','foreach','xwhile','backeach','xtry','xthrow','xswitch',
                \b 'xyield','xawait','xdo','xlabel','xfunction','xdelete',
                \b 'xvar','xconst','xlet','decl','log','info','error'].indexOf(model.wzElement) > -1

	set md.isMemberAccess
        function 
            param model
            if ['memberAccess', 'memberAccessComputed', 'memberCall', 
				\b 'decoratorCall', 'callOnValue', 'typeAs'].indexOf(model.wzElement) > -1
                return true
    
	set md.isMemberAccessOrCall
        function 
            param model
            $$ if ['memberAccess', 'memberAccessComputed', 'memberCall', 
			$$ 	\b 'decoratorCall', 'callOnValue'].indexOf(model.wzElement) > -1
            if md.isMemberAccess(model)
                return true
            if !model.wzParent
                return false
            if model.wzElement === 'call' && model.wzParent.wzElement === 'call'
                return true
            return false
    
	set md.isCallArgument
        function 
            param model
            return model.wzElement === 'call' && model.wzParent && model.wzParent.wzElement === 'call'
    
	set md.isArgumentOfCall
	    function 
            param model
            return model.wzParent && ['call', 'memberCall', 'decoratorCall', 'callOnValue'].indexOf(model.wzParent.wzElement) > -1
    
	set md.firstChildIs
        function 
            param model
            param elementsArray
            var ss = md.nonCommentStatements(model)
            # loog 'firstChildIs', ss.length > 0 && ss[0].wzElement
            return ss.length > 0 && elementsArray.indexOf(ss[0].wzElement) > -1

	set md.onlyChildIs
        function 
            param model
            param element
            var ss = md.nonCommentStatements(model)
            return ss.length == 1 && ss[0].wzElement === element

	set md.onlyChildIsNot
        function 
            param model
            param element
            var ss = md.nonCommentStatements(model)
            return ss.length == 1 && ss[0].wzElement !== element

	set md.isImplicitReturn
        function 
            param model
            $* NO an handler MAY HAVE an implicit return
            var prnElement = model.wzParent && model.wzParent.wzElement
            if prnElement == 'xclass'
                return false $$ an handler has no implicit return
            *$
            var ss = md.nonCommentStatements(model)
            return md.onlyChildIsNot(model, 'xreturn') && !md.isBlockStatement(ss[0])

	set md.onlyChildIsHtmlElement =
        function 
            param model
            var ss = md.nonCommentStatements(model)
			return ss.length == 1 && (
				\b fb_html_supported_tags.indexOf(ss[0].wzElement) > -1 ||
				\b ss[0].wzElement === 'htmlelement' )
    
	set md.isSingleParamForArrowFunction
        function 
            param model
            if model.params.length != 1 
                return false
            # loog 'model.params', model.params
            # loog 'model.params[0]', model.params[0]
            if model.params[0].wzName.startsWith('...')
                return false
            var ss = md.nonCommentStatements(model.params[0])
            # loog 'return', ss.length == 0
            return ss.length == 0

    set md.hasStatementChildren
        function 
            param model
            var ss = md.nonCommentStatements(model)
            if ss.length > 0
                return true
			return false

    set md.hasCommentChildren
        function 
            param model
            var ss = md.commentStatements(model)
            if ss.length > 0
                return true
			return false

	set md.parentIs
        function 
            param model
            param element
            return model.wzParent && model.wzParent.wzElement === element
    
	set md.parentIsHtmlElement =
        function 
            param model
            if ! (model.wzParent)
                return false
			var test = model.wzParent.wzElement
			if test == 'htmlelement'
				return true
            # return ['htmlelement', 'a', 'br', 'button', 'div', 'form', 'h1', 'h2', 'h3', 'h4', 'head', 'header', 'i', 'img', 'input', 'label', 'legend', 'li', 'meta', 'option', 'p', 'select', 'span', 'table', 'tbody', 'td', 'textarea', 'th', 'thead', 'tr', 'ul'].indexOf(model.wzParent.wzElement) > - (1)
			return fb_html_supported_tags.indexOf(model.wzParent.wzElement) > -1
    
	set md.isValue =
        function 
            param model
            if ! (model.wzParent)
                return false
            return ['jsArray', 'jsPropertyOrValue', 'memberAccessComputed', 'or', 'and'].indexOf(model.wzParent.wzElement) > -1
    
	set md.isParamValue
        function 
            param model
            if !model.wzParent
                return false
            return ['call', 'memberCall', 'decoratorCall', 'callOnValue', 'iife', 'xnew', 'arrayOf', 'concat'].indexOf(model.wzParent.wzElement) > -1
    
	set md.semicolon
        function 
            param text
            return verify.endsWith(text, ';') ? '' : ';'
    
	set md.unparen
        function 
            param text
			if verify.isEmpty(text)
                return text
            var s = text.trim()
            return 
                iif md.isParenEnclosed(s)
                    then 
                        _ s.substr(1, s.length - 2)
                    else text
    
	set md.setOperator
        function 
            param text
            param statements
			if verify.isEmpty(text)
                return ''
            set text = text.trim()
            if statements.length === 1 && statements[0].wzElement === 'memberAccessComputed'
                return text + ''
            var t1 = text.substr(-1, 1)
            var t2 = text.substr(-2, 2)
            if op1.indexOf(t1) > -1
                return text + ' '
            if op2.indexOf(t2) > -1
                return text + ' '
            return text + ' = '
    
	set md.encloseParen
        function 
            param text
            var s = text.trim()
            if md.isParenEnclosed(s) === false
                if s.substr(0, 1) !== '('
                    set s = '(' + s
                if s.substr(-1, 1) !== ')' && s.substr(-2, 2) !== ');'
                    set s = s + ')'
                return s
            else 
                return text
    
	set md.isGraphEnclosed
        function 
            param text
            if verify.isEmpty(text)
                return false
			set text = text.trim()
			return text.substr(0, 1) === '{' && text.substr(-1, 1) === '}'

	set md.isParenEnclosed
        function 
            param text
            if verify.isEmpty(text)
                return false
            set text = text.trim()
            var hasEndParens = text.substr(-1, 1) === ')' || text.substr(-2, 2) === ');'
            if !hasEndParens || text.substr(0, 1) !== '('
                return false
            var
                decl count = 1
                decl quote = null
            for var ch, i = 1; i < text.length; i++
                set ch = text[i]
                if ch === '"' || ch === "'"
                    if quote === ch
                        set quote = null
                    elif quote === null
                        set quote = ch
                elif quote !== null
                    + ;
                elif ch === '('
                    set count++
                elif ch === ')'
                    set count--
                if i < (text.length - 1) && count === 0
                    return false
            return true
    
	set md.isQuoted
        function 
            param text
            if verify.isEmpty(text) || text.length < 2
                return false
            return (text.substr(0, 1) === '"' && text.substr(-1, 1) === '"') || 
				\b (text.substr(0, 1) === '\'' && text.substr(-1, 1) === '\'')
    
	set md.unquote
        function 
            param text
            if verify.isEmpty(text) || text.length < 2
                return text
            if md.isQuoted(text)
                return text.substr(1, text.length-2)
			else
				return text

    set md.checkInlineEnter
        function 
            param model 
            param ctx
            if ctx.__inlineNext
                _ ctx.inlineOn
                set model.__inlineNext = true
                set ctx.__inlineNext = false
    
    set md.checkInlineExit
        function 
            param model 
            param ctx
            if model.__inlineNext
                delete model.__inlineNext
                _ ctx.inlineOff

    set md.forceInlineOff
        function 
            param model 
            param ctx
            if model.__inlineNext
                delete model.__inlineNext
            _ ctx.inlineOff

	var op1
        [ 
            @ '='
    
	var op2
        [ 
            @ '+='
            @ '-='
            @ '/='
            @ '*='
    
	var parenOp
        [ 
            @ '||'
            @ '>>>'
            @ '>>'
    
	set md.getOpenParen
        function 
            param oper
            return parenOp.indexOf(oper) > -1 ? '(' : ''
    
	set md.getCloseParen =
        function 
            param oper
            return parenOp.indexOf(oper) > -1 ? ')' : ''
    
	set md.getParentOfType =
        function 
            param model
            param type
            var prn = model.wzParent
            while prn != null && prn.wzElement !== type
                set prn = prn.wzParent
            return prn
    
	set md.hasArguments
        function 
            param callText
            if typeof(callText) !== 'string'
                return false
            set callText = callText.trim()
            # loog 'callText.substr(0, 1) ', callText.substr(0, 1) 
            var hasEndParens = ((callText.substr(- (1), 1) === ')') || (callText.substr(- (2), 2) === ');'))
            # loog 'hasArguments.hasEndParens', hasEndParens
            if !hasEndParens
                return false
            if callText.substr(0, 1) === '/'
                # assume regular expression
                return true
            var namecount = 0
            var enclosedcount = 0
            var seen = false
            var 
                decl count = 0
                decl quote = null
            for var ch, i = 0; i < callText.length; i++
                set ch = callText[i]
                if ((ch === '"') || (ch === "'"))
                    if quote === ch
                        set quote = null
                    elif quote === null
                        set quote = ch
                elif quote !== null
                    + ;
                elif ch === '('
                    set seen = true
                    set count++
                elif ch === ')'
                    set count--
                    if count === 0
                        set enclosedcount++
                elif ! (seen)
                    set namecount++
            return seen && (namecount > 0 || enclosedcount > 1) && count == 0
    
	set md.emitBlock
        function 
            param cnt
            param tag
            param model
            param items
            param count
            param ctx
			param callback
            
			_ emitBlock_begin
				@ cnt
				@ tag
				@ model
				@ items
				@ count
				@ ctx
				a_cb()
					_ emitBlock_end
						@ cnt
						@ items
						@ ctx
						@ count
						@ callback

	function emitBlock_begin
        param cnt
        param tag
        param model
        param items
        param count
        param ctx
		param callback

		var blockIndex = items.length > 0 && items[0].wzElement === 'test' ? 1 : 0
        if ctx.values.__preserveBlock
            if count > blockIndex && items[blockIndex].wzElement === 'block'
                if tag === 'case'
                    _ ctx.w(tag + ' ' + model.wzName + ': {')
					r_cb()
                elif tag === 'else'
                    _ ctx.w(tag + ' {')
					r_cb()
                else 
                    _ md.emitTest
						@ cnt
						@ tag
						@ model
						@ items
						@ ctx
						@ ' {'
						@ callback
            else 
                if tag === 'case'
                    _ ctx.w(tag + ' ' + model.wzName + ':')
					r_cb()
                elif tag === 'else'
                    _ ctx.w(tag)
					r_cb()
                else 
                    _ md.emitTest
						@ cnt
						@ tag
						@ model
						@ items
						@ ctx
						@ ''
						@ callback
		else
			if tag === 'case'
                _ ctx.w(tag + ' ' + model.wzName + ': {')
				r_cb()
            elif tag === 'else'
                _ ctx.w(tag + ' {')
				r_cb()
            else
                _ md.emitTest
					@ cnt
					@ tag
					@ model
					@ items
					@ ctx
					@ ' {'
					@ callback

	function emitBlock_end
        param cnt
        param items
        param ctx
		param count
		param callback

		var blockIndex = items.length > 0 && items[0].wzElement === 'test' ? 1 : 0

		var from = items.length > 0 && items[0].wzElement === 'test' ? 1 : 0
        _ cnt.genItems
            @ items
            @ ctx
            { 
                @ indent true
                @ from from
			a_cb()
				if ctx.values.__preserveBlock
					if count > blockIndex && items[blockIndex].wzElement === 'block'
						_ ctx.w('}')
				else 
					_ ctx.w('}')
				r_cb()

	set md.emitTest
        function 
            param cnt
            param tag
            param model
            param items
            param ctx
            param open
			param callback
			if items.length > 0 && items[0].wzElement === 'test'
                _ ctx.write(tag + ' ')
                _ cnt.genItem
                    @ items[0]
                    @ ctx
					a_cb()
						_ ctx.w(open)
						r_cb()
            else 
                _ ctx.w(tag + ' (' + md.unparen(model.wzName) + ')' + open)
				r_cb()


	#
		# TYPESCRIPT
	set md.isTSSimpleType
        function 
            param model
            # loog 'isTSSimpleType', model.wzElement
			return
				[
					@ 'typeNumber'
					@ 'typeString'
					@ 'typeBoolean'
					@ 'typeAny'
                    @ 'typeSymbol'
					@ 'typeArray'
					@ 'typeObject'
					@ 'typeObjectLiteral'
					@ 'typeVoid'
					@ 'typeNull'
					@ 'typeUndefined'
                    @ 'typeUnknown'
					@ 'typeLiteral'
					@ 'typeTypeof'
					@ 'typeReference'
					@ 'typeFunction'
					@ 'typeArrowFunction'
					@ 'typeUnion'
					@ 'typeIntersect'
					@ 'typeKeyOf'
                    @ 'typeTypeAlias' $$ addded 10/5/24 (satisfies keyword) waiting for damage
                    @ 'typeIndexedAccess' $$ addded 13/5/24 (satisfies keyword) waiting for damage
					. indexOf(model.wzElement) > -1

	set md.extractTSSimpleType
        function 
            param model
			if !model.statements || model.statements.length == 0
				return
			var ret, retIndex
			_ model.statements.some
				=>
					param item
					param index
                    # loog 'extractTSSimpleType', item.wzElement
					if md.isTSSimpleType(item)
						set ret = item
						set retIndex = index
						return true
			if ret
				_ model.statements.splice(retIndex, 1)
			return ret

	set md.extractInitValue
        function 
            param model
			if !model.statements || model.statements.length == 0
				return
			var ret, retIndex
			_ model.statements.some
				=>
					param item
					param index
                    # loog 'extractInitValue', item.wzElement
					if item.wzElement == 'initValue'
						set ret = item
						set retIndex = index
						return true
			if ret
				_ model.statements.splice(retIndex, 1)
			return ret

    set md.extractTSParameterDecl
        function 
            param model
			if !model.statements || model.statements.length == 0
				return
			var ret, retIndex
			_ model.statements.some
				=>
					param item
					param index
					if item.wzElement == 'typeParameterDecl'
						set ret = item
						set retIndex = index
						return true
			if ret
				_ model.statements.splice(retIndex, 1)
			return ret

    set md.extractTS
        function 
            param model
			param element
			if !model.statements || model.statements.length == 0
				return
			var ret, retIndex
			_ model.statements.some
				=>
					param item
					param index
					if item.wzElement === element
						set ret = item
						set retIndex = index
						return true
			if ret
				_ model.statements.splice(retIndex, 1)
			return ret

    set md.genTSParams
        function 
            param model
			param ctx
			param cnt
			param callback
			if !!(model.params && model.params.length > 0) == false
				r_cb()
			# loog 'genTSParams enter', model.wzElement
            var paramHasComment = false
            foreach p in model.params
                if md.hasCommentChildren(p)
                    set paramHasComment = true
            if model.params.length > 3 || paramHasComment
                _ ctx.indent
			repeater(1, model.params)
				var p = item_1
                var p_isObjectOrArray = ['jsObject', 'objectParam', 'jsArray'].indexOf(p.wzElement) > -1
				# loog 'genTSParams p', p
				if index_1 > 0
                    if model.params.length > 3 || paramHasComment
                        _ ctx.w(', ')
                    else
					    _ ctx.write(', ')
                else
                    if model.params.length > 3 || paramHasComment
                        _ ctx.w()
                _ md.writeComments
                    @ p
                    @ ctx
                # loog 'genTSParams.p', p.wzElement, p.wzName, p.statements.length, 'first child:', p.statements[0] && p.statements[0].wzElement
                if verify.isEmpty(p.wzName) && p.statements.length > 0 && (p.statements[0].wzElement == 'jsObject' || p.statements[0].wzElement == 'jsArray') 
                    return
                        _ genTSParam_object_or_array
                            @ p
                            @ ctx
                            @ cnt
                            a_cb()
                                repeater_increment(1)
                var pType 
					_ md.extractTSSimpleType
						@ p
                var pInitValue
					_ md.extractInitValue
						@ p
				_ md.genAccessorsAndExtra
					@ p
					@ ctx
				var p_statements
                    _ md.nonCommentStatements
                        @ p
                # loog 'genTSParams', p.wzElement, p_statements.length, pType && pType.wzElement
				if p_statements.length == 0
					_ ctx.write(p.wzName)
					if p.typeOptional
						_ ctx.write('?')
					if pType
						_ ctx.write(': ')
						_ cnt.stm[pType.wzElement]
							@ pType
							@ ctx
							a_cb()
                                if pInitValue
                                    _ ctx.write(' = ')
                                    _ cnt.stm[pInitValue.wzElement]
                                        @ pInitValue
                                        @ ctx
                                        a_cb()
                                            repeater_increment(1)
                                else
								    repeater_increment(1)
					else
						repeater_increment(1)
				elif p.wzElement === 'objectParam' || p.wzElement === 'jsObject'
					set p.wzElement = 'jsObject'
                    # loog 'genTSParams', p.wzElement
					_ cnt.stm[p.wzElement]
						@ p
						@ ctx
						a_cb()
							set p.wzElement = 'objectParam'
							if pType
								_ ctx.write(': ')
								_ cnt.stm[pType.wzElement]
									@ pType
									@ ctx
									a_cb()
                                        if pInitValue
                                            _ ctx.write(' = ')
                                            # loog 'pInitValue', pInitValue
                                            _ cnt.stm[pInitValue.wzElement]
                                                @ pInitValue
                                                @ ctx
                                                a_cb()
                                                    repeater_increment(1)
                                        else
										    repeater_increment(1)
							else
                                if pInitValue
                                    _ ctx.write(' = ')
                                    _ cnt.stm[pInitValue.wzElement]
                                        @ pInitValue
                                        @ ctx
                                        a_cb()
                                            repeater_increment(1)
                                else
								    repeater_increment(1)
				elif p_statements.length > 0 && p_statements.length < 3
					_ ctx.write(p.wzName)
					if p.typeOptional
						_ ctx.write('?')
					var s0 = p_statements[0]
					# loog 'genTSParams.s0.wzElement', s0.wzElement
					# if s0.wzElement === 'typeInitValue' || s0.wzElement === 'typeCTor' || s0.wzElement === 'typeNever'
					# loog 'genTSParams.s0.statements.length', s0.statements.length
					if pType
						_ ctx.write(': ')
						_ cnt.stm[pType.wzElement]
							@ pType
							@ ctx
							a_cb()
								_ genTSParams_close
									@ s0
									@ ctx
									@ cnt
									a_cb()
										repeater_increment(1)
					else
						_ genTSParams_close
							@ s0
							@ ctx
							@ cnt
							a_cb()
								repeater_increment(1)
					# else
					#	throw new Error('jswizzifier.genTSParams.statements[0].wzElement should be "typeInitValue or typeCTor".found: ' + s0.wzElement)
				else
					# loog 'jswizzifier.genTSParams.p', p, 'statements', p_statements
					_ callback
						_ ctx.error(myname + '.genTSParams.statements.length should be 0 or 1.found: ' + p_statements.length, model)
				$append next
					# loog 'genTSParams.exit'
                    if model.params.length > 3 || paramHasComment
                        _ ctx.deindent
					r_cb()

	function genTSParam_object_or_array
        param p
        param ctx
        param cnt
        param callback
        var initValue = p.statements[1]
        var pType 
            _ md.extractTSSimpleType
                @ p.statements[0]
        # loog 'genTSParam_object', pType && pType.wzElement
        _ cnt.stm[p.statements[0].wzElement]
            @ p.statements[0]
            @ ctx
            a_cb()
                if pType
                    _ ctx.write(': ')
                    _ cnt.stm[pType.wzElement]
                        @ pType
                        @ ctx
                        a_cb()
                            if initValue
                                _ ctx.write(' = ')
                                _ cnt.stm[initValue.wzElement]
                                    @ initValue
                                    @ ctx
                                    @ callback
                            else
                                r_cb()
                else
                    if initValue
                        _ ctx.write(' = ')
                        _ cnt.stm[initValue.wzElement]
                            @ initValue
                            @ ctx
                            @ callback
                    else
                        r_cb()

    function genTSParams_close
		param s0
		param ctx
		param cnt
		param callback
		if s0.statements.length == 2
			var item = s0.statements[0]
			# loog 'genTSParams_close 1 item.wzElement', item.wzElement
			_ cnt.stm[item.wzElement]
				@ item
				@ ctx
				a_cb()
					_ ctx.write(' = ')
					var item = s0.statements[1]
					# loog 'genTSParams_close 2 item.wzElement', item.wzElement
					_ cnt.stm[item.wzElement]
						@ item
						@ ctx
						@ callback
		else
            if !cnt.stm[s0.wzElement]
                return
                    _ callback
                        _ ctx.error
                            @ myname + '.genTSParams_close. Invalid statement: ' + s0.wzElement + '/' + s0.wzName + 
                                \b '.\n\nDid you mean: `:ref ' + s0.wzName + '`\n\n'
                            @ s0
            else
                _ ctx.write(' = ')
                # loog 'genTSParams_close 3 item.wzElement', s0.wzElement
                _ cnt.stm[s0.wzElement]
                    @ s0
                    @ ctx
                    @ callback

	set md.genAccessorsAndExtra
		function
			param model
			param ctx
			if model.typePublic
				_ ctx.write('public ')
			if model.typeProtected
				_ ctx.write('protected ')
			if model.typePrivate
				_ ctx.write('private ')
			if model.typeReadonly
				_ ctx.write('readonly ')
			if model.typeAbstract
				_ ctx.write('abstract ')

    set md.genTSTypeParameters
        function 
            param model
			param ctx
			param cnt
			param callback
            # loog 'genTSTypeParameters.model.statements.length', model.statements.length, 'Object.keys(model)', Object.keys(model)
			_ genTSTypeParameters_partial
				@ model
				@ ctx
				@ cnt
				a_cb()
					if model.extends && model.extends.length > 0
						_ ctx.write( ' extends ')
                        repeater( 1, model.extends
                            if index_1 > 0
                                _ ctx.write(', ')
                            _ ctx.write(item_1.wzName)
                            _ md.genTSTypeParameterInsts
                                @ item_1
                                @ ctx
                                @ cnt
                                a_cb()
                                    repeater_increment( 1 )
                            $append next
                                r_cb()
                            $* Old erroneous
                            _ model.extends.forEach
                                =>
                                    param e
                                    param index
                                    if index > 0
                                        _ ctx.write(', ')
                                    _ ctx.write(e.wzName)
                            *$
                    else
                        r_cb()

    function genTSTypeParameters_partial
        param model
        param ctx
        param cnt
        param callback
        # loog 'genTSTypeParameters_partial.model.typeParameterDecls', model.typeParameterDecls
        if model.typeParameterDecls && model.typeParameterDecls.length > 0
            _ ctx.write('<')
            repeater( 1, model.typeParameterDecls
                if index_1 > 0
                    _ ctx.write(', ')
                _ cnt.stm.typeParameterDecl
                    @ item_1
                    @ ctx
                    a_cb()
                        repeater_increment( 1 )
                $append next
                    _ ctx.write('>')
                    r_cb()
        $* 15/5/24 NO NO NO we are inside type parameters. Added when? Sleeping?
        elif model.statements.length == 1
            # loog 'genTSTypeParameters.model.statements[0].wzElement', model.statements[0].wzElement
            _ cnt.stm[model.statements[0].wzElement]
                @ model.statements[0]
                @ ctx
                @ callback
        *$
        else
            r_cb()

    set md.genTSTypeParameterInsts   
        function 
            param model
            param ctx
            param cnt
            param callback
            # loog 'genTSTypeParameterInsts', Object.keys(model), model.typeParameterInsts
            if model.typeParameterInsts && model.typeParameterInsts.length > 0
                _ ctx.write('<')
                repeater( 1, model.typeParameterInsts
                    if index_1 > 0
                        _ ctx.write(', ')
                    _ cnt.stm[item_1.wzElement]
                        @ item_1
                        @ ctx
                        a_cb()
                            repeater_increment( 1 )
                    $append next
                        _ ctx.write('>')
                        r_cb()
            else
                r_cb()
    
    set md.indexedTSNeedsGraphs
        function 
            param model
			return
				[
					@ 'typeMapped'
					@ 'typeConditional'
					. indexOf(model.wzElement) > -1

	set md.genTSDecorators
        function
            param model
            param ctx
            param cnt
            param callback
            var decorators = []
            var temp = []
            foreach s in model.statements
                if s.wzElement == 'decorator'
                    _ decorators.push(s)
                else
                    _ temp.push(s)
            set model.statements = temp
            if decorators.length > 0
                repeater( 1, decorators
                    _ cnt.stm.decorator
                        @ item_1
                        @ ctx
                        a_cb()
                            repeater_increment( 1 )
                    $append next
                        r_cb()
            else
                r_cb()	