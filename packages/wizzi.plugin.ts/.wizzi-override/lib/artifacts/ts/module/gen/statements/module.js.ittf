loader( module )

	stm( typeDeclare
        var xmodel = writeComments(model, ctx)
		repeater( 1, xmodel.statements )
			_ ctx.write('declare ')
			_ cnt.genItem
				@ item_1
				@ ctx
				a_cb()
					repeater_increment( 1 )
			$append next
				r_cb()

	stm( typeModule
        var xmodel = writeComments(model, ctx)
		_ ctx.write('module ' + xmodel.wzName)
		_ ctx.w(' {')
		_ cnt.genItems
			@ xmodel.statements
			@ ctx
			a_cb()
				_ ctx.w('}')
				r_cb()

	stm( typeTypeAlias
        var xmodel = writeComments(model, ctx)
		_ ctx.write('type ' + xmodel.wzName)
		_ u.genTSTypeParameters
			@ xmodel
			@ ctx
			@ cnt
			a_cb()
				if xmodel.statements.length == 1
					_ ctx.write(' = ')
					_ cnt.genItem
						@ xmodel.statements[0]
						@ ctx
						a_cb()
							_ ctx.w(';')
							r_cb()
				else
					return
						_ callback
							_ ctx.error(':type typeTypeAlias must have one children. found: ' + xmodel.statements.length, xmodel)

	stm( typeFunctionDeclare
        var xmodel = writeComments(model, ctx)
		_ ctx.write('function ' + xmodel.wzName)
		# loog 'typeFunctionDeclare enter 1'
		_ u.genTSTypeParameters
			@ xmodel
			@ ctx
			@ cnt
			a_cb()
				# loog 'typeFunctionDeclare enter 2'
				_ ctx.write('(')
				_ u.genTSParams
					@ xmodel
					@ ctx
					@ cnt
					a_cb()
						# loog 'typeFunctionDeclare cb 1'
						_ ctx.write(')')
						if xmodel.typeReturn
							# loog 'typeFunctionDeclare typeReturn', xmodel.typeReturn.wzElement
							_ ctx.write(': ')
							_ cnt.stm.typeReturn
								@ xmodel.typeReturn
								@ ctx
								a_cb()
									_ ctx.w(';')
									# loog 'typeFunctionDeclare exit 1'
									r_cb()
						else
							# loog 'typeFunctionDeclare exit 2'
							r_cb()