module
    kind es6
    +
    var util = require('util')
    var path = require('path')
    var stringify = require('json-stringify-safe')
    var errors = require('./errors')
    +
    var md = module.exports = {}
    set md.name = '${wzCtx.name}.index'
    +
    # window(s) vars must be declared even if empty
    var window_modelFactories
        {
            @ 'py' require('./lib/wizzi/models/py-factory.g')
    var window_artifactGenerators
        {
            @ 'py/document' require('./lib/artifacts/py/document/gen/main')
    var window_transformers
        {
            @ 'py/extended' require('./lib/artifacts/py/extended/trans/main')
    var window_schemaDefinitions
        {
    +
    #
        # FactoryPlugin class
    class FactoryPlugin
        ctor
            param wizziPackage
            param provides
            set this.file = wizziPackage.file
            set this.provides = provides
            set this.modelFactories = {}
            set this.modelTransformers = {}
            set this.artifactGenerators = {}
            set this.schemaDefinitions = {}
        +
        m initialize
            param options
            param callback
            # TODO
            return
                _ callback(null)
        +
        m getName
            return '${wzCtx.name}'
        +
        m getFilename
            return __filename
        +
        m getProvides
            return this.provides
        +
        $include model-factory
        +
        $include model-transformation
        +
        $include artifact-generation
        +
        $include schema-definition
    +
    function error
        param errorName
        param method
        param message
        param innerError
        return
            new errors.WizziPluginError
                @ message
                @ null
                {
                    @ errorName errorName
                    @ method md.name + '.' + method
                    @ sourcePath __filename
                    @ inner innerError
    +
    set module.exports
        {
            @ provides
                {
                    @ schemas
                        [
                            $foreach schema in wzCtx.Schemas
                                @ '${schema.name}'
                    @ modelTransformers
                        [
                            $foreach schema in wzCtx.Schemas
                                $foreach trans in schema.modelTransformers
                                    @ '${schema.name}/${trans.name}'
                    @ artifactGenerators
                        [
                            $foreach schema in wzCtx.Schemas
                                $foreach artifact in schema.artifactGenerators
                                    @ '${schema.name}/${artifact.name}'
            @ createFactoryPlugin
                function
                    param wizziPackage
                    param options
                    param callback
                    var plugin
                        new FactoryPlugin
                            @ wizziPackage
                            @ this.provides
                    _ plugin.initialize
                        @ options
                        a_cb( notUsed )
                            return
                                _ callback
                                    @ null
                                    @ plugin
