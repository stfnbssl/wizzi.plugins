$group

	e class : statement
		# A Python class
		a super
		a extends

		m findCtor
			return _.find(this.statements, function(item) { return item.wzElement === 'ctor' })

		m wzInitialize
			set ctx.modelState = ctx.modelState || {}
			# loog 'wizzi-js.model.class.modelState', ctx.modelState
			set ctx.modelState.hasClasses = true
			if this.extends && this.extends.length > 0
				set this.super = this.extends
			else
				var tokens = this.wzName.split(':')
				if tokens.length == 2
					set this.wzName = tokens[0]
					set this.super = tokens[1]

		#
		# ittf
		#   class Horse
		#	  super Animal
		#     ctor
		#       string name
		#         required
		#       { options
		#       boolean canSpeakLikeAHuman
		#         required
		#       set this.name = name
		#       set this.options = options
		#     m sayHello
		#       if this.options.canSpeakLikeAHuman
		#         success 'Hello i am ' + this.name
		#       else
		#         success 'Hii i am ' + this.name
		#

	e ctor : function
		r base/s

		m getBaseArgs
			var ret = []
			foreach item in this.bases
				_ ret.push(item.wzName)
			return ret

		#
		# ittf
		#   class Horse
		#	  super Animal
		#     ctor
		#       string name
		#       base name
		#

	e destructor : function
        tag del

		#
		# ittf
		#   class Horse
		#	  super Animal
		#     ctor
		#       string name
		#       base name
		#     del
        #       print 'die'

	e base : statement

		#
		# ittf
		#   see 'ctor' element example

	e method : function
		tag m
		a_flag( static )
		a_flag( async )

		# ittf
		#   class Foo
		#     m sayHello
		#       string name
		#       success 'Hello ' + name

	e property : function
        tag p
		a_flag( static )

		# ittf
		#   class Foo
		#     p options

	e get : statement
		
		tag get

		# es6 - Defines a getter on a new object in the object initializer
		# reference https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Functions/get
		#
		# ittf
		#   var obj
		#     {
		#       @ log ['test']
		#       get latest
		#         if this.log.length == 0
		#           return undefined
		#         return this.log[this.log.length - 1]
		#
		
	e new : statement
		# ittf:
		#     var h
		#         new Hello
		#     var j
		#         new Hello
		#             function
		#                 param p
		#                 + ...
		# js:
		#     var h = new Hello();
		#     var j = new Hello(function(p) { ... });
	
	
	


